{
  "address": "0x44921b4c7510Fb306d8E58cF3894fA2bc8a79F00",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketId",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b2cc85aa3089c00d69e1bf51b5e2a5fbd1521c99bf2c159222888cf3a079daa",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x44921b4c7510Fb306d8E58cF3894fA2bc8a79F00",
    "transactionIndex": 20,
    "gasUsed": "1151650",
    "logsBloom": "0x
    "blockHash": "0x1b4deee63d45cacae9eafd2b4ae89361801817ab5576cb81ef9713d842bdc8ee",
    "transactionHash": "0x7b2cc85aa3089c00d69e1bf51b5e2a5fbd1521c99bf2c159222888cf3a079daa",
    "logs": [],
    "blockNumber": 5718419,
    "cumulativeGasUsed": "2709312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7d55627a1de4a5f0d6407a64fdd9234f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketId\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x99cb1d5fb57bcde34b2894f2d346170128571203972692b176f1605c9f28abbd\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n}\\n\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        address marketId\\n    ) public view returns (MarketInfo memory) {\\n        Market market = Market(marketId);\\n\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        string[] memory outcomes = new string[](outcomeSlotCount);\\n\\n        uint256 outcomesSupply = marketFactory\\n            .wrappedERC20Factory()\\n            .tokens(\\n                conditionalTokens.getPositionId(\\n                    marketFactory.collateralToken(),\\n                    conditionalTokens.getCollectionId(\\n                        bytes32(0),\\n                        conditionId,\\n                        1\\n                    )\\n                )\\n            )\\n            .totalSupply();\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = market.outcomes(i);\\n        }\\n\\n        IRealityETH_v3_0.Question[]\\n            memory questions = new IRealityETH_v3_0.Question[](\\n                market.getQuestionsCount()\\n            );\\n        bytes32[] memory questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = market.questionsIds(i);\\n                questions[i] = realitio.questions(questionsIds[i]);\\n            }\\n        }\\n\\n        return\\n            MarketInfo({\\n                id: marketId,\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                outcomesSupply: outcomesSupply,\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                questionsIds: questionsIds,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                allMarkets[j]\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n}\\n\",\"keccak256\":\"0x2d453629443b50b20884c1f10ecf517981dd0f24a24d23b71491cd16750d289b\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    uint256 internal constant REALITY_BINARY_TEMPLATE = 0;\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (\\n            templateId == REALITY_BINARY_TEMPLATE ||\\n            templateId == REALITY_SINGLE_SELECT_TEMPLATE\\n        ) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256[] memory payouts = getSingleSelectPayouts(\\n            questionId,\\n            market.numOutcomes()\\n        );\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 result = uint256(\\n            realitio.resultForOnceSettled(market.questionId())\\n        );\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = isBitSet(result, i) ? 1 : 0;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) internal {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n\\n    function isBitSet(uint256 b, uint256 pos) public pure returns (bool) {\\n        return ((b >> pos) & 1) == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa9b02f0362f203a7105316f5de8277d1e241d2b3bc940c9de948d352b0726c93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}