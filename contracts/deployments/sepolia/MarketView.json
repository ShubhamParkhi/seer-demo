{
  "address": "0x0956b70AC0Eca45DB9661a1cEE96B2e7062d8a1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketId",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1a640240c343be6bcec2c1d5e4730de7c0513d403efc6d06fef8a0dde3d6e78",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x0956b70AC0Eca45DB9661a1cEE96B2e7062d8a1C",
    "transactionIndex": 19,
    "gasUsed": "1301936",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6d0ada5c7677296b5d51a54155b1277b710303edfa5ff72d261a2a566fe76bf7",
    "transactionHash": "0xa1a640240c343be6bcec2c1d5e4730de7c0513d403efc6d06fef8a0dde3d6e78",
    "logs": [],
    "blockNumber": 5979707,
    "cumulativeGasUsed": "2880048",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "2135114210e88e7f2692ba5ee820fcfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketId\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x99cb1d5fb57bcde34b2894f2d346170128571203972692b176f1605c9f28abbd\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n}\\n\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        address marketId\\n    ) public view returns (MarketInfo memory) {\\n        Market market = Market(marketId);\\n\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        string[] memory outcomes = new string[](outcomeSlotCount);\\n\\n        uint256 outcomesSupply = marketFactory\\n            .wrappedERC20Factory()\\n            .tokens(\\n                conditionalTokens.getPositionId(\\n                    marketFactory.collateralToken(),\\n                    conditionalTokens.getCollectionId(\\n                        bytes32(0),\\n                        conditionId,\\n                        1\\n                    )\\n                )\\n            )\\n            .totalSupply();\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = market.outcomes(i);\\n        }\\n\\n        IRealityETH_v3_0.Question[]\\n            memory questions = new IRealityETH_v3_0.Question[](\\n                market.getQuestionsCount()\\n            );\\n        string[] memory encodedQuestions = new string[](questions.length);\\n        bytes32[] memory questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(\\n                    market.questionsIds(i),\\n                    realitio\\n                );\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = market.encodedQuestions(i);\\n            }\\n        }\\n\\n        return\\n            MarketInfo({\\n                id: marketId,\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                outcomesSupply: outcomesSupply,\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                questionsIds: questionsIds,\\n                encodedQuestions: encodedQuestions,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                allMarkets[j]\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(\\n        bytes32 questionId,\\n        IRealityETH_v3_0 realitio\\n    ) public view returns (bytes32) {\\n        if (\\n            realitio.isFinalized(questionId) &&\\n            realitio.isSettledTooSoon(questionId)\\n        ) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n}\\n\",\"keccak256\":\"0x5a8eb2da505e0279e18c0f0daffe6a80b8fcb92c49cf94bad1558cb54a326d46\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    uint256 internal constant REALITY_BINARY_TEMPLATE = 0;\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (\\n            templateId == REALITY_BINARY_TEMPLATE ||\\n            templateId == REALITY_SINGLE_SELECT_TEMPLATE\\n        ) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256[] memory payouts = getSingleSelectPayouts(\\n            questionId,\\n            market.numOutcomes()\\n        );\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 result = uint256(\\n            realitio.resultForOnceSettled(market.questionId())\\n        );\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = isBitSet(result, i) ? 1 : 0;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) internal {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n\\n    function isBitSet(uint256 b, uint256 pos) public pure returns (bool) {\\n        return ((b >> pos) & 1) == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa9b02f0362f203a7105316f5de8277d1e241d2b3bc940c9de948d352b0726c93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611696806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004610f9f565b6100b0565b604051610066919061125d565b60405180910390f35b61008261007d366004610f9f565b610233565b604051908152602001610066565b6100a361009e3660046112bf565b610395565b60405161006691906112ed565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a9190810190611386565b90506000846001600160401b0381111561013657610136611307565b60405190808252806020026020018201604052801561016f57816020015b61015c610f0e565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b600060018351610194919061144d565b90506000868451116101a75760006101b4565b8684516101b4919061144d565b90506000825b828110610224576101e4888783815181106101d7576101d7611460565b6020026020010151610395565b85836101ef81611476565b94508151811061020157610201611460565b60209081029190910101528015610224578061021c8161148f565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906114b6565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906114b6565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038091906114d1565b9050801561038c578093505b505b5090919050565b61039d610f0e565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906114d1565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c91906114ea565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906114d1565b90506000816001600160401b038111156104f7576104f7611307565b60405190808252806020026020018201604052801561052a57816020015b60608152602001906001900390816105155790505b5090506000886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906114ea565b6001600160a01b0316634f64b2be856001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061091906114ea565b60405163856296f760e01b815260006004820152602481018b9052600160448201526001600160a01b038a169063856296f790606401602060405180830381865afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068791906114d1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f491906114d1565b6040518263ffffffff1660e01b815260040161071291815260200190565b602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906114ea565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906114d1565b905060005b8381101561085e5760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082e9190810190611507565b83828151811061084057610840611460565b6020026020010181905250808061085690611476565b9150506107b9565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c391906114d1565b6001600160401b038111156108da576108da611307565b60405190808252806020026020018201604052801561096157816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816108f85790505b509050600081516001600160401b0381111561097f5761097f611307565b6040519080825280602002602001820160405280156109b257816020015b606081526020019060019003908161099d5790505b509050600082516001600160401b038111156109d0576109d0611307565b6040519080825280602002602001820160405280156109f9578160200160208202803683370190505b50905060008c6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906114ea565b905060005b8451811015610c425760405163255d109d60e21b815260048101829052610ae1906001600160a01b038d1690639574427490602401602060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906114d1565b83610233565b838281518110610af357610af3611460565b602002602001018181525050816001600160a01b03166395addb90848381518110610b2057610b20611460565b60200260200101516040518263ffffffff1660e01b8152600401610b4691815260200190565b61016060405180830381865afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8891906115ae565b858281518110610b9a57610b9a611460565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b038c169063292503ba90602401600060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c129190810190611507565b848281518110610c2457610c24611460565b60200260200101819052508080610c3a90611476565b915050610a65565b5050604051806101a001604052808c6001600160a01b031681526020018a6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc59190810190611507565b81526020018681526020018581526020018a6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3891906114d1565b81526020018a6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f91906114d1565b81526020018981526020018a6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c91906114d1565b81526020018a6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906114d1565b81526020018481526020018281526020018381526020016000896001600160a01b031663dd34de678c6040518263ffffffff1660e01b8152600401610eba91815260200190565b602060405180830381865afa158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb91906114d1565b1190529c9b505050505050505050505050565b604051806101a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b0381168114610f9c57600080fd5b50565b60008060408385031215610fb257600080fd5b823591506020830135610fc481610f87565b809150509250929050565b60005b83811015610fea578181015183820152602001610fd2565b50506000910152565b6000815180845261100b816020860160208601610fcf565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561106a57601f19868403018952611058838351610ff3565b9884019892509083019060010161103c565b5090979650505050505050565b600081518084526020808501945080840160005b8381101561112c57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161108b565b509495945050505050565b600081518084526020808501945080840160005b8381101561112c5781518752958201959082019060010161114b565b80516001600160a01b0316825260006101a0602083015181602086015261119082860182610ff3565b915050604083015184820360408601526111aa828261101f565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151858303828701526112038382611077565b92505050610140808401518583038287015261121f8382611137565b92505050610160808401518583038287015261123b838261101f565b92505050610180808401516112538287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112b257603f198886030184526112a0858351611167565b94509285019290850190600101611284565b5092979650505050505050565b600080604083850312156112d257600080fd5b82356112dd81610f87565b91506020830135610fc481610f87565b6020815260006113006020830184611167565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561134057611340611307565b60405290565b604051601f8201601f191681016001600160401b038111828210171561136e5761136e611307565b604052919050565b805161138181610f87565b919050565b6000602080838503121561139957600080fd5b82516001600160401b03808211156113b057600080fd5b818501915085601f8301126113c457600080fd5b8151818111156113d6576113d6611307565b8060051b91506113e7848301611346565b818152918301840191848101908884111561140157600080fd5b938501935b8385101561142b578451925061141b83610f87565b8282529385019390850190611406565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611437565b634e487b7160e01b600052603260045260246000fd5b60006001820161148857611488611437565b5060010190565b60008161149e5761149e611437565b506000190190565b8051801515811461138157600080fd5b6000602082840312156114c857600080fd5b611300826114a6565b6000602082840312156114e357600080fd5b5051919050565b6000602082840312156114fc57600080fd5b815161130081610f87565b60006020828403121561151957600080fd5b81516001600160401b038082111561153057600080fd5b818401915084601f83011261154457600080fd5b81518181111561155657611556611307565b611569601f8201601f1916602001611346565b915080825285602082850101111561158057600080fd5b611591816020840160208601610fcf565b50949350505050565b805163ffffffff8116811461138157600080fd5b600061016082840312156115c157600080fd5b6115c961131d565b825181526115d960208401611376565b60208201526115ea6040840161159a565b60408201526115fb6060840161159a565b606082015261160c6080840161159a565b608082015261161d60a084016114a6565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea2646970667358221220b4e7b19058839ea684789c7256219d51b7b0b7216d70e365c55d4ebc357f6afe64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004610f9f565b6100b0565b604051610066919061125d565b60405180910390f35b61008261007d366004610f9f565b610233565b604051908152602001610066565b6100a361009e3660046112bf565b610395565b60405161006691906112ed565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a9190810190611386565b90506000846001600160401b0381111561013657610136611307565b60405190808252806020026020018201604052801561016f57816020015b61015c610f0e565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b600060018351610194919061144d565b90506000868451116101a75760006101b4565b8684516101b4919061144d565b90506000825b828110610224576101e4888783815181106101d7576101d7611460565b6020026020010151610395565b85836101ef81611476565b94508151811061020157610201611460565b60209081029190910101528015610224578061021c8161148f565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906114b6565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906114b6565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038091906114d1565b9050801561038c578093505b505b5090919050565b61039d610f0e565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906114d1565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c91906114ea565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906114d1565b90506000816001600160401b038111156104f7576104f7611307565b60405190808252806020026020018201604052801561052a57816020015b60608152602001906001900390816105155790505b5090506000886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059191906114ea565b6001600160a01b0316634f64b2be856001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061091906114ea565b60405163856296f760e01b815260006004820152602481018b9052600160448201526001600160a01b038a169063856296f790606401602060405180830381865afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068791906114d1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f491906114d1565b6040518263ffffffff1660e01b815260040161071291815260200190565b602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075391906114ea565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b491906114d1565b905060005b8381101561085e5760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082e9190810190611507565b83828151811061084057610840611460565b6020026020010181905250808061085690611476565b9150506107b9565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c391906114d1565b6001600160401b038111156108da576108da611307565b60405190808252806020026020018201604052801561096157816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816108f85790505b509050600081516001600160401b0381111561097f5761097f611307565b6040519080825280602002602001820160405280156109b257816020015b606081526020019060019003908161099d5790505b509050600082516001600160401b038111156109d0576109d0611307565b6040519080825280602002602001820160405280156109f9578160200160208202803683370190505b50905060008c6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906114ea565b905060005b8451811015610c425760405163255d109d60e21b815260048101829052610ae1906001600160a01b038d1690639574427490602401602060405180830381865afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906114d1565b83610233565b838281518110610af357610af3611460565b602002602001018181525050816001600160a01b03166395addb90848381518110610b2057610b20611460565b60200260200101516040518263ffffffff1660e01b8152600401610b4691815260200190565b61016060405180830381865afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8891906115ae565b858281518110610b9a57610b9a611460565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b038c169063292503ba90602401600060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c129190810190611507565b848281518110610c2457610c24611460565b60200260200101819052508080610c3a90611476565b915050610a65565b5050604051806101a001604052808c6001600160a01b031681526020018a6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc59190810190611507565b81526020018681526020018581526020018a6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3891906114d1565b81526020018a6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f91906114d1565b81526020018981526020018a6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c91906114d1565b81526020018a6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906114d1565b81526020018481526020018281526020018381526020016000896001600160a01b031663dd34de678c6040518263ffffffff1660e01b8152600401610eba91815260200190565b602060405180830381865afa158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efb91906114d1565b1190529c9b505050505050505050505050565b604051806101a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b0381168114610f9c57600080fd5b50565b60008060408385031215610fb257600080fd5b823591506020830135610fc481610f87565b809150509250929050565b60005b83811015610fea578181015183820152602001610fd2565b50506000910152565b6000815180845261100b816020860160208601610fcf565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561106a57601f19868403018952611058838351610ff3565b9884019892509083019060010161103c565b5090979650505050505050565b600081518084526020808501945080840160005b8381101561112c57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161108b565b509495945050505050565b600081518084526020808501945080840160005b8381101561112c5781518752958201959082019060010161114b565b80516001600160a01b0316825260006101a0602083015181602086015261119082860182610ff3565b915050604083015184820360408601526111aa828261101f565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151858303828701526112038382611077565b92505050610140808401518583038287015261121f8382611137565b92505050610160808401518583038287015261123b838261101f565b92505050610180808401516112538287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156112b257603f198886030184526112a0858351611167565b94509285019290850190600101611284565b5092979650505050505050565b600080604083850312156112d257600080fd5b82356112dd81610f87565b91506020830135610fc481610f87565b6020815260006113006020830184611167565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561134057611340611307565b60405290565b604051601f8201601f191681016001600160401b038111828210171561136e5761136e611307565b604052919050565b805161138181610f87565b919050565b6000602080838503121561139957600080fd5b82516001600160401b03808211156113b057600080fd5b818501915085601f8301126113c457600080fd5b8151818111156113d6576113d6611307565b8060051b91506113e7848301611346565b818152918301840191848101908884111561140157600080fd5b938501935b8385101561142b578451925061141b83610f87565b8282529385019390850190611406565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611437565b634e487b7160e01b600052603260045260246000fd5b60006001820161148857611488611437565b5060010190565b60008161149e5761149e611437565b506000190190565b8051801515811461138157600080fd5b6000602082840312156114c857600080fd5b611300826114a6565b6000602082840312156114e357600080fd5b5051919050565b6000602082840312156114fc57600080fd5b815161130081610f87565b60006020828403121561151957600080fd5b81516001600160401b038082111561153057600080fd5b818401915084601f83011261154457600080fd5b81518181111561155657611556611307565b611569601f8201601f1916602001611346565b915080825285602082850101111561158057600080fd5b611591816020840160208601610fcf565b50949350505050565b805163ffffffff8116811461138157600080fd5b600061016082840312156115c157600080fd5b6115c961131d565b825181526115d960208401611376565b60208201526115ea6040840161159a565b60408201526115fb6060840161159a565b606082015261160c6080840161159a565b608082015261161d60a084016114a6565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea2646970667358221220b4e7b19058839ea684789c7256219d51b7b0b7216d70e365c55d4ebc357f6afe64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}