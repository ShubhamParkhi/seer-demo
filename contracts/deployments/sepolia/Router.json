{
  "address": "0x179d8F8c811B8C759c33809dbc6c5ceDc62D05DD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4a3647e5f7093fe9d1b16a7dea369eae3a45327d2cfcb06e564c551cedfd755",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x179d8F8c811B8C759c33809dbc6c5ceDc62D05DD",
    "transactionIndex": 95,
    "gasUsed": "1462203",
    "logsBloom": "0x
    "blockHash": "0xa3533a5ec66c9c53d3f170dc5395556aab9ab65326b657d9c2476b73f99fb241",
    "transactionHash": "0xa4a3647e5f7093fe9d1b16a7dea369eae3a45327d2cfcb06e564c551cedfd755",
    "logs": [],
    "blockNumber": 5699934,
    "cumulativeGasUsed": "26155782",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8bdC504dC3A05310059c1c67E0A2667309D27B93",
    "0xfE8bF5140F00de6F75BAFa3Ca0f4ebf2084A46B2"
  ],
  "numDeployments": 1,
  "solcInputHash": "ad7a410fc80262461c4d7bb7ab77987e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Router.sol\":\"Router\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high < type(uint256).max - 2, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xe8330ca8645ab90848a1dac7112b8edfcf640a2d5efeb1f6198bb4aad02be454\",\"license\":\"MIT\"},\"src/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IConditionalTokens, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract Router is ERC1155Holder {\\n    IConditionalTokens public conditionalTokens;\\n    WrappedERC20Factory public wrappedERC20Factory;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        WrappedERC20Factory _wrappedERC20Factory\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n    }\\n\\n    // @notice Transfers the collateral to the Router and then splits the position.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) public {\\n        IERC20(collateralToken).transferFrom(msg.sender, address(this), amount);\\n        _splitPosition(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n    }\\n\\n    // @notice Splits a position and sends the outcome tokens to the user.\\n    function _splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) internal {\\n        IERC20(collateralToken).approve(address(conditionalTokens), amount);\\n\\n        conditionalTokens.splitPosition(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // wrap to erc20\\n            conditionalTokens.safeTransferFrom(\\n                address(this),\\n                address(wrappedERC20Factory.wrapped1155Factory()),\\n                tokenId,\\n                amount,\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            // transfer the ERC20 back to the user\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    // @notice Merges positions and sends the collateral tokens to the user.\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) public {\\n        _mergePositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n        collateralToken.transfer(msg.sender, amount);\\n    }\\n\\n    // @notice Merges positions and receives the collateral tokens.\\n    // @dev callers to this function must send the collateral to the user.\\n    function _mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) internal {\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        conditionalTokens.mergePositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n    }\\n\\n    // @notice Redeems positions and sends the collateral tokens to the user.\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) public {\\n        uint256 initialBalance = collateralToken.balanceOf(address(this));\\n\\n        _redeemPositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n\\n        uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n        if (finalBalance > initialBalance) {\\n            collateralToken.transfer(msg.sender, finalBalance - initialBalance);\\n        }\\n    }\\n\\n    // @notice Redeems positions and receives the collateral tokens.\\n    // @dev Callers to this function must send the collateral to the user.\\n    function _redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) internal {\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < indexSets.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                indexSets[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            uint256 amount = wrapped1155.balanceOf(msg.sender);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        conditionalTokens.redeemPositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n    }\\n\\n    // @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(\\n            parentCollectionId,\\n            conditionId,\\n            indexSet\\n        );\\n        return\\n            conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                collectionId\\n            );\\n    }\\n\\n    // @notice Returns the address of the ERC-20 associated to the ERC-1155 outcome token.\\n    function getTokenAddress(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (IERC20) {\\n        return\\n            wrappedERC20Factory.tokens(\\n                getTokenId(\\n                    collateralToken,\\n                    parentCollectionId,\\n                    conditionId,\\n                    indexSet\\n                )\\n            );\\n    }\\n\\n    // @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    function getWinningOutcomes(\\n        bytes32 conditionId\\n    ) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](\\n            conditionalTokens.getOutcomeSlotCount(conditionId)\\n        );\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0\\n                ? false\\n                : true;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6be4dbad73d8ce604de3e81cdabb84f2295431e6755e7fff7f04a56d4c40fb52\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x5c929c278735afd1215c8205fab1c6ecdd341b1474629f85c8ce7de13806be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200196f3803806200196f83398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b6118a180620000ce6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636137132511610071578063613713251461014c57806372ce42751461015f5780639e7212ad14610172578063a88453d214610185578063bc197c8114610198578063f23a6e61146101d057600080fd5b806301b7037c146100ae57806301ffc9a7146100c357806302bd74c3146100eb5780631a09424a1461010b5780635bd9e2991461012c575b600080fd5b6100c16100bc36600461119c565b6101ef565b005b6100d66100d1366004611205565b610371565b60405190151581526020015b60405180910390f35b6100fe6100f9366004611236565b6103a8565b6040516100e2919061124f565b61011e610119366004611295565b610525565b6040519081526020016100e2565b60005461013f906001600160a01b031681565b6040516100e291906112d0565b60015461013f906001600160a01b031681565b6100c161016d3660046112e4565b61061f565b6100c16101803660046112e4565b6106a9565b61013f610193366004611295565b610728565b6101b76101a6366004611497565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100e2565b6101b76101de366004611544565b63f23a6e6160e01b95945050505050565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061021e9030906004016112d0565b6020604051808303816000875af115801561023d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026191906115ac565b905061027086868686866107b0565b6040516370a0823160e01b81526000906001600160a01b038816906370a082319061029f9030906004016112d0565b6020604051808303816000875af11580156102be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e291906115ac565b905081811115610368576001600160a01b03871663a9059cbb3361030685856115db565b6040518363ffffffff1660e01b81526004016103239291906115ee565b6020604051808303816000875af1158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190611607565b505b50505050505050565b60006001600160e01b03198216630271189760e51b14806103a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008054604051636a16e06160e11b815260048101849052606092916001600160a01b03169063d42dc0c290602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906115ac565b6001600160401b0381111561042f5761042f611355565b604051908082528060200260200182016040528015610458578160200160208202803683370190505b50905060005b815181101561051e57600054604051630141320560e21b815260048101869052602481018390526001600160a01b0390911690630504c81490604401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906115ac565b156104e75760016104ea565b60005b8282815181106104fc576104fc611629565b91151560209283029190910190910152806105168161163f565b91505061045e565b5092915050565b6000805460405163856296f760e01b815260048101869052602481018590526044810184905282916001600160a01b03169063856296f790606401602060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906115ac565b60005460405163039dd75360e41b81529192506001600160a01b0316906339dd7530906105d490899085906004016115ee565b602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906115ac565b9695505050505050565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd9061064f90339030908690600401611658565b6020604051808303816000875af115801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611607565b506106a1868686868686610b0f565b505050505050565b6106b7868686868686610e56565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906106e590339085906004016115ee565b6020604051808303816000875af1158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190611607565b6001546000906001600160a01b0316634f64b2be61074887878787610525565b6040518263ffffffff1660e01b815260040161076691815260200190565b602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a7919061167c565b95945050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e919061167c565b905060005b82811015610a9d57600061085188888888888781811061084557610845611629565b90506020020135610525565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c4919061167c565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016108f491906112d0565b6020604051808303816000875af1158015610913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093791906115ac565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd9061096a90339030908690600401611658565b6020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611607565b506000546001546040516303c2ea1160e61b8152600481018690526001600160a01b03888116936352aecb24939082169288928792309291169063f0ba844090602401600060405180830381865afa158015610a0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a3591908101906116bd565b6040518663ffffffff1660e01b8152600401610a55959493929190611756565b600060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b505050505050508080610a959061163f565b915050610823565b50600054604051626dc0df60e21b81526001600160a01b03909116906301b7037c90610ad590899089908990899089906004016117c2565b600060405180830381600087803b158015610aef57600080fd5b505af1158015610b03573d6000803e3d6000fd5b50505050505050505050565b60005460405163095ea7b360e01b81526001600160a01b038881169263095ea7b392610b43929091169085906004016115ee565b6020604051808303816000875af1158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190611607565b506000546040516372ce427560e01b81526001600160a01b03909116906372ce427590610bc1908990899089908990899089906004016117f0565b600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b5050505060005b82811015610368576000610c1888888888888781811061084557610845611629565b6000546001546040805163150c5b9760e01b815290519394506001600160a01b039283169363f242432a933093169163150c5b979160048083019260209291908290030181865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c95919061167c565b6001546040516303c2ea1160e61b815260048101879052869189916001600160a01b039091169063f0ba844090602401600060405180830381865afa158015610ce2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0a91908101906116bd565b6040518663ffffffff1660e01b8152600401610d2a959493929190611831565b600060405180830381600087803b158015610d4457600080fd5b505af1158015610d58573d6000803e3d6000fd5b50506001546040516327b2595f60e11b815260048101859052600093506001600160a01b039091169150634f64b2be90602401602060405180830381865afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcc919061167c565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90610dfd90339088906004016115ee565b6020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e409190611607565b5050508080610e4e9061163f565b915050610bf6565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec4919061167c565b905060005b838110156110c3576000610eeb89898989898781811061084557610845611629565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e919061167c565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610f9190339030908a90600401611658565b6020604051808303816000875af1158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190611607565b506000546001546040516303c2ea1160e61b8152600481018590526001600160a01b03878116936352aecb24939082169287928b92309291169063f0ba844090602401600060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105c91908101906116bd565b6040518663ffffffff1660e01b815260040161107c959493929190611756565b600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b50505050505080806110bb9061163f565b915050610ec9565b50600054604051639e7212ad60e01b81526001600160a01b0390911690639e7212ad906110fe908a908a908a908a908a908a906004016117f0565b600060405180830381600087803b15801561111857600080fd5b505af115801561112c573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038116811461114e57600080fd5b50565b60008083601f84011261116357600080fd5b5081356001600160401b0381111561117a57600080fd5b6020830191508360208260051b850101111561119557600080fd5b9250929050565b6000806000806000608086880312156111b457600080fd5b85356111bf81611139565b9450602086013593506040860135925060608601356001600160401b038111156111e857600080fd5b6111f488828901611151565b969995985093965092949392505050565b60006020828403121561121757600080fd5b81356001600160e01b03198116811461122f57600080fd5b9392505050565b60006020828403121561124857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561128957835115158352928401929184019160010161126b565b50909695505050505050565b600080600080608085870312156112ab57600080fd5b84356112b681611139565b966020860135965060408601359560600135945092505050565b6001600160a01b0391909116815260200190565b60008060008060008060a087890312156112fd57600080fd5b863561130881611139565b9550602087013594506040870135935060608701356001600160401b0381111561133157600080fd5b61133d89828a01611151565b979a9699509497949695608090950135949350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561139357611393611355565b604052919050565b600082601f8301126113ac57600080fd5b813560206001600160401b038211156113c7576113c7611355565b8160051b6113d682820161136b565b92835284810182019282810190878511156113f057600080fd5b83870192505b8483101561140f578235825291830191908301906113f6565b979650505050505050565b60006001600160401b0382111561143357611433611355565b50601f01601f191660200190565b600082601f83011261145257600080fd5b81356114656114608261141a565b61136b565b81815284602083860101111561147a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156114af57600080fd5b85356114ba81611139565b945060208601356114ca81611139565b935060408601356001600160401b03808211156114e657600080fd5b6114f289838a0161139b565b9450606088013591508082111561150857600080fd5b61151489838a0161139b565b9350608088013591508082111561152a57600080fd5b5061153788828901611441565b9150509295509295909350565b600080600080600060a0868803121561155c57600080fd5b853561156781611139565b9450602086013561157781611139565b9350604086013592506060860135915060808601356001600160401b038111156115a057600080fd5b61153788828901611441565b6000602082840312156115be57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a2576103a26115c5565b6001600160a01b03929092168252602082015260400190565b60006020828403121561161957600080fd5b8151801515811461122f57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611651576116516115c5565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561168e57600080fd5b815161122f81611139565b60005b838110156116b457818101518382015260200161169c565b50506000910152565b6000602082840312156116cf57600080fd5b81516001600160401b038111156116e557600080fd5b8201601f810184136116f657600080fd5b80516117046114608261141a565b81815285602083850101111561171957600080fd5b6107a7826020830160208601611699565b60008151808452611742816020860160208601611699565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a06080820181905260009061140f9083018461172a565b81835260006001600160fb1b038311156117a957600080fd5b8260051b80836020870137939093016020019392505050565b60018060a01b038616815284602082015283604082015260806060820152600061140f608083018486611790565b60018060a01b038716815285602082015284604082015260a06060820152600061181e60a083018587611790565b9050826080830152979650505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061140f9083018461172a56fea26469706673582212202c0070485a7ce14e36ec4a24b49f3101ba294563dc50ea5918aa92463d2f15a964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636137132511610071578063613713251461014c57806372ce42751461015f5780639e7212ad14610172578063a88453d214610185578063bc197c8114610198578063f23a6e61146101d057600080fd5b806301b7037c146100ae57806301ffc9a7146100c357806302bd74c3146100eb5780631a09424a1461010b5780635bd9e2991461012c575b600080fd5b6100c16100bc36600461119c565b6101ef565b005b6100d66100d1366004611205565b610371565b60405190151581526020015b60405180910390f35b6100fe6100f9366004611236565b6103a8565b6040516100e2919061124f565b61011e610119366004611295565b610525565b6040519081526020016100e2565b60005461013f906001600160a01b031681565b6040516100e291906112d0565b60015461013f906001600160a01b031681565b6100c161016d3660046112e4565b61061f565b6100c16101803660046112e4565b6106a9565b61013f610193366004611295565b610728565b6101b76101a6366004611497565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100e2565b6101b76101de366004611544565b63f23a6e6160e01b95945050505050565b6040516370a0823160e01b81526000906001600160a01b038716906370a082319061021e9030906004016112d0565b6020604051808303816000875af115801561023d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026191906115ac565b905061027086868686866107b0565b6040516370a0823160e01b81526000906001600160a01b038816906370a082319061029f9030906004016112d0565b6020604051808303816000875af11580156102be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e291906115ac565b905081811115610368576001600160a01b03871663a9059cbb3361030685856115db565b6040518363ffffffff1660e01b81526004016103239291906115ee565b6020604051808303816000875af1158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190611607565b505b50505050505050565b60006001600160e01b03198216630271189760e51b14806103a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008054604051636a16e06160e11b815260048101849052606092916001600160a01b03169063d42dc0c290602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041891906115ac565b6001600160401b0381111561042f5761042f611355565b604051908082528060200260200182016040528015610458578160200160208202803683370190505b50905060005b815181101561051e57600054604051630141320560e21b815260048101869052602481018390526001600160a01b0390911690630504c81490604401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db91906115ac565b156104e75760016104ea565b60005b8282815181106104fc576104fc611629565b91151560209283029190910190910152806105168161163f565b91505061045e565b5092915050565b6000805460405163856296f760e01b815260048101869052602481018590526044810184905282916001600160a01b03169063856296f790606401602060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906115ac565b60005460405163039dd75360e41b81529192506001600160a01b0316906339dd7530906105d490899085906004016115ee565b602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906115ac565b9695505050505050565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd9061064f90339030908690600401611658565b6020604051808303816000875af115801561066e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106929190611607565b506106a1868686868686610b0f565b505050505050565b6106b7868686868686610e56565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906106e590339085906004016115ee565b6020604051808303816000875af1158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190611607565b6001546000906001600160a01b0316634f64b2be61074887878787610525565b6040518263ffffffff1660e01b815260040161076691815260200190565b602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a7919061167c565b95945050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e919061167c565b905060005b82811015610a9d57600061085188888888888781811061084557610845611629565b90506020020135610525565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c4919061167c565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016108f491906112d0565b6020604051808303816000875af1158015610913573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093791906115ac565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd9061096a90339030908690600401611658565b6020604051808303816000875af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad9190611607565b506000546001546040516303c2ea1160e61b8152600481018690526001600160a01b03888116936352aecb24939082169288928792309291169063f0ba844090602401600060405180830381865afa158015610a0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a3591908101906116bd565b6040518663ffffffff1660e01b8152600401610a55959493929190611756565b600060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b505050505050508080610a959061163f565b915050610823565b50600054604051626dc0df60e21b81526001600160a01b03909116906301b7037c90610ad590899089908990899089906004016117c2565b600060405180830381600087803b158015610aef57600080fd5b505af1158015610b03573d6000803e3d6000fd5b50505050505050505050565b60005460405163095ea7b360e01b81526001600160a01b038881169263095ea7b392610b43929091169085906004016115ee565b6020604051808303816000875af1158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190611607565b506000546040516372ce427560e01b81526001600160a01b03909116906372ce427590610bc1908990899089908990899089906004016117f0565b600060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b5050505060005b82811015610368576000610c1888888888888781811061084557610845611629565b6000546001546040805163150c5b9760e01b815290519394506001600160a01b039283169363f242432a933093169163150c5b979160048083019260209291908290030181865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c95919061167c565b6001546040516303c2ea1160e61b815260048101879052869189916001600160a01b039091169063f0ba844090602401600060405180830381865afa158015610ce2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0a91908101906116bd565b6040518663ffffffff1660e01b8152600401610d2a959493929190611831565b600060405180830381600087803b158015610d4457600080fd5b505af1158015610d58573d6000803e3d6000fd5b50506001546040516327b2595f60e11b815260048101859052600093506001600160a01b039091169150634f64b2be90602401602060405180830381865afa158015610da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcc919061167c565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90610dfd90339088906004016115ee565b6020604051808303816000875af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e409190611607565b5050508080610e4e9061163f565b915050610bf6565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa158015610ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec4919061167c565b905060005b838110156110c3576000610eeb89898989898781811061084557610845611629565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e919061167c565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90610f9190339030908a90600401611658565b6020604051808303816000875af1158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190611607565b506000546001546040516303c2ea1160e61b8152600481018590526001600160a01b03878116936352aecb24939082169287928b92309291169063f0ba844090602401600060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105c91908101906116bd565b6040518663ffffffff1660e01b815260040161107c959493929190611756565b600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b50505050505080806110bb9061163f565b915050610ec9565b50600054604051639e7212ad60e01b81526001600160a01b0390911690639e7212ad906110fe908a908a908a908a908a908a906004016117f0565b600060405180830381600087803b15801561111857600080fd5b505af115801561112c573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038116811461114e57600080fd5b50565b60008083601f84011261116357600080fd5b5081356001600160401b0381111561117a57600080fd5b6020830191508360208260051b850101111561119557600080fd5b9250929050565b6000806000806000608086880312156111b457600080fd5b85356111bf81611139565b9450602086013593506040860135925060608601356001600160401b038111156111e857600080fd5b6111f488828901611151565b969995985093965092949392505050565b60006020828403121561121757600080fd5b81356001600160e01b03198116811461122f57600080fd5b9392505050565b60006020828403121561124857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561128957835115158352928401929184019160010161126b565b50909695505050505050565b600080600080608085870312156112ab57600080fd5b84356112b681611139565b966020860135965060408601359560600135945092505050565b6001600160a01b0391909116815260200190565b60008060008060008060a087890312156112fd57600080fd5b863561130881611139565b9550602087013594506040870135935060608701356001600160401b0381111561133157600080fd5b61133d89828a01611151565b979a9699509497949695608090950135949350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561139357611393611355565b604052919050565b600082601f8301126113ac57600080fd5b813560206001600160401b038211156113c7576113c7611355565b8160051b6113d682820161136b565b92835284810182019282810190878511156113f057600080fd5b83870192505b8483101561140f578235825291830191908301906113f6565b979650505050505050565b60006001600160401b0382111561143357611433611355565b50601f01601f191660200190565b600082601f83011261145257600080fd5b81356114656114608261141a565b61136b565b81815284602083860101111561147a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156114af57600080fd5b85356114ba81611139565b945060208601356114ca81611139565b935060408601356001600160401b03808211156114e657600080fd5b6114f289838a0161139b565b9450606088013591508082111561150857600080fd5b61151489838a0161139b565b9350608088013591508082111561152a57600080fd5b5061153788828901611441565b9150509295509295909350565b600080600080600060a0868803121561155c57600080fd5b853561156781611139565b9450602086013561157781611139565b9350604086013592506060860135915060808601356001600160401b038111156115a057600080fd5b61153788828901611441565b6000602082840312156115be57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a2576103a26115c5565b6001600160a01b03929092168252602082015260400190565b60006020828403121561161957600080fd5b8151801515811461122f57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611651576116516115c5565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561168e57600080fd5b815161122f81611139565b60005b838110156116b457818101518382015260200161169c565b50506000910152565b6000602082840312156116cf57600080fd5b81516001600160401b038111156116e557600080fd5b8201601f810184136116f657600080fd5b80516117046114608261141a565b81815285602083850101111561171957600080fd5b6107a7826020830160208601611699565b60008151808452611742816020860160208601611699565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a06080820181905260009061140f9083018461172a565b81835260006001600160fb1b038311156117a957600080fd5b8260051b80836020870137939093016020019392505050565b60018060a01b038616815284602082015283604082015260806060820152600061140f608083018486611790565b60018060a01b038716815285602082015284604082015260a06060820152600061181e60a083018587611790565b9050826080830152979650505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061140f9083018461172a56fea26469706673582212202c0070485a7ce14e36ec4a24b49f3101ba294563dc50ea5918aa92463d2f15a964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4095,
        "contract": "src/Router.sol:Router",
        "label": "conditionalTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConditionalTokens)2046"
      },
      {
        "astId": 4098,
        "contract": "src/Router.sol:Router",
        "label": "wrappedERC20Factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(WrappedERC20Factory)4806"
      }
    ],
    "types": {
      "t_contract(IConditionalTokens)2046": {
        "encoding": "inplace",
        "label": "contract IConditionalTokens",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedERC20Factory)4806": {
        "encoding": "inplace",
        "label": "contract WrappedERC20Factory",
        "numberOfBytes": "20"
      }
    }
  }
}