{
  "address": "0x4f774E1dBddbf03351204F1F53f160Ce108a09Aa",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "limitSqrtPrice",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISingleSwapRouter.ExactInputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "limitSqrtPrice",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISingleSwapRouter.ExactOutputSingleParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "limitSqrtPrice",
          "type": "uint160"
        }
      ],
      "name": "quoteExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "limitSqrtPrice",
          "type": "uint160"
        }
      ],
      "name": "quoteExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sDAI",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savingsXDaiAdapter",
      "outputs": [
        {
          "internalType": "contract SavingsXDaiAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaprQuoter",
      "outputs": [
        {
          "internalType": "contract ISingleQuoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaprRouter",
      "outputs": [
        {
          "internalType": "contract ISingleSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wxDAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xDAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa7a20a47d83d47e6889debd0c75d79f0a04a727561db7e514cb6940ae96fa06",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x4f774E1dBddbf03351204F1F53f160Ce108a09Aa",
    "transactionIndex": 2,
    "gasUsed": "1619609",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe0abe9a39ea289b34f598561b8530e7a47c2e0abb9e92d3284f609c66963ee83",
    "transactionHash": "0xaa7a20a47d83d47e6889debd0c75d79f0a04a727561db7e514cb6940ae96fa06",
    "logs": [],
    "blockNumber": 35318051,
    "cumulativeGasUsed": "2370134",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8ac48a28d10ec14ed0f442d1b77fad51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct ISingleSwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct ISingleSwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDAI\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savingsXDaiAdapter\",\"outputs\":[{\"internalType\":\"contract SavingsXDaiAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaprQuoter\",\"outputs\":[{\"internalType\":\"contract ISingleQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaprRouter\",\"outputs\":[{\"internalType\":\"contract ISingleSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wxDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Swap Router specialized in swapping outcome tokens with sDAI, xDAI and wxDAI. It expects an OUTCOME_TOKEN<>sDAI pool to exist. 1) When swapping OUTCOME_TOKEN->(w)xDAI, instead of using the route OUTCOME_TOKEN->sDAI->(w)xDAI it does a single swap OUTCOME_TOKEN->sDAI and then redeems the sDAI to (w)xDAI. 2) When swapping (w)xDAI->OUTCOME_TOKEN, instead of using the route (w)xDAI->sDAI->OUTCOME_TOKEN it deposits the (w)xDAI and then does a single swap sDAI->OUTCOME_TOKEN. This way we get a better price than using the sDAI<>wxDAI pool.\",\"kind\":\"dev\",\"methods\":{\"exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"_0\":\"The amount of the received token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"quoteExactInputSingle(address,address,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"limitSqrtPrice\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutputSingle(address,address,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"limitSqrtPrice\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"quoteExactInputSingle(address,address,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutputSingle(address,address,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interaction/SwaprSavingsXDaiRouter.sol\":\"SwaprSavingsXDaiRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/interaction/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/interaction/SwaprSavingsXDaiRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Algebra\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-periphery\\ninterface ISingleSwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-periphery\\ninterface ISingleQuoter {\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param amountIn The desired input amount\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint160 limitSqrtPrice\\n    ) external returns (uint256 amountOut, uint16 fee);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param amountOut The desired output amount\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint160 limitSqrtPrice\\n    ) external returns (uint256 amountIn, uint16 fee);\\n}\\n\\ninterface SavingsXDaiAdapter {\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function depositXDAI(address receiver) external payable returns (uint256);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function redeemXDAI(\\n        uint256 shares,\\n        address receiver\\n    ) external payable returns (uint256);\\n}\\n\\ninterface IERC4626 is IERC20 {\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n}\\n\\n/// @dev Swap Router specialized in swapping outcome tokens with sDAI, xDAI and wxDAI.\\n/// It expects an OUTCOME_TOKEN<>sDAI pool to exist.\\n/// 1) When swapping OUTCOME_TOKEN->(w)xDAI, instead of using the route OUTCOME_TOKEN->sDAI->(w)xDAI\\n/// it does a single swap OUTCOME_TOKEN->sDAI and then redeems the sDAI to (w)xDAI.\\n/// 2) When swapping (w)xDAI->OUTCOME_TOKEN, instead of using the route (w)xDAI->sDAI->OUTCOME_TOKEN\\n/// it deposits the (w)xDAI and then does a single swap sDAI->OUTCOME_TOKEN.\\n/// This way we get a better price than using the sDAI<>wxDAI pool.\\ncontract SwaprSavingsXDaiRouter is ISingleSwapRouter, ISingleQuoter {\\n    ISingleSwapRouter public constant swaprRouter =\\n        ISingleSwapRouter(0xfFB643E73f280B97809A8b41f7232AB401a04ee1); // Swapr Router address\\n    ISingleQuoter public constant swaprQuoter =\\n        ISingleQuoter(0xcBaD9FDf0D2814659Eb26f600EFDeAF005Eda0F7); // Swapr Quoter address\\n\\n    address public constant xDAI =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE); // dummy xDAI address\\n    address public constant wxDAI =\\n        address(0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d); // wxDAI address\\n    IERC4626 public constant sDAI =\\n        IERC4626(0xaf204776c7245bF4147c2612BF6e5972Ee483701); // sDAI address\\n\\n    SavingsXDaiAdapter public constant savingsXDaiAdapter =\\n        SavingsXDaiAdapter(0xD499b51fcFc66bd31248ef4b28d656d67E591A94); // SavingsXDaiAdapter address\\n\\n    /// @inheritdoc ISingleQuoter\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint160 limitSqrtPrice\\n    ) public override returns (uint256 amountOut, uint16 fee) {\\n        if (tokenIn == xDAI || tokenIn == wxDAI) {\\n            // (w)xDAI->OUTCOME_TOKEN\\n            // deposit (w)xDAI to sDAI and quote sDAI<>OUTCOME_TOKEN\\n\\n            return\\n                swaprQuoter.quoteExactInputSingle(\\n                    address(sDAI),\\n                    tokenOut,\\n                    sDAI.previewDeposit(amountIn),\\n                    limitSqrtPrice\\n                );\\n        }\\n\\n        if (tokenOut == xDAI || tokenOut == wxDAI) {\\n            // OUTCOME_TOKEN->(w)xDAI\\n            // quote OUTCOME_TOKEN<>sDAI and redeem sDAI for (w)xDAI\\n            (uint256 quotedAmountOut, uint16 quotedFee) = swaprQuoter\\n                .quoteExactInputSingle(\\n                    tokenIn,\\n                    address(sDAI),\\n                    amountIn,\\n                    limitSqrtPrice\\n                );\\n            return (sDAI.previewRedeem(quotedAmountOut), quotedFee);\\n        }\\n\\n        // OUTCOME_TOKEN<>sDAI\\n        return\\n            swaprQuoter.quoteExactInputSingle(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                limitSqrtPrice\\n            );\\n    }\\n\\n    /// @inheritdoc ISingleSwapRouter\\n    function exactInputSingle(\\n        ExactInputSingleParams memory params\\n    ) external payable override returns (uint256 /*amountOut*/) {\\n        if (msg.value == 0) {\\n            // tokenIn == sDAI, wxDAI or OUTCOME_TOKEN\\n            IERC20(params.tokenIn).transferFrom(\\n                msg.sender,\\n                address(this),\\n                params.amountIn\\n            );\\n            IERC20(params.tokenIn).approve(\\n                address(swaprRouter),\\n                params.amountIn\\n            );\\n        }\\n\\n        if (params.tokenIn == xDAI || params.tokenIn == wxDAI) {\\n            // (w)xDAI->OUTCOME_TOKEN\\n\\n            // 1) deposit (w)xDAI\\n            uint256 shares;\\n            if (msg.value == 0) {\\n                IERC20(wxDAI).approve(\\n                    address(savingsXDaiAdapter),\\n                    params.amountIn\\n                );\\n                shares = savingsXDaiAdapter.deposit(\\n                    params.amountIn,\\n                    address(this)\\n                );\\n            } else {\\n                shares = savingsXDaiAdapter.depositXDAI{value: msg.value}(\\n                    address(this)\\n                );\\n            }\\n\\n            // 2) swap sDAI<>OUTCOME_TOKEN\\n            params.tokenIn = address(sDAI);\\n            params.amountIn = shares;\\n\\n            sDAI.approve(address(swaprRouter), params.amountIn);\\n            return swaprRouter.exactInputSingle(params);\\n        }\\n\\n        if (params.tokenOut == xDAI || params.tokenOut == wxDAI) {\\n            // OUTCOME_TOKEN->(w)xDAI\\n            address _recipient = params.recipient;\\n            params.recipient = address(this);\\n\\n            // 1) swap OUTCOME_TOKEN<>sDAI\\n            address _tokenOut = params.tokenOut;\\n            params.tokenOut = address(sDAI);\\n\\n            uint256 sDAIAmountOut = swaprRouter.exactInputSingle(params);\\n\\n            // 2) redeem sDAI to (w)xDAI\\n            sDAI.approve(address(savingsXDaiAdapter), sDAIAmountOut);\\n\\n            return\\n                _tokenOut == xDAI\\n                    ? savingsXDaiAdapter.redeemXDAI(sDAIAmountOut, _recipient)\\n                    : savingsXDaiAdapter.redeem(sDAIAmountOut, _recipient);\\n        }\\n\\n        // OUTCOME_TOKEN<>sDAI\\n        return swaprRouter.exactInputSingle(params);\\n    }\\n\\n    /// @inheritdoc ISingleQuoter\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint160 limitSqrtPrice\\n    ) public override returns (uint256 amountIn, uint16 fee) {\\n        if (tokenIn == xDAI || tokenIn == wxDAI) {\\n            // (w)xDAI->OUTCOME_TOKEN\\n            // quote sDAI<>OUTCOME_TOKEN and redeem sDAI for (w)xDAI\\n            (uint256 quotedAmountIn, uint16 quotedFee) = swaprQuoter\\n                .quoteExactOutputSingle(\\n                    address(sDAI),\\n                    tokenOut,\\n                    amountOut,\\n                    limitSqrtPrice\\n                );\\n            return (sDAI.previewRedeem(quotedAmountIn), quotedFee);\\n        }\\n\\n        if (tokenOut == xDAI || tokenOut == wxDAI) {\\n            // OUTCOME_TOKEN->(w)xDAI\\n            // quote OUTCOME_TOKEN<>sDAI and redeem sDAI for (w)xDAI\\n            return\\n                swaprQuoter.quoteExactOutputSingle(\\n                    tokenIn,\\n                    address(sDAI),\\n                    sDAI.previewDeposit(amountOut),\\n                    limitSqrtPrice\\n                );\\n        }\\n\\n        // OUTCOME_TOKEN<>sDAI\\n        return\\n            swaprQuoter.quoteExactOutputSingle(\\n                tokenIn,\\n                tokenOut,\\n                amountOut,\\n                limitSqrtPrice\\n            );\\n    }\\n\\n    /// @inheritdoc ISingleSwapRouter\\n    function exactOutputSingle(\\n        ExactOutputSingleParams memory params\\n    ) external payable override returns (uint256 amountIn) {\\n        if (msg.value == 0) {\\n            // tokenIn == sDAI, wxDAI or OUTCOME_TOKEN\\n            IERC20(params.tokenIn).transferFrom(\\n                msg.sender,\\n                address(this),\\n                params.amountInMaximum\\n            );\\n            IERC20(params.tokenIn).approve(\\n                address(swaprRouter),\\n                params.amountInMaximum\\n            );\\n        }\\n\\n        if (params.tokenIn == xDAI || params.tokenIn == wxDAI) {\\n            // (w)xDAI->OUTCOME_TOKEN\\n\\n            // 1) deposit (w)xDAI\\n            uint256 shares;\\n            if (msg.value == 0) {\\n                IERC20(wxDAI).approve(\\n                    address(savingsXDaiAdapter),\\n                    params.amountInMaximum\\n                );\\n                shares = savingsXDaiAdapter.deposit(\\n                    params.amountInMaximum,\\n                    address(this)\\n                );\\n            } else {\\n                shares = savingsXDaiAdapter.depositXDAI{value: msg.value}(\\n                    address(this)\\n                );\\n            }\\n\\n            // 2) swap sDAI<>OUTCOME_TOKEN\\n            uint256 _amountInMaximum = params.amountInMaximum;\\n            params.tokenIn = address(sDAI);\\n            params.amountInMaximum = shares;\\n\\n            sDAI.approve(address(swaprRouter), params.amountInMaximum);\\n            amountIn = swaprRouter.exactOutputSingle(params);\\n\\n            uint256 tokenInSurplus = 0;\\n            if (amountIn < shares) {\\n                // refund excess (w)xDAI\\n                sDAI.approve(address(savingsXDaiAdapter), shares - amountIn);\\n\\n                tokenInSurplus = msg.value > 0\\n                    ? savingsXDaiAdapter.redeemXDAI(\\n                        shares - amountIn,\\n                        params.recipient\\n                    )\\n                    : savingsXDaiAdapter.redeem(\\n                        shares - amountIn,\\n                        params.recipient\\n                    );\\n            }\\n\\n            return _amountInMaximum - tokenInSurplus;\\n        }\\n\\n        if (params.tokenOut == xDAI || params.tokenOut == wxDAI) {\\n            // OUTCOME_TOKEN->(w)xDAI\\n            address _recipient = params.recipient;\\n            params.recipient = address(this);\\n\\n            // 1) swap to sDAI\\n            address _tokenOut = params.tokenOut;\\n            params.tokenOut = address(sDAI);\\n            params.amountOut = sDAI.previewDeposit(params.amountOut);\\n\\n            amountIn = swaprRouter.exactOutputSingle(params);\\n\\n            // 2) redeem sDAI to (w)xDAI\\n            sDAI.approve(address(savingsXDaiAdapter), params.amountOut);\\n\\n            _tokenOut == xDAI\\n                ? savingsXDaiAdapter.redeemXDAI(params.amountOut, _recipient)\\n                : savingsXDaiAdapter.redeem(params.amountOut, _recipient);\\n\\n            // transfer back unused tokenIn tokens\\n            if (params.amountInMaximum > amountIn) {\\n                IERC20(params.tokenIn).transfer(\\n                    msg.sender,\\n                    params.amountInMaximum - amountIn\\n                );\\n            }\\n\\n            return amountIn;\\n        }\\n\\n        // OUTCOME_TOKEN<>sDAI\\n        amountIn = swaprRouter.exactOutputSingle(params);\\n\\n        // transfer back unused tokenIn tokens\\n        if (params.amountInMaximum > amountIn) {\\n            IERC20(params.tokenIn).transfer(\\n                msg.sender,\\n                params.amountInMaximum - amountIn\\n            );\\n        }\\n\\n        return amountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x3cf606104bfaa76907e72e163742ac1a1ea7c52593c85674e0767140d89df579\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c5a806100206000396000f3fe6080604052600436106100915760003560e01c8063abf7e27311610059578063abf7e27314610170578063bc65118814610192578063db3e2198146101b3578063de8b6149146101c6578063e2087ece146101e857600080fd5b806311ef62ac146100965780632d9ebd1d146100ce5780634ad742991461010657806393cc5042146101285780639e73c81d14610150575b600080fd5b3480156100a257600080fd5b506100b8600080516020611be583398151915281565b6040516100c5919061179d565b60405180910390f35b3480156100da57600080fd5b506100ee6100e93660046117d4565b61020a565b6040805192835261ffff9091166020830152016100c5565b34801561011257600080fd5b506100b8600080516020611ba583398151915281565b34801561013457600080fd5b506100b873cbad9fdf0d2814659eb26f600efdeaf005eda0f781565b34801561015c57600080fd5b506100ee61016b3660046117d4565b610524565b34801561017c57600080fd5b506100b8600080516020611bc583398151915281565b6101a56101a0366004611827565b610686565b6040519081526020016100c5565b6101a56101c13660046118ed565b610d67565b3480156101d257600080fd5b506100b8600080516020611c0583398151915281565b3480156101f457600080fd5b506100b8600080516020611b8583398151915281565b6000806001600160a01b038616600080516020611be5833981519152148061024857506001600160a01b038616600080516020611b85833981519152145b156103475760405163ef8b30f760e01b81526004810185905273cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d90600080516020611c05833981519152908890829063ef8b30f7906024015b602060405180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc91906119b0565b876040518563ffffffff1660e01b81526004016102fc94939291906119c9565b60408051808303816000875af115801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e91906119f4565b9150915061051b565b6001600160a01b038516600080516020611be5833981519152148061038257506001600160a01b038516600080516020611b85833981519152145b1561049757604051632d9ebd1d60e01b8152600090819073cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d906103d7908b90600080516020611c05833981519152908b908b906004016119c9565b60408051808303816000875af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041991906119f4565b60405163266d6a8360e11b8152600481018390529193509150600080516020611c0583398151915290634cdad50690602401602060405180830381865afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906119b0565b9350915061051b9050565b604051632d9ebd1d60e01b815273cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d906104d49089908990899089906004016119c9565b60408051808303816000875af11580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051691906119f4565b915091505b94509492505050565b6000806001600160a01b038616600080516020611be5833981519152148061056257506001600160a01b038616600080516020611b85833981519152145b156105b757604051639e73c81d60e01b8152600090819073cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d906103d790600080516020611c05833981519152908b908b908b906004016119c9565b6001600160a01b038516600080516020611be583398151915214806105f257506001600160a01b038516600080516020611b85833981519152145b156106495760405163ef8b30f760e01b81526004810185905273cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d908890600080516020611c0583398151915290819063ef8b30f79060240161029b565b604051639e73c81d60e01b815273cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d906104d49089908990899089906004016119c9565b60003460000361079257815160808301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd916106c69133913091600401611a2b565b6020604051808303816000875af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611a4f565b508151608083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b39161074d91600080516020611ba58339815191529190600401611a71565b6020604051808303816000875af115801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611a4f565b505b81516001600160a01b0316600080516020611be583398151915214806107cf575081516001600160a01b0316600080516020611b85833981519152145b15610a69576000346000036108e757608083015160405163095ea7b360e01b8152600080516020611b858339815191529163095ea7b39161082291600080516020611bc583398151915291600401611a71565b6020604051808303816000875af1158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611a4f565b506080830151604051636e553f6560e01b8152600080516020611bc583398151915291636e553f659161089d91903090600401611a8a565b6020604051808303816000875af11580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906119b0565b9050610960565b60405163f716a92b60e01b8152600080516020611bc58339815191529063f716a92b90349061091a90309060040161179d565b60206040518083038185885af1158015610938573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061095d91906119b0565b90505b600080516020611c058339815191528084526080840182905260405163095ea7b360e01b815263095ea7b3906109aa90600080516020611ba5833981519152908590600401611a71565b6020604051808303816000875af11580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611a4f565b5060405163178ca23160e31b8152600080516020611ba58339815191529063bc65118890610a1f908690600401611aa1565b6020604051808303816000875af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6291906119b0565b9392505050565b60208201516001600160a01b0316600080516020611be58339815191521480610aac575060208201516001600160a01b0316600080516020611b85833981519152145b15610ced576040808301805130909152602084018051600080516020611c05833981519152909152915163178ca23160e31b8152909190600090600080516020611ba58339815191529063bc65118890610b0a908890600401611aa1565b6020604051808303816000875af1158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d91906119b0565b60405163095ea7b360e01b8152909150600080516020611c058339815191529063095ea7b390610b9190600080516020611bc5833981519152908590600401611a71565b6020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611a4f565b506001600160a01b038216600080516020611be583398151915214610c6e57604051633def417960e11b8152600080516020611bc583398151915290637bde82f290610c269084908790600401611a8a565b6020604051808303816000875af1158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906119b0565b610ce4565b60405163d1ff824160e01b8152600080516020611bc58339815191529063d1ff824190610ca19084908790600401611a8a565b6020604051808303816000875af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce491906119b0565b95945050505050565b60405163178ca23160e31b8152600080516020611ba58339815191529063bc65118890610d1e908590600401611aa1565b6020604051808303816000875af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906119b0565b92915050565b600034600003610e7357815160c08301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd91610da79133913091600401611a2b565b6020604051808303816000875af1158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190611a4f565b50815160c083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b391610e2e91600080516020611ba58339815191529190600401611a71565b6020604051808303816000875af1158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190611a4f565b505b81516001600160a01b0316600080516020611be58339815191521480610eb0575081516001600160a01b0316600080516020611b85833981519152145b1561130357600034600003610fc85760c083015160405163095ea7b360e01b8152600080516020611b858339815191529163095ea7b391610f0391600080516020611bc583398151915291600401611a71565b6020604051808303816000875af1158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f469190611a4f565b5060c0830151604051636e553f6560e01b8152600080516020611bc583398151915291636e553f6591610f7e91903090600401611a8a565b6020604051808303816000875af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc191906119b0565b9050611041565b60405163f716a92b60e01b8152600080516020611bc58339815191529063f716a92b903490610ffb90309060040161179d565b60206040518083038185885af1158015611019573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061103e91906119b0565b90505b60c083018051600080516020611c058339815191528086529183905260405163095ea7b360e01b815290919063095ea7b39061109190600080516020611ba5833981519152908690600401611a71565b6020604051808303816000875af11580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d49190611a4f565b50604051631b67c43360e31b8152600080516020611ba58339815191529063db3e219890611106908790600401611afa565b6020604051808303816000875af1158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114991906119b0565b92506000828410156112f957600080516020611c0583398151915263095ea7b3600080516020611bc58339815191526111828787611b63565b6040518363ffffffff1660e01b815260040161119f929190611a71565b6020604051808303816000875af11580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190611a4f565b506000341161127357600080516020611bc5833981519152637bde82f26112098686611b63565b87606001516040518363ffffffff1660e01b815260040161122b929190611a8a565b6020604051808303816000875af115801561124a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126e91906119b0565b6112f6565b600080516020611bc583398151915263d1ff82416112918686611b63565b87606001516040518363ffffffff1660e01b81526004016112b3929190611a8a565b6020604051808303816000875af11580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f691906119b0565b90505b610ce48183611b63565b60208201516001600160a01b0316600080516020611be58339815191521480611346575060208201516001600160a01b0316600080516020611b85833981519152145b156116905760608201805130909152602083018051600080516020611c058339815191529182905260a085015160405163ef8b30f760e01b815291929163ef8b30f7916113999160040190815260200190565b602060405180830381865afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da91906119b0565b60a0850152604051631b67c43360e31b8152600080516020611ba58339815191529063db3e219890611410908790600401611afa565b6020604051808303816000875af115801561142f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145391906119b0565b60a085015160405163095ea7b360e01b8152919450600080516020611c058339815191529163095ea7b39161149b91600080516020611bc58339815191529190600401611a71565b6020604051808303816000875af11580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190611a4f565b506001600160a01b038116600080516020611be58339815191521461157c5760a0840151604051633def417960e11b8152600080516020611bc583398151915291637bde82f29161153491908690600401611a8a565b6020604051808303816000875af1158015611553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157791906119b0565b6115f6565b60a084015160405163d1ff824160e01b8152600080516020611bc58339815191529163d1ff8241916115b391908690600401611a8a565b6020604051808303816000875af11580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f691906119b0565b50828460c0015111156116895783600001516001600160a01b031663a9059cbb33858760c001516116279190611b63565b6040518363ffffffff1660e01b8152600401611644929190611a71565b6020604051808303816000875af1158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611a4f565b505b5050919050565b604051631b67c43360e31b8152600080516020611ba58339815191529063db3e2198906116c1908590600401611afa565b6020604051808303816000875af11580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906119b0565b9050808260c0015111156117985781600001516001600160a01b031663a9059cbb33838560c001516117369190611b63565b6040518363ffffffff1660e01b8152600401611753929190611a71565b6020604051808303816000875af1158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190611a4f565b505b919050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146117c657600080fd5b50565b8035611798816117b1565b600080600080608085870312156117ea57600080fd5b84356117f5816117b1565b93506020850135611805816117b1565b925060408501359150606085013561181c816117b1565b939692955090935050565b600060e0828403121561183957600080fd5b60405160e0810181811067ffffffffffffffff8211171561186a57634e487b7160e01b600052604160045260246000fd5b6040528235611878816117b1565b81526020830135611888816117b1565b6020820152604083013561189b816117b1565b80604083015250606083013560608201526080830135608082015260a083013560a082015260c08301356118ce816117b1565b60c08201529392505050565b803562ffffff8116811461179857600080fd5b600061010080838503121561190157600080fd5b6040519081019067ffffffffffffffff8211818310171561193257634e487b7160e01b600052604160045260246000fd5b8160405283359150611943826117b1565b818152611952602085016117c9565b6020820152611963604085016118da565b6040820152611974606085016117c9565b60608201526080840135608082015260a084013560a082015260c084013560c08201526119a360e085016117c9565b60e0820152949350505050565b6000602082840312156119c257600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b60008060408385031215611a0757600080fd5b82519150602083015161ffff81168114611a2057600080fd5b809150509250929050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611a6157600080fd5b81518015158114610a6257600080fd5b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b81810381811115610d6157634e487b7160e01b600052601160045260246000fdfe000000000000000000000000e91d153e0b41518a2ce8dd3d7944fa863463a97d000000000000000000000000ffb643e73f280b97809a8b41f7232ab401a04ee1000000000000000000000000d499b51fcfc66bd31248ef4b28d656d67e591a94000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000af204776c7245bf4147c2612bf6e5972ee483701a26469706673582212208e1fd5e99238fc2a55a1d8ec1568f72967f929d310890e1fea99b147b4e2bdd564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063abf7e27311610059578063abf7e27314610170578063bc65118814610192578063db3e2198146101b3578063de8b6149146101c6578063e2087ece146101e857600080fd5b806311ef62ac146100965780632d9ebd1d146100ce5780634ad742991461010657806393cc5042146101285780639e73c81d14610150575b600080fd5b3480156100a257600080fd5b506100b8600080516020611be583398151915281565b6040516100c5919061179d565b60405180910390f35b3480156100da57600080fd5b506100ee6100e93660046117d4565b61020a565b6040805192835261ffff9091166020830152016100c5565b34801561011257600080fd5b506100b8600080516020611ba583398151915281565b34801561013457600080fd5b506100b873cbad9fdf0d2814659eb26f600efdeaf005eda0f781565b34801561015c57600080fd5b506100ee61016b3660046117d4565b610524565b34801561017c57600080fd5b506100b8600080516020611bc583398151915281565b6101a56101a0366004611827565b610686565b6040519081526020016100c5565b6101a56101c13660046118ed565b610d67565b3480156101d257600080fd5b506100b8600080516020611c0583398151915281565b3480156101f457600080fd5b506100b8600080516020611b8583398151915281565b6000806001600160a01b038616600080516020611be5833981519152148061024857506001600160a01b038616600080516020611b85833981519152145b156103475760405163ef8b30f760e01b81526004810185905273cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d90600080516020611c05833981519152908890829063ef8b30f7906024015b602060405180830381865afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc91906119b0565b876040518563ffffffff1660e01b81526004016102fc94939291906119c9565b60408051808303816000875af115801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e91906119f4565b9150915061051b565b6001600160a01b038516600080516020611be5833981519152148061038257506001600160a01b038516600080516020611b85833981519152145b1561049757604051632d9ebd1d60e01b8152600090819073cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d906103d7908b90600080516020611c05833981519152908b908b906004016119c9565b60408051808303816000875af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041991906119f4565b60405163266d6a8360e11b8152600481018390529193509150600080516020611c0583398151915290634cdad50690602401602060405180830381865afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906119b0565b9350915061051b9050565b604051632d9ebd1d60e01b815273cbad9fdf0d2814659eb26f600efdeaf005eda0f790632d9ebd1d906104d49089908990899089906004016119c9565b60408051808303816000875af11580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051691906119f4565b915091505b94509492505050565b6000806001600160a01b038616600080516020611be5833981519152148061056257506001600160a01b038616600080516020611b85833981519152145b156105b757604051639e73c81d60e01b8152600090819073cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d906103d790600080516020611c05833981519152908b908b908b906004016119c9565b6001600160a01b038516600080516020611be583398151915214806105f257506001600160a01b038516600080516020611b85833981519152145b156106495760405163ef8b30f760e01b81526004810185905273cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d908890600080516020611c0583398151915290819063ef8b30f79060240161029b565b604051639e73c81d60e01b815273cbad9fdf0d2814659eb26f600efdeaf005eda0f790639e73c81d906104d49089908990899089906004016119c9565b60003460000361079257815160808301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd916106c69133913091600401611a2b565b6020604051808303816000875af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611a4f565b508151608083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b39161074d91600080516020611ba58339815191529190600401611a71565b6020604051808303816000875af115801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611a4f565b505b81516001600160a01b0316600080516020611be583398151915214806107cf575081516001600160a01b0316600080516020611b85833981519152145b15610a69576000346000036108e757608083015160405163095ea7b360e01b8152600080516020611b858339815191529163095ea7b39161082291600080516020611bc583398151915291600401611a71565b6020604051808303816000875af1158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611a4f565b506080830151604051636e553f6560e01b8152600080516020611bc583398151915291636e553f659161089d91903090600401611a8a565b6020604051808303816000875af11580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906119b0565b9050610960565b60405163f716a92b60e01b8152600080516020611bc58339815191529063f716a92b90349061091a90309060040161179d565b60206040518083038185885af1158015610938573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061095d91906119b0565b90505b600080516020611c058339815191528084526080840182905260405163095ea7b360e01b815263095ea7b3906109aa90600080516020611ba5833981519152908590600401611a71565b6020604051808303816000875af11580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190611a4f565b5060405163178ca23160e31b8152600080516020611ba58339815191529063bc65118890610a1f908690600401611aa1565b6020604051808303816000875af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6291906119b0565b9392505050565b60208201516001600160a01b0316600080516020611be58339815191521480610aac575060208201516001600160a01b0316600080516020611b85833981519152145b15610ced576040808301805130909152602084018051600080516020611c05833981519152909152915163178ca23160e31b8152909190600090600080516020611ba58339815191529063bc65118890610b0a908890600401611aa1565b6020604051808303816000875af1158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d91906119b0565b60405163095ea7b360e01b8152909150600080516020611c058339815191529063095ea7b390610b9190600080516020611bc5833981519152908590600401611a71565b6020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611a4f565b506001600160a01b038216600080516020611be583398151915214610c6e57604051633def417960e11b8152600080516020611bc583398151915290637bde82f290610c269084908790600401611a8a565b6020604051808303816000875af1158015610c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6991906119b0565b610ce4565b60405163d1ff824160e01b8152600080516020611bc58339815191529063d1ff824190610ca19084908790600401611a8a565b6020604051808303816000875af1158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce491906119b0565b95945050505050565b60405163178ca23160e31b8152600080516020611ba58339815191529063bc65118890610d1e908590600401611aa1565b6020604051808303816000875af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906119b0565b92915050565b600034600003610e7357815160c08301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd91610da79133913091600401611a2b565b6020604051808303816000875af1158015610dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dea9190611a4f565b50815160c083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b391610e2e91600080516020611ba58339815191529190600401611a71565b6020604051808303816000875af1158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190611a4f565b505b81516001600160a01b0316600080516020611be58339815191521480610eb0575081516001600160a01b0316600080516020611b85833981519152145b1561130357600034600003610fc85760c083015160405163095ea7b360e01b8152600080516020611b858339815191529163095ea7b391610f0391600080516020611bc583398151915291600401611a71565b6020604051808303816000875af1158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f469190611a4f565b5060c0830151604051636e553f6560e01b8152600080516020611bc583398151915291636e553f6591610f7e91903090600401611a8a565b6020604051808303816000875af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc191906119b0565b9050611041565b60405163f716a92b60e01b8152600080516020611bc58339815191529063f716a92b903490610ffb90309060040161179d565b60206040518083038185885af1158015611019573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061103e91906119b0565b90505b60c083018051600080516020611c058339815191528086529183905260405163095ea7b360e01b815290919063095ea7b39061109190600080516020611ba5833981519152908690600401611a71565b6020604051808303816000875af11580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d49190611a4f565b50604051631b67c43360e31b8152600080516020611ba58339815191529063db3e219890611106908790600401611afa565b6020604051808303816000875af1158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114991906119b0565b92506000828410156112f957600080516020611c0583398151915263095ea7b3600080516020611bc58339815191526111828787611b63565b6040518363ffffffff1660e01b815260040161119f929190611a71565b6020604051808303816000875af11580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190611a4f565b506000341161127357600080516020611bc5833981519152637bde82f26112098686611b63565b87606001516040518363ffffffff1660e01b815260040161122b929190611a8a565b6020604051808303816000875af115801561124a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126e91906119b0565b6112f6565b600080516020611bc583398151915263d1ff82416112918686611b63565b87606001516040518363ffffffff1660e01b81526004016112b3929190611a8a565b6020604051808303816000875af11580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f691906119b0565b90505b610ce48183611b63565b60208201516001600160a01b0316600080516020611be58339815191521480611346575060208201516001600160a01b0316600080516020611b85833981519152145b156116905760608201805130909152602083018051600080516020611c058339815191529182905260a085015160405163ef8b30f760e01b815291929163ef8b30f7916113999160040190815260200190565b602060405180830381865afa1580156113b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113da91906119b0565b60a0850152604051631b67c43360e31b8152600080516020611ba58339815191529063db3e219890611410908790600401611afa565b6020604051808303816000875af115801561142f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145391906119b0565b60a085015160405163095ea7b360e01b8152919450600080516020611c058339815191529163095ea7b39161149b91600080516020611bc58339815191529190600401611a71565b6020604051808303816000875af11580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de9190611a4f565b506001600160a01b038116600080516020611be58339815191521461157c5760a0840151604051633def417960e11b8152600080516020611bc583398151915291637bde82f29161153491908690600401611a8a565b6020604051808303816000875af1158015611553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157791906119b0565b6115f6565b60a084015160405163d1ff824160e01b8152600080516020611bc58339815191529163d1ff8241916115b391908690600401611a8a565b6020604051808303816000875af11580156115d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f691906119b0565b50828460c0015111156116895783600001516001600160a01b031663a9059cbb33858760c001516116279190611b63565b6040518363ffffffff1660e01b8152600401611644929190611a71565b6020604051808303816000875af1158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611a4f565b505b5050919050565b604051631b67c43360e31b8152600080516020611ba58339815191529063db3e2198906116c1908590600401611afa565b6020604051808303816000875af11580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906119b0565b9050808260c0015111156117985781600001516001600160a01b031663a9059cbb33838560c001516117369190611b63565b6040518363ffffffff1660e01b8152600401611753929190611a71565b6020604051808303816000875af1158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190611a4f565b505b919050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146117c657600080fd5b50565b8035611798816117b1565b600080600080608085870312156117ea57600080fd5b84356117f5816117b1565b93506020850135611805816117b1565b925060408501359150606085013561181c816117b1565b939692955090935050565b600060e0828403121561183957600080fd5b60405160e0810181811067ffffffffffffffff8211171561186a57634e487b7160e01b600052604160045260246000fd5b6040528235611878816117b1565b81526020830135611888816117b1565b6020820152604083013561189b816117b1565b80604083015250606083013560608201526080830135608082015260a083013560a082015260c08301356118ce816117b1565b60c08201529392505050565b803562ffffff8116811461179857600080fd5b600061010080838503121561190157600080fd5b6040519081019067ffffffffffffffff8211818310171561193257634e487b7160e01b600052604160045260246000fd5b8160405283359150611943826117b1565b818152611952602085016117c9565b6020820152611963604085016118da565b6040820152611974606085016117c9565b60608201526080840135608082015260a084013560a082015260c084013560c08201526119a360e085016117c9565b60e0820152949350505050565b6000602082840312156119c257600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b60008060408385031215611a0757600080fd5b82519150602083015161ffff81168114611a2057600080fd5b809150509250929050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611a6157600080fd5b81518015158114610a6257600080fd5b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b81810381811115610d6157634e487b7160e01b600052601160045260246000fdfe000000000000000000000000e91d153e0b41518a2ce8dd3d7944fa863463a97d000000000000000000000000ffb643e73f280b97809a8b41f7232ab401a04ee1000000000000000000000000d499b51fcfc66bd31248ef4b28d656d67e591a94000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000af204776c7245bf4147c2612bf6e5972ee483701a26469706673582212208e1fd5e99238fc2a55a1d8ec1568f72967f929d310890e1fea99b147b4e2bdd564736f6c63430008140033",
  "devdoc": {
    "details": "Swap Router specialized in swapping outcome tokens with sDAI, xDAI and wxDAI. It expects an OUTCOME_TOKEN<>sDAI pool to exist. 1) When swapping OUTCOME_TOKEN->(w)xDAI, instead of using the route OUTCOME_TOKEN->sDAI->(w)xDAI it does a single swap OUTCOME_TOKEN->sDAI and then redeems the sDAI to (w)xDAI. 2) When swapping (w)xDAI->OUTCOME_TOKEN, instead of using the route (w)xDAI->sDAI->OUTCOME_TOKEN it deposits the (w)xDAI and then does a single swap sDAI->OUTCOME_TOKEN. This way we get a better price than using the sDAI<>wxDAI pool.",
    "kind": "dev",
    "methods": {
      "exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
        },
        "returns": {
          "_0": "The amount of the received token"
        }
      },
      "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "params": {
          "params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
        },
        "returns": {
          "amountIn": "The amount of the input token"
        }
      },
      "quoteExactInputSingle(address,address,uint256,uint160)": {
        "params": {
          "amountIn": "The desired input amount",
          "limitSqrtPrice": "The price limit of the pool that cannot be exceeded by the swap",
          "tokenIn": "The token being swapped in",
          "tokenOut": "The token being swapped out"
        },
        "returns": {
          "amountOut": "The amount of `tokenOut` that would be received"
        }
      },
      "quoteExactOutputSingle(address,address,uint256,uint160)": {
        "params": {
          "amountOut": "The desired output amount",
          "limitSqrtPrice": "The price limit of the pool that cannot be exceeded by the swap",
          "tokenIn": "The token being swapped in",
          "tokenOut": "The token being swapped out"
        },
        "returns": {
          "amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exactInputSingle((address,address,address,uint256,uint256,uint256,uint160))": {
        "notice": "Swaps `amountIn` of one token for as much as possible of another token"
      },
      "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
        "notice": "Swaps as little as possible of one token for `amountOut` of another token"
      },
      "quoteExactInputSingle(address,address,uint256,uint160)": {
        "notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
      },
      "quoteExactOutputSingle(address,address,uint256,uint160)": {
        "notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}