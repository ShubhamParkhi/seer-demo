{
  "address": "0x03d03464BF9Eb20059Ca6eF6391E9C5d79d5E012",
  "abi": [
    {
      "inputs": [],
      "name": "conditionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encodedQuestions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuestionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_upperBound",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_questionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_questionsIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_encodedQuestions",
          "type": "string[]"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowerBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOutcomes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outcomes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c61a4d7bdf28c53c70c4826966140a51f6c99dc818fe3e36ddd9220f9bff135",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x03d03464BF9Eb20059Ca6eF6391E9C5d79d5E012",
    "transactionIndex": 0,
    "gasUsed": "626906",
    "logsBloom": "0x
    "blockHash": "0x51d920271f66e1c53dd3087f2996a3f33090a50598187f628d45646826c43bcf",
    "transactionHash": "0x9c61a4d7bdf28c53c70c4826966140a51f6c99dc818fe3e36ddd9220f9bff135",
    "logs": [],
    "blockNumber": 32719072,
    "cumulativeGasUsed": "626906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"conditionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encodedQuestions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuestionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_questionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOutcomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outcomes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a60806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c80638767d64e116100875780638767d64e146101795780639574427414610181578063a384d6ff14610194578063b06a5c521461019d578063b09ad8a0146101a6578063c2e112d2146101af578063e6bfd26a146101b7578063eed2a147146101bf57600080fd5b806312e24aa4146100da578063158ef93e146100ef5780632810e1d614610111578063292503ba146101195780632ddc7de7146101395780632ff8d504146101505780637aa77f2914610170575b600080fd5b6100ed6100e8366004610776565b6101d2565b005b6000546100fc9060ff1681565b60405190151581526020015b60405180910390f35b6100ed6102ba565b61012c610127366004610866565b61039e565b604051610108919061087f565b61014260055481565b604051908152602001610108565b600a54610163906001600160a01b031681565b60405161010891906108cd565b61014260085481565b600254610142565b61014261018f366004610866565b61044a565b61014260035481565b61014260065481565b61014260045481565b600754610142565b61012c61046b565b61012c6101cd366004610866565b610478565b60005460ff16156102205760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b600161022c8b8261096a565b5088516102409060029060208c0190610488565b50600388905560048790556005869055600685905583516102689060079060208701906104de565b5060088390558151610281906009906020850190610488565b50600a80546001600160a01b0319166001600160a01b039290921691909117905550506000805460ff1916600117905550505050505050565b6007546001101561032957600a5460405163da4c3b7360e01b81526001600160a01b039091169063da4c3b73906102f59030906004016108cd565b600060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b50505050565b6003541580156103395750600454155b1561036e57600a5460405163bf7f6e5b60e01b81526001600160a01b039091169063bf7f6e5b906102f59030906004016108cd565b600a546040516334b0cee160e01b81526001600160a01b03909116906334b0cee1906102f59030906004016108cd565b600981815481106103ae57600080fd5b9060005260206000200160009150905080546103c9906108e1565b80601f01602080910402602001604051908101604052809291908181526020018280546103f5906108e1565b80156104425780601f1061041757610100808354040283529160200191610442565b820191906000526020600020905b81548152906001019060200180831161042557829003601f168201915b505050505081565b6007818154811061045a57600080fd5b600091825260209091200154905081565b600180546103c9906108e1565b600281815481106103ae57600080fd5b8280548282559060005260206000209081019282156104ce579160200282015b828111156104ce57825182906104be908261096a565b50916020019190600101906104a8565b506104da929150610525565b5090565b828054828255906000526020600020908101928215610519579160200282015b828111156105195782518255916020019190600101906104fe565b506104da929150610542565b808211156104da5760006105398282610557565b50600101610525565b5b808211156104da5760008155600101610543565b508054610563906108e1565b6000825580601f10610573575050565b601f0160209004906000526020600020908101906105919190610542565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105d3576105d3610594565b604052919050565b600082601f8301126105ec57600080fd5b813567ffffffffffffffff81111561060657610606610594565b610619601f8201601f19166020016105aa565b81815284602083860101111561062e57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561066557610665610594565b5060051b60200190565b600082601f83011261068057600080fd5b813560206106956106908361064b565b6105aa565b82815260059290921b840181019181810190868411156106b457600080fd5b8286015b848110156106f457803567ffffffffffffffff8111156106d85760008081fd5b6106e68986838b01016105db565b8452509183019183016106b8565b509695505050505050565b600082601f83011261071057600080fd5b813560206107206106908361064b565b82815260059290921b8401810191818101908684111561073f57600080fd5b8286015b848110156106f45780358352918301918301610743565b80356001600160a01b038116811461077157600080fd5b919050565b6000806000806000806000806000806101408b8d03121561079657600080fd5b8a3567ffffffffffffffff808211156107ae57600080fd5b6107ba8e838f016105db565b9b5060208d01359150808211156107d057600080fd5b6107dc8e838f0161066f565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d013591508082111561080e57600080fd5b61081a8e838f016106ff565b955060e08d013594506101008d013591508082111561083857600080fd5b506108458d828e0161066f565b9250506108556101208c0161075a565b90509295989b9194979a5092959850565b60006020828403121561087857600080fd5b5035919050565b600060208083528351808285015260005b818110156108ac57858101830151858201604001528201610890565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b600181811c908216806108f557607f821691505b60208210810361091557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561096557600081815260208120601f850160051c810160208610156109425750805b601f850160051c820191505b818110156109615782815560010161094e565b5050505b505050565b815167ffffffffffffffff81111561098457610984610594565b6109988161099284546108e1565b8461091b565b602080601f8311600181146109cd57600084156109b55750858301515b600019600386901b1c1916600185901b178555610961565b600085815260208120601f198616915b828110156109fc578886015182559484019460019091019084016109dd565b5085821015610a1a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a30ed63a88cd266e45aa1e2b74f242163e1db229c1eab0b76e231d772703524c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c80638767d64e116100875780638767d64e146101795780639574427414610181578063a384d6ff14610194578063b06a5c521461019d578063b09ad8a0146101a6578063c2e112d2146101af578063e6bfd26a146101b7578063eed2a147146101bf57600080fd5b806312e24aa4146100da578063158ef93e146100ef5780632810e1d614610111578063292503ba146101195780632ddc7de7146101395780632ff8d504146101505780637aa77f2914610170575b600080fd5b6100ed6100e8366004610776565b6101d2565b005b6000546100fc9060ff1681565b60405190151581526020015b60405180910390f35b6100ed6102ba565b61012c610127366004610866565b61039e565b604051610108919061087f565b61014260055481565b604051908152602001610108565b600a54610163906001600160a01b031681565b60405161010891906108cd565b61014260085481565b600254610142565b61014261018f366004610866565b61044a565b61014260035481565b61014260065481565b61014260045481565b600754610142565b61012c61046b565b61012c6101cd366004610866565b610478565b60005460ff16156102205760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b600161022c8b8261096a565b5088516102409060029060208c0190610488565b50600388905560048790556005869055600685905583516102689060079060208701906104de565b5060088390558151610281906009906020850190610488565b50600a80546001600160a01b0319166001600160a01b039290921691909117905550506000805460ff1916600117905550505050505050565b6007546001101561032957600a5460405163da4c3b7360e01b81526001600160a01b039091169063da4c3b73906102f59030906004016108cd565b600060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b50505050565b6003541580156103395750600454155b1561036e57600a5460405163bf7f6e5b60e01b81526001600160a01b039091169063bf7f6e5b906102f59030906004016108cd565b600a546040516334b0cee160e01b81526001600160a01b03909116906334b0cee1906102f59030906004016108cd565b600981815481106103ae57600080fd5b9060005260206000200160009150905080546103c9906108e1565b80601f01602080910402602001604051908101604052809291908181526020018280546103f5906108e1565b80156104425780601f1061041757610100808354040283529160200191610442565b820191906000526020600020905b81548152906001019060200180831161042557829003601f168201915b505050505081565b6007818154811061045a57600080fd5b600091825260209091200154905081565b600180546103c9906108e1565b600281815481106103ae57600080fd5b8280548282559060005260206000209081019282156104ce579160200282015b828111156104ce57825182906104be908261096a565b50916020019190600101906104a8565b506104da929150610525565b5090565b828054828255906000526020600020908101928215610519579160200282015b828111156105195782518255916020019190600101906104fe565b506104da929150610542565b808211156104da5760006105398282610557565b50600101610525565b5b808211156104da5760008155600101610543565b508054610563906108e1565b6000825580601f10610573575050565b601f0160209004906000526020600020908101906105919190610542565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105d3576105d3610594565b604052919050565b600082601f8301126105ec57600080fd5b813567ffffffffffffffff81111561060657610606610594565b610619601f8201601f19166020016105aa565b81815284602083860101111561062e57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff82111561066557610665610594565b5060051b60200190565b600082601f83011261068057600080fd5b813560206106956106908361064b565b6105aa565b82815260059290921b840181019181810190868411156106b457600080fd5b8286015b848110156106f457803567ffffffffffffffff8111156106d85760008081fd5b6106e68986838b01016105db565b8452509183019183016106b8565b509695505050505050565b600082601f83011261071057600080fd5b813560206107206106908361064b565b82815260059290921b8401810191818101908684111561073f57600080fd5b8286015b848110156106f45780358352918301918301610743565b80356001600160a01b038116811461077157600080fd5b919050565b6000806000806000806000806000806101408b8d03121561079657600080fd5b8a3567ffffffffffffffff808211156107ae57600080fd5b6107ba8e838f016105db565b9b5060208d01359150808211156107d057600080fd5b6107dc8e838f0161066f565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d013591508082111561080e57600080fd5b61081a8e838f016106ff565b955060e08d013594506101008d013591508082111561083857600080fd5b506108458d828e0161066f565b9250506108556101208c0161075a565b90509295989b9194979a5092959850565b60006020828403121561087857600080fd5b5035919050565b600060208083528351808285015260005b818110156108ac57858101830151858201604001528201610890565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0391909116815260200190565b600181811c908216806108f557607f821691505b60208210810361091557634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561096557600081815260208120601f850160051c810160208610156109425750805b601f850160051c820191505b818110156109615782815560010161094e565b5050505b505050565b815167ffffffffffffffff81111561098457610984610594565b6109988161099284546108e1565b8461091b565b602080601f8311600181146109cd57600084156109b55750858301515b600019600386901b1c1916600185901b178555610961565b600085815260208120601f198616915b828110156109fc578886015182559484019460019091019084016109dd565b5085821015610a1a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a30ed63a88cd266e45aa1e2b74f242163e1db229c1eab0b76e231d772703524c64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2280,
        "contract": "src/Market.sol:Market",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2282,
        "contract": "src/Market.sol:Market",
        "label": "marketName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2285,
        "contract": "src/Market.sol:Market",
        "label": "outcomes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2287,
        "contract": "src/Market.sol:Market",
        "label": "lowerBound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2289,
        "contract": "src/Market.sol:Market",
        "label": "upperBound",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2291,
        "contract": "src/Market.sol:Market",
        "label": "conditionId",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2293,
        "contract": "src/Market.sol:Market",
        "label": "questionId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 2296,
        "contract": "src/Market.sol:Market",
        "label": "questionsIds",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2298,
        "contract": "src/Market.sol:Market",
        "label": "templateId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2301,
        "contract": "src/Market.sol:Market",
        "label": "encodedQuestions",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2304,
        "contract": "src/Market.sol:Market",
        "label": "realityProxy",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(RealityProxy)3938"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3938": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}