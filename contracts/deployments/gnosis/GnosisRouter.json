{
  "address": "0x204a20a508925601de0E0eE6B1114176052f8Be7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "isPayoutReported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergeToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemToBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sDAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savingsXDaiAdapter",
      "outputs": [
        {
          "internalType": "contract SavingsXDaiAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        }
      ],
      "name": "splitFromBase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb69c48113670fc1affe9179b0960a64f3eff44b3039fb451526b1ce6c9beb1e0",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x204a20a508925601de0E0eE6B1114176052f8Be7",
    "transactionIndex": 1,
    "gasUsed": "1805252",
    "logsBloom": "0x
    "blockHash": "0x4725d0b61bfc1f2ca4ad14432a633f6441b911b5fe792746858f4aea8b433a67",
    "transactionHash": "0xb69c48113670fc1affe9179b0960a64f3eff44b3039fb451526b1ce6c9beb1e0",
    "logs": [],
    "blockNumber": 32719082,
    "cumulativeGasUsed": "15582906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xFb4c45a988F70D0f8eFb5Ab3A7feB00D463c16B7"
  ],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"isPayoutReported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemToBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savingsXDaiAdapter\",\"outputs\":[{\"internalType\":\"contract SavingsXDaiAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"}],\"name\":\"splitFromBase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mergeToBase(bytes32,bytes32,uint256[],uint256)\":{\"notice\":\"Merges the position and sends xDAI to the user.\"},\"splitFromBase(bytes32,bytes32,uint256[])\":{\"notice\":\"Splits a position using xDAI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GnosisRouter.sol\":\"GnosisRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/GnosisRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Router.sol\\\";\\n\\ninterface SavingsXDaiAdapter {\\n    function depositXDAI(address receiver) external payable returns (uint256);\\n\\n    function redeemXDAI(\\n        uint256 shares,\\n        address receiver\\n    ) external payable returns (uint256);\\n}\\n\\ncontract GnosisRouter is Router {\\n    IERC20 public constant sDAI =\\n        IERC20(0xaf204776c7245bF4147c2612BF6e5972Ee483701);\\n    SavingsXDaiAdapter public constant savingsXDaiAdapter =\\n        SavingsXDaiAdapter(0xD499b51fcFc66bd31248ef4b28d656d67E591A94);\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        WrappedERC20Factory _wrappedERC20Factory\\n    ) Router(_conditionalTokens, _wrappedERC20Factory) {}\\n\\n    /// @notice Splits a position using xDAI.\\n    function splitFromBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition\\n    ) external payable {\\n        uint256 shares = savingsXDaiAdapter.depositXDAI{value: msg.value}(\\n            address(this)\\n        );\\n\\n        _splitPosition(\\n            sDAI,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            shares\\n        );\\n    }\\n\\n    /// @notice Merges the position and sends xDAI to the user.\\n    function mergeToBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external {\\n        _mergePositions(\\n            sDAI,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n\\n        sDAI.approve(address(savingsXDaiAdapter), amount);\\n        savingsXDaiAdapter.redeemXDAI(amount, msg.sender);\\n    }\\n\\n    // @notice The user sends the outcome tokens and receives xDAI in exchange.\\n    function redeemToBase(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external {\\n        uint256 initialBalance = sDAI.balanceOf(address(this));\\n\\n        _redeemPositions(sDAI, parentCollectionId, conditionId, indexSets);\\n\\n        uint256 finalBalance = sDAI.balanceOf(address(this));\\n\\n        if (finalBalance > initialBalance) {\\n            savingsXDaiAdapter.redeemXDAI(\\n                finalBalance - initialBalance,\\n                msg.sender\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd50be64e0b88e9acf1a101b37ba487816e180b5fe761d8d2f8fc47ff22abbb\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"},\"src/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IConditionalTokens, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract Router is ERC1155Holder {\\n    IConditionalTokens public conditionalTokens;\\n    WrappedERC20Factory public wrappedERC20Factory;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        WrappedERC20Factory _wrappedERC20Factory\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n    }\\n\\n    // @notice Transfers the collateral to the Router and then splits the position.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) public {\\n        IERC20(collateralToken).transferFrom(msg.sender, address(this), amount);\\n        _splitPosition(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n    }\\n\\n    // @notice Splits a position and sends the outcome tokens to the user.\\n    function _splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) internal {\\n        IERC20(collateralToken).approve(address(conditionalTokens), amount);\\n\\n        conditionalTokens.splitPosition(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // wrap to erc20\\n            conditionalTokens.safeTransferFrom(\\n                address(this),\\n                address(wrappedERC20Factory.wrapped1155Factory()),\\n                tokenId,\\n                amount,\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            // transfer the ERC20 back to the user\\n            wrapped1155.transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    // @notice Merges positions and sends the collateral tokens to the user.\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) public {\\n        _mergePositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n        collateralToken.transfer(msg.sender, amount);\\n    }\\n\\n    // @notice Merges positions and receives the collateral tokens.\\n    // @dev callers to this function must send the collateral to the user.\\n    function _mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) internal {\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                partition[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        conditionalTokens.mergePositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            partition,\\n            amount\\n        );\\n    }\\n\\n    // @notice Redeems positions and sends the collateral tokens to the user.\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) public {\\n        uint256 initialBalance = collateralToken.balanceOf(address(this));\\n\\n        _redeemPositions(\\n            collateralToken,\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n\\n        uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n        if (finalBalance > initialBalance) {\\n            collateralToken.transfer(msg.sender, finalBalance - initialBalance);\\n        }\\n    }\\n\\n    // @notice Redeems positions and receives the collateral tokens.\\n    // @dev Callers to this function must send the collateral to the user.\\n    function _redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) internal {\\n        Wrapped1155Factory wrapped1155Factory = wrappedERC20Factory\\n            .wrapped1155Factory();\\n\\n        for (uint j = 0; j < indexSets.length; j++) {\\n            uint256 tokenId = getTokenId(\\n                collateralToken,\\n                parentCollectionId,\\n                conditionId,\\n                indexSets[j]\\n            );\\n\\n            // unwrap ERC20\\n            IERC20 wrapped1155 = wrappedERC20Factory.tokens(tokenId);\\n\\n            uint256 amount = wrapped1155.balanceOf(msg.sender);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n            wrapped1155Factory.unwrap(\\n                address(conditionalTokens),\\n                tokenId,\\n                amount,\\n                address(this),\\n                wrappedERC20Factory.data(tokenId)\\n            );\\n        }\\n\\n        conditionalTokens.redeemPositions(\\n            address(collateralToken),\\n            parentCollectionId,\\n            conditionId,\\n            indexSets\\n        );\\n    }\\n\\n    // @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(\\n            parentCollectionId,\\n            conditionId,\\n            indexSet\\n        );\\n        return\\n            conditionalTokens.getPositionId(\\n                address(collateralToken),\\n                collectionId\\n            );\\n    }\\n\\n    // @notice Returns the address of the ERC-20 associated to the ERC-1155 outcome token.\\n    function getTokenAddress(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (IERC20) {\\n        return\\n            wrappedERC20Factory.tokens(\\n                getTokenId(\\n                    collateralToken,\\n                    parentCollectionId,\\n                    conditionId,\\n                    indexSet\\n                )\\n            );\\n    }\\n\\n    // @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    function getWinningOutcomes(\\n        bytes32 conditionId\\n    ) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](\\n            conditionalTokens.getOutcomeSlotCount(conditionId)\\n        );\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0\\n                ? false\\n                : true;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @notice Helper function used to know if the user can redeem the tokens.\\n    function isPayoutReported(\\n        bytes32 conditionId\\n    ) external view returns (bool) {\\n        return conditionalTokens.payoutDenominator(conditionId) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x29765b5dac4493e530ff871b7663e5ee99a3ea19200e342cb4a20450a0eeac26\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x5c929c278735afd1215c8205fab1c6ecdd341b1474629f85c8ce7de13806be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fa338038062001fa383398101604081905262000034916200007f565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000be565b6001600160a01b03811681146200007c57600080fd5b50565b600080604083850312156200009357600080fd5b8251620000a08162000066565b6020840151909250620000b38162000066565b809150509250929050565b611ed580620000ce6000396000f3fe6080604052600436106100de5760003560e01c806372ce42751161008557806372ce4275146102225780639e7212ad14610242578063a3814b1d14610262578063a88453d214610282578063abf7e273146102a2578063bc197c81146102ca578063de8b61491461030f578063f23a6e6114610337578063f7f57c041461036357600080fd5b806301b7037c146100e357806301ffc9a71461010557806302bd74c31461013a5780631a09424a1461016757806331d1ca27146101955780633577be81146101b55780635bd9e299146101d55780636137132514610202575b600080fd5b3480156100ef57600080fd5b506101036100fe366004611724565b610376565b005b34801561011157600080fd5b5061012561012036600461178d565b6104f8565b60405190151581526020015b60405180910390f35b34801561014657600080fd5b5061015a6101553660046117be565b61052f565b60405161013191906117d7565b34801561017357600080fd5b5061018761018236600461181d565b6106ac565b604051908152602001610131565b3480156101a157600080fd5b506101036101b0366004611858565b6107a6565b3480156101c157600080fd5b506101256101d03660046117be565b6108dd565b3480156101e157600080fd5b506000546101f5906001600160a01b031681565b60405161013191906118b2565b34801561020e57600080fd5b506001546101f5906001600160a01b031681565b34801561022e57600080fd5b5061010361023d3660046118c6565b610952565b34801561024e57600080fd5b5061010361025d3660046118c6565b6109d4565b34801561026e57600080fd5b5061010361027d366004611937565b610a53565b34801561028e57600080fd5b506101f561029d36600461181d565b610c06565b3480156102ae57600080fd5b506101f573d499b51fcfc66bd31248ef4b28d656d67e591a9481565b3480156102d657600080fd5b506102f66102e5366004611acb565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610131565b34801561031b57600080fd5b506101f573af204776c7245bf4147c2612bf6e5972ee48370181565b34801561034357600080fd5b506102f6610352366004611b78565b63f23a6e6160e01b95945050505050565b610103610371366004611937565b610c8e565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906103a59030906004016118b2565b6020604051808303816000875af11580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611be0565b90506103f78686868686610d38565b6040516370a0823160e01b81526000906001600160a01b038816906370a08231906104269030906004016118b2565b6020604051808303816000875af1158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190611be0565b9050818111156104ef576001600160a01b03871663a9059cbb3361048d8585611c0f565b6040518363ffffffff1660e01b81526004016104aa929190611c22565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190611c3b565b505b50505050505050565b60006001600160e01b03198216630271189760e51b148061052957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008054604051636a16e06160e11b815260048101849052606092916001600160a01b03169063d42dc0c290602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611be0565b6001600160401b038111156105b6576105b6611989565b6040519080825280602002602001820160405280156105df578160200160208202803683370190505b50905060005b81518110156106a557600054604051630141320560e21b815260048101869052602481018390526001600160a01b0390911690630504c81490604401602060405180830381865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190611be0565b1561066e576001610671565b60005b82828151811061068357610683611c5d565b911515602092830291909101909101528061069d81611c73565b9150506105e5565b5092915050565b6000805460405163856296f760e01b815260048101869052602481018590526044810184905282916001600160a01b03169063856296f790606401602060405180830381865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611be0565b60005460405163039dd75360e41b81529192506001600160a01b0316906339dd75309061075b9089908590600401611c22565b602060405180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190611be0565b9695505050505050565b6107c873af204776c7245bf4147c2612bf6e5972ee4837018686868686611097565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b3906108159073d499b51fcfc66bd31248ef4b28d656d67e591a94908590600401611c22565b6020604051808303816000875af1158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611c3b565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af11580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190611be0565b505050505050565b6000805460405163dd34de6760e01b81526004810184905282916001600160a01b03169063dd34de6790602401602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190611be0565b1192915050565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd9061098290339030908690600401611c8c565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190611c3b565b506108d586868686868661137a565b6109e2868686868686611097565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90610a109033908590600401611c22565b6020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190611c3b565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a8d9030906004016118b2565b6020604051808303816000875af1158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190611be0565b9050610af373af204776c7245bf4147c2612bf6e5972ee48370186868686610d38565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610b2d9030906004016118b2565b6020604051808303816000875af1158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190611be0565b9050818111156108d55773d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610b9e8484611c0f565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190611be0565b6001546000906001600160a01b0316634f64b2be610c26878787876106ac565b6040518263ffffffff1660e01b8152600401610c4491815260200190565b602060405180830381865afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190611cb0565b95945050505050565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b903490610cca9030906004016118b2565b60206040518083038185885af1158015610ce8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d0d9190611be0565b9050610d3173af204776c7245bf4147c2612bf6e5972ee483701868686868661137a565b5050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190611cb0565b905060005b82811015611025576000610dd9888888888887818110610dcd57610dcd611c5d565b905060200201356106ac565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190611cb0565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401610e7c91906118b2565b6020604051808303816000875af1158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190611be0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610ef290339030908690600401611c8c565b6020604051808303816000875af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f359190611c3b565b506000546001546040516303c2ea1160e61b8152600481018690526001600160a01b03888116936352aecb24939082169288928792309291169063f0ba844090602401600060405180830381865afa158015610f95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbd9190810190611cf1565b6040518663ffffffff1660e01b8152600401610fdd959493929190611d8a565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505050808061101d90611c73565b915050610dab565b50600054604051626dc0df60e21b81526001600160a01b03909116906301b7037c9061105d9089908990899089908990600401611df6565b600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b50505050505050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190611cb0565b905060005b8381101561130457600061112c898989898987818110610dcd57610dcd611c5d565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190611cb0565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906111d290339030908a90600401611c8c565b6020604051808303816000875af11580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190611c3b565b506000546001546040516303c2ea1160e61b8152600481018590526001600160a01b03878116936352aecb24939082169287928b92309291169063f0ba844090602401600060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129d9190810190611cf1565b6040518663ffffffff1660e01b81526004016112bd959493929190611d8a565b600060405180830381600087803b1580156112d757600080fd5b505af11580156112eb573d6000803e3d6000fd5b50505050505080806112fc90611c73565b91505061110a565b50600054604051639e7212ad60e01b81526001600160a01b0390911690639e7212ad9061133f908a908a908a908a908a908a90600401611e24565b600060405180830381600087803b15801561135957600080fd5b505af115801561136d573d6000803e3d6000fd5b5050505050505050505050565b60005460405163095ea7b360e01b81526001600160a01b038881169263095ea7b3926113ae92909116908590600401611c22565b6020604051808303816000875af11580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190611c3b565b506000546040516372ce427560e01b81526001600160a01b03909116906372ce42759061142c90899089908990899089908990600401611e24565b600060405180830381600087803b15801561144657600080fd5b505af115801561145a573d6000803e3d6000fd5b5050505060005b828110156104ef576000611483888888888887818110610dcd57610dcd611c5d565b6000546001546040805163150c5b9760e01b815290519394506001600160a01b039283169363f242432a933093169163150c5b979160048083019260209291908290030181865afa1580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190611cb0565b6001546040516303c2ea1160e61b815260048101879052869189916001600160a01b039091169063f0ba844090602401600060405180830381865afa15801561154d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115759190810190611cf1565b6040518663ffffffff1660e01b8152600401611595959493929190611e65565b600060405180830381600087803b1580156115af57600080fd5b505af11580156115c3573d6000803e3d6000fd5b50506001546040516327b2595f60e11b815260048101859052600093506001600160a01b039091169150634f64b2be90602401602060405180830381865afa158015611613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116379190611cb0565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906116689033908890600401611c22565b6020604051808303816000875af1158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab9190611c3b565b50505080806116b990611c73565b915050611461565b6001600160a01b03811681146116d657600080fd5b50565b60008083601f8401126116eb57600080fd5b5081356001600160401b0381111561170257600080fd5b6020830191508360208260051b850101111561171d57600080fd5b9250929050565b60008060008060006080868803121561173c57600080fd5b8535611747816116c1565b9450602086013593506040860135925060608601356001600160401b0381111561177057600080fd5b61177c888289016116d9565b969995985093965092949392505050565b60006020828403121561179f57600080fd5b81356001600160e01b0319811681146117b757600080fd5b9392505050565b6000602082840312156117d057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156118115783511515835292840192918401916001016117f3565b50909695505050505050565b6000806000806080858703121561183357600080fd5b843561183e816116c1565b966020860135965060408601359560600135945092505050565b60008060008060006080868803121561187057600080fd5b853594506020860135935060408601356001600160401b0381111561189457600080fd5b6118a0888289016116d9565b96999598509660600135949350505050565b6001600160a01b0391909116815260200190565b60008060008060008060a087890312156118df57600080fd5b86356118ea816116c1565b9550602087013594506040870135935060608701356001600160401b0381111561191357600080fd5b61191f89828a016116d9565b979a9699509497949695608090950135949350505050565b6000806000806060858703121561194d57600080fd5b843593506020850135925060408501356001600160401b0381111561197157600080fd5b61197d878288016116d9565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156119c7576119c7611989565b604052919050565b600082601f8301126119e057600080fd5b813560206001600160401b038211156119fb576119fb611989565b8160051b611a0a82820161199f565b9283528481018201928281019087851115611a2457600080fd5b83870192505b84831015611a4357823582529183019190830190611a2a565b979650505050505050565b60006001600160401b03821115611a6757611a67611989565b50601f01601f191660200190565b600082601f830112611a8657600080fd5b8135611a99611a9482611a4e565b61199f565b818152846020838601011115611aae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611ae357600080fd5b8535611aee816116c1565b94506020860135611afe816116c1565b935060408601356001600160401b0380821115611b1a57600080fd5b611b2689838a016119cf565b94506060880135915080821115611b3c57600080fd5b611b4889838a016119cf565b93506080880135915080821115611b5e57600080fd5b50611b6b88828901611a75565b9150509295509295909350565b600080600080600060a08688031215611b9057600080fd5b8535611b9b816116c1565b94506020860135611bab816116c1565b9350604086013592506060860135915060808601356001600160401b03811115611bd457600080fd5b611b6b88828901611a75565b600060208284031215611bf257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052957610529611bf9565b6001600160a01b03929092168252602082015260400190565b600060208284031215611c4d57600080fd5b815180151581146117b757600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611c8557611c85611bf9565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cc257600080fd5b81516117b7816116c1565b60005b83811015611ce8578181015183820152602001611cd0565b50506000910152565b600060208284031215611d0357600080fd5b81516001600160401b03811115611d1957600080fd5b8201601f81018413611d2a57600080fd5b8051611d38611a9482611a4e565b818152856020838501011115611d4d57600080fd5b610c85826020830160208601611ccd565b60008151808452611d76816020860160208601611ccd565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a060808201819052600090611a4390830184611d5e565b81835260006001600160fb1b03831115611ddd57600080fd5b8260051b80836020870137939093016020019392505050565b60018060a01b0386168152846020820152836040820152608060608201526000611a43608083018486611dc4565b60018060a01b038716815285602082015284604082015260a060608201526000611e5260a083018587611dc4565b9050826080830152979650505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611a4390830184611d5e56fea2646970667358221220abffdf89822d019a2a3468fdc423f54c7c45bdff1c4174111e9f6249bdd94d8864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100de5760003560e01c806372ce42751161008557806372ce4275146102225780639e7212ad14610242578063a3814b1d14610262578063a88453d214610282578063abf7e273146102a2578063bc197c81146102ca578063de8b61491461030f578063f23a6e6114610337578063f7f57c041461036357600080fd5b806301b7037c146100e357806301ffc9a71461010557806302bd74c31461013a5780631a09424a1461016757806331d1ca27146101955780633577be81146101b55780635bd9e299146101d55780636137132514610202575b600080fd5b3480156100ef57600080fd5b506101036100fe366004611724565b610376565b005b34801561011157600080fd5b5061012561012036600461178d565b6104f8565b60405190151581526020015b60405180910390f35b34801561014657600080fd5b5061015a6101553660046117be565b61052f565b60405161013191906117d7565b34801561017357600080fd5b5061018761018236600461181d565b6106ac565b604051908152602001610131565b3480156101a157600080fd5b506101036101b0366004611858565b6107a6565b3480156101c157600080fd5b506101256101d03660046117be565b6108dd565b3480156101e157600080fd5b506000546101f5906001600160a01b031681565b60405161013191906118b2565b34801561020e57600080fd5b506001546101f5906001600160a01b031681565b34801561022e57600080fd5b5061010361023d3660046118c6565b610952565b34801561024e57600080fd5b5061010361025d3660046118c6565b6109d4565b34801561026e57600080fd5b5061010361027d366004611937565b610a53565b34801561028e57600080fd5b506101f561029d36600461181d565b610c06565b3480156102ae57600080fd5b506101f573d499b51fcfc66bd31248ef4b28d656d67e591a9481565b3480156102d657600080fd5b506102f66102e5366004611acb565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610131565b34801561031b57600080fd5b506101f573af204776c7245bf4147c2612bf6e5972ee48370181565b34801561034357600080fd5b506102f6610352366004611b78565b63f23a6e6160e01b95945050505050565b610103610371366004611937565b610c8e565b6040516370a0823160e01b81526000906001600160a01b038716906370a08231906103a59030906004016118b2565b6020604051808303816000875af11580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190611be0565b90506103f78686868686610d38565b6040516370a0823160e01b81526000906001600160a01b038816906370a08231906104269030906004016118b2565b6020604051808303816000875af1158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190611be0565b9050818111156104ef576001600160a01b03871663a9059cbb3361048d8585611c0f565b6040518363ffffffff1660e01b81526004016104aa929190611c22565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190611c3b565b505b50505050505050565b60006001600160e01b03198216630271189760e51b148061052957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008054604051636a16e06160e11b815260048101849052606092916001600160a01b03169063d42dc0c290602401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611be0565b6001600160401b038111156105b6576105b6611989565b6040519080825280602002602001820160405280156105df578160200160208202803683370190505b50905060005b81518110156106a557600054604051630141320560e21b815260048101869052602481018390526001600160a01b0390911690630504c81490604401602060405180830381865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190611be0565b1561066e576001610671565b60005b82828151811061068357610683611c5d565b911515602092830291909101909101528061069d81611c73565b9150506105e5565b5092915050565b6000805460405163856296f760e01b815260048101869052602481018590526044810184905282916001600160a01b03169063856296f790606401602060405180830381865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611be0565b60005460405163039dd75360e41b81529192506001600160a01b0316906339dd75309061075b9089908590600401611c22565b602060405180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190611be0565b9695505050505050565b6107c873af204776c7245bf4147c2612bf6e5972ee4837018686868686611097565b60405163095ea7b360e01b815273af204776c7245bf4147c2612bf6e5972ee4837019063095ea7b3906108159073d499b51fcfc66bd31248ef4b28d656d67e591a94908590600401611c22565b6020604051808303816000875af1158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611c3b565b5060405163d1ff824160e01b81526004810182905233602482015273d499b51fcfc66bd31248ef4b28d656d67e591a949063d1ff8241906044016020604051808303816000875af11580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190611be0565b505050505050565b6000805460405163dd34de6760e01b81526004810184905282916001600160a01b03169063dd34de6790602401602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190611be0565b1192915050565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd9061098290339030908690600401611c8c565b6020604051808303816000875af11580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190611c3b565b506108d586868686868661137a565b6109e2868686868686611097565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb90610a109033908590600401611c22565b6020604051808303816000875af1158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190611c3b565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610a8d9030906004016118b2565b6020604051808303816000875af1158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190611be0565b9050610af373af204776c7245bf4147c2612bf6e5972ee48370186868686610d38565b6040516370a0823160e01b815260009073af204776c7245bf4147c2612bf6e5972ee483701906370a0823190610b2d9030906004016118b2565b6020604051808303816000875af1158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190611be0565b9050818111156108d55773d499b51fcfc66bd31248ef4b28d656d67e591a9463d1ff8241610b9e8484611c0f565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190611be0565b6001546000906001600160a01b0316634f64b2be610c26878787876106ac565b6040518263ffffffff1660e01b8152600401610c4491815260200190565b602060405180830381865afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190611cb0565b95945050505050565b60405163f716a92b60e01b815260009073d499b51fcfc66bd31248ef4b28d656d67e591a949063f716a92b903490610cca9030906004016118b2565b60206040518083038185885af1158015610ce8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d0d9190611be0565b9050610d3173af204776c7245bf4147c2612bf6e5972ee483701868686868661137a565b5050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190611cb0565b905060005b82811015611025576000610dd9888888888887818110610dcd57610dcd611c5d565b905060200201356106ac565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c9190611cb0565b90506000816001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401610e7c91906118b2565b6020604051808303816000875af1158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190611be0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610ef290339030908690600401611c8c565b6020604051808303816000875af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f359190611c3b565b506000546001546040516303c2ea1160e61b8152600481018690526001600160a01b03888116936352aecb24939082169288928792309291169063f0ba844090602401600060405180830381865afa158015610f95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbd9190810190611cf1565b6040518663ffffffff1660e01b8152600401610fdd959493929190611d8a565b600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505050808061101d90611c73565b915050610dab565b50600054604051626dc0df60e21b81526001600160a01b03909116906301b7037c9061105d9089908990899089908990600401611df6565b600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b50505050505050505050565b6001546040805163150c5b9760e01b815290516000926001600160a01b03169163150c5b979160048083019260209291908290030181865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190611cb0565b905060005b8381101561130457600061112c898989898987818110610dcd57610dcd611c5d565b6001546040516327b2595f60e11b8152600481018390529192506000916001600160a01b0390911690634f64b2be90602401602060405180830381865afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f9190611cb0565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906111d290339030908a90600401611c8c565b6020604051808303816000875af11580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190611c3b565b506000546001546040516303c2ea1160e61b8152600481018590526001600160a01b03878116936352aecb24939082169287928b92309291169063f0ba844090602401600060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129d9190810190611cf1565b6040518663ffffffff1660e01b81526004016112bd959493929190611d8a565b600060405180830381600087803b1580156112d757600080fd5b505af11580156112eb573d6000803e3d6000fd5b50505050505080806112fc90611c73565b91505061110a565b50600054604051639e7212ad60e01b81526001600160a01b0390911690639e7212ad9061133f908a908a908a908a908a908a90600401611e24565b600060405180830381600087803b15801561135957600080fd5b505af115801561136d573d6000803e3d6000fd5b5050505050505050505050565b60005460405163095ea7b360e01b81526001600160a01b038881169263095ea7b3926113ae92909116908590600401611c22565b6020604051808303816000875af11580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190611c3b565b506000546040516372ce427560e01b81526001600160a01b03909116906372ce42759061142c90899089908990899089908990600401611e24565b600060405180830381600087803b15801561144657600080fd5b505af115801561145a573d6000803e3d6000fd5b5050505060005b828110156104ef576000611483888888888887818110610dcd57610dcd611c5d565b6000546001546040805163150c5b9760e01b815290519394506001600160a01b039283169363f242432a933093169163150c5b979160048083019260209291908290030181865afa1580156114dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115009190611cb0565b6001546040516303c2ea1160e61b815260048101879052869189916001600160a01b039091169063f0ba844090602401600060405180830381865afa15801561154d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115759190810190611cf1565b6040518663ffffffff1660e01b8152600401611595959493929190611e65565b600060405180830381600087803b1580156115af57600080fd5b505af11580156115c3573d6000803e3d6000fd5b50506001546040516327b2595f60e11b815260048101859052600093506001600160a01b039091169150634f64b2be90602401602060405180830381865afa158015611613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116379190611cb0565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb906116689033908890600401611c22565b6020604051808303816000875af1158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab9190611c3b565b50505080806116b990611c73565b915050611461565b6001600160a01b03811681146116d657600080fd5b50565b60008083601f8401126116eb57600080fd5b5081356001600160401b0381111561170257600080fd5b6020830191508360208260051b850101111561171d57600080fd5b9250929050565b60008060008060006080868803121561173c57600080fd5b8535611747816116c1565b9450602086013593506040860135925060608601356001600160401b0381111561177057600080fd5b61177c888289016116d9565b969995985093965092949392505050565b60006020828403121561179f57600080fd5b81356001600160e01b0319811681146117b757600080fd5b9392505050565b6000602082840312156117d057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156118115783511515835292840192918401916001016117f3565b50909695505050505050565b6000806000806080858703121561183357600080fd5b843561183e816116c1565b966020860135965060408601359560600135945092505050565b60008060008060006080868803121561187057600080fd5b853594506020860135935060408601356001600160401b0381111561189457600080fd5b6118a0888289016116d9565b96999598509660600135949350505050565b6001600160a01b0391909116815260200190565b60008060008060008060a087890312156118df57600080fd5b86356118ea816116c1565b9550602087013594506040870135935060608701356001600160401b0381111561191357600080fd5b61191f89828a016116d9565b979a9699509497949695608090950135949350505050565b6000806000806060858703121561194d57600080fd5b843593506020850135925060408501356001600160401b0381111561197157600080fd5b61197d878288016116d9565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156119c7576119c7611989565b604052919050565b600082601f8301126119e057600080fd5b813560206001600160401b038211156119fb576119fb611989565b8160051b611a0a82820161199f565b9283528481018201928281019087851115611a2457600080fd5b83870192505b84831015611a4357823582529183019190830190611a2a565b979650505050505050565b60006001600160401b03821115611a6757611a67611989565b50601f01601f191660200190565b600082601f830112611a8657600080fd5b8135611a99611a9482611a4e565b61199f565b818152846020838601011115611aae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611ae357600080fd5b8535611aee816116c1565b94506020860135611afe816116c1565b935060408601356001600160401b0380821115611b1a57600080fd5b611b2689838a016119cf565b94506060880135915080821115611b3c57600080fd5b611b4889838a016119cf565b93506080880135915080821115611b5e57600080fd5b50611b6b88828901611a75565b9150509295509295909350565b600080600080600060a08688031215611b9057600080fd5b8535611b9b816116c1565b94506020860135611bab816116c1565b9350604086013592506060860135915060808601356001600160401b03811115611bd457600080fd5b611b6b88828901611a75565b600060208284031215611bf257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561052957610529611bf9565b6001600160a01b03929092168252602082015260400190565b600060208284031215611c4d57600080fd5b815180151581146117b757600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611c8557611c85611bf9565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cc257600080fd5b81516117b7816116c1565b60005b83811015611ce8578181015183820152602001611cd0565b50506000910152565b600060208284031215611d0357600080fd5b81516001600160401b03811115611d1957600080fd5b8201601f81018413611d2a57600080fd5b8051611d38611a9482611a4e565b818152856020838501011115611d4d57600080fd5b610c85826020830160208601611ccd565b60008151808452611d76816020860160208601611ccd565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a060808201819052600090611a4390830184611d5e565b81835260006001600160fb1b03831115611ddd57600080fd5b8260051b80836020870137939093016020019392505050565b60018060a01b0386168152846020820152836040820152608060608201526000611a43608083018486611dc4565b60018060a01b038716815285602082015284604082015260a060608201526000611e5260a083018587611dc4565b9050826080830152979650505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611a4390830184611d5e56fea2646970667358221220abffdf89822d019a2a3468fdc423f54c7c45bdff1c4174111e9f6249bdd94d8864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mergeToBase(bytes32,bytes32,uint256[],uint256)": {
        "notice": "Merges the position and sends xDAI to the user."
      },
      "splitFromBase(bytes32,bytes32,uint256[])": {
        "notice": "Splits a position using xDAI."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3950,
        "contract": "src/GnosisRouter.sol:GnosisRouter",
        "label": "conditionalTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConditionalTokens)2037"
      },
      {
        "astId": 3953,
        "contract": "src/GnosisRouter.sol:GnosisRouter",
        "label": "wrappedERC20Factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(WrappedERC20Factory)4676"
      }
    ],
    "types": {
      "t_contract(IConditionalTokens)2037": {
        "encoding": "inplace",
        "label": "contract IConditionalTokens",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedERC20Factory)4676": {
        "encoding": "inplace",
        "label": "contract WrappedERC20Factory",
        "numberOfBytes": "20"
      }
    }
  }
}