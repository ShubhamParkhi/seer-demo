{
  "address": "0xFb4c45a988F70D0f8eFb5Ab3A7feB00D463c16B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Wrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "multiToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "createWrappedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "data",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "toString31",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "encodedString",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract Wrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d3b339a0456d3c17c2badcfc58c6fdb1c19135f76dce601525cb37f9550b769",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xFb4c45a988F70D0f8eFb5Ab3A7feB00D463c16B7",
    "transactionIndex": 2,
    "gasUsed": "452578",
    "logsBloom": "0x
    "blockHash": "0x4326e71268b9bde65eb0676c1350dfc47f3e6dce0189d6cf17c0889b06ddce4e",
    "transactionHash": "0x3d3b339a0456d3c17c2badcfc58c6fdb1c19135f76dce601525cb37f9550b769",
    "logs": [],
    "blockNumber": 32719077,
    "cumulativeGasUsed": "4201665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD194319D1804C1051DD21Ba1Dc931cA72410B79f"
  ],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Wrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"createWrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"toString31\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"encodedString\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract Wrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_wrapped1155Factory\":\"Address of the Wrapped1155Factory implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WrappedERC20Factory.sol\":\"WrappedERC20Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x5c929c278735afd1215c8205fab1c6ecdd341b1474629f85c8ce7de13806be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107c33803806107c383398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161073261009160003960008181608601526101f101526107326000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c80627469421461005b578063150c5b97146100815780634f64b2be146100c0578063bb13cd10146100e9578063f0ba8440146100fc575b600080fd5b61006e6100693660046103f1565b61011c565b6040519081526020015b60405180910390f35b6100a87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610078565b6100a86100ce36600461042e565b6000602081905290815260409020546001600160a01b031681565b6100a86100f736600461045f565b610196565b61010f61010a36600461042e565b6102b4565b6040516100789190610525565b8051600090602081106101675760405162461bcd60e51b815260206004820152600f60248201526e737472696e6720746f6f206c6f6e6760881b604482015260640160405180910390fd5b602083015191506000600382602061017f919061053f565b600019911b1b9290921660019190911b1792915050565b6000806101a28461011c565b6101ab8461011c565b604080516020810193909352820152600960f91b606082015260610160408051601f1981840301815290829052631892c08760e11b825291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633125810e9061022a908a908a908790600401610566565b6020604051808303816000875af1158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d9190610596565b60008781526020818152604080832080546001600160a01b0319166001600160a01b038616179055600190915290209091506102a9838261063c565b509695505050505050565b600160205260009081526040902080546102cd906105b3565b80601f01602080910402602001604051908101604052809291908181526020018280546102f9906105b3565b80156103465780601f1061031b57610100808354040283529160200191610346565b820191906000526020600020905b81548152906001019060200180831161032957829003601f168201915b505050505081565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261037557600080fd5b813567ffffffffffffffff808211156103905761039061034e565b604051601f8301601f19908116603f011681019082821181831017156103b8576103b861034e565b816040528381528660208588010111156103d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561040357600080fd5b813567ffffffffffffffff81111561041a57600080fd5b61042684828501610364565b949350505050565b60006020828403121561044057600080fd5b5035919050565b6001600160a01b038116811461045c57600080fd5b50565b6000806000806080858703121561047557600080fd5b843561048081610447565b935060208501359250604085013567ffffffffffffffff808211156104a457600080fd5b6104b088838901610364565b935060608701359150808211156104c657600080fd5b506104d387828801610364565b91505092959194509250565b6000815180845260005b81811015610505576020818501810151868301820152016104e9565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061053860208301846104df565b9392505050565b8181038181111561056057634e487b7160e01b600052601160045260246000fd5b92915050565b60018060a01b038416815282602082015260606040820152600061058d60608301846104df565b95945050505050565b6000602082840312156105a857600080fd5b815161053881610447565b600181811c908216806105c757607f821691505b6020821081036105e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561063757600081815260208120601f850160051c810160208610156106145750805b601f850160051c820191505b8181101561063357828155600101610620565b5050505b505050565b815167ffffffffffffffff8111156106565761065661034e565b61066a8161066484546105b3565b846105ed565b602080601f83116001811461069f57600084156106875750858301515b600019600386901b1c1916600185901b178555610633565b600085815260208120601f198616915b828110156106ce578886015182559484019460019091019084016106af565b50858210156106ec5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220134cc1a7604e0853b12ff521f4791ec8d2aa6a816f9906fdb24bfd02f47d715964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100565760003560e01c80627469421461005b578063150c5b97146100815780634f64b2be146100c0578063bb13cd10146100e9578063f0ba8440146100fc575b600080fd5b61006e6100693660046103f1565b61011c565b6040519081526020015b60405180910390f35b6100a87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610078565b6100a86100ce36600461042e565b6000602081905290815260409020546001600160a01b031681565b6100a86100f736600461045f565b610196565b61010f61010a36600461042e565b6102b4565b6040516100789190610525565b8051600090602081106101675760405162461bcd60e51b815260206004820152600f60248201526e737472696e6720746f6f206c6f6e6760881b604482015260640160405180910390fd5b602083015191506000600382602061017f919061053f565b600019911b1b9290921660019190911b1792915050565b6000806101a28461011c565b6101ab8461011c565b604080516020810193909352820152600960f91b606082015260610160408051601f1981840301815290829052631892c08760e11b825291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633125810e9061022a908a908a908790600401610566565b6020604051808303816000875af1158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d9190610596565b60008781526020818152604080832080546001600160a01b0319166001600160a01b038616179055600190915290209091506102a9838261063c565b509695505050505050565b600160205260009081526040902080546102cd906105b3565b80601f01602080910402602001604051908101604052809291908181526020018280546102f9906105b3565b80156103465780601f1061031b57610100808354040283529160200191610346565b820191906000526020600020905b81548152906001019060200180831161032957829003601f168201915b505050505081565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261037557600080fd5b813567ffffffffffffffff808211156103905761039061034e565b604051601f8301601f19908116603f011681019082821181831017156103b8576103b861034e565b816040528381528660208588010111156103d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561040357600080fd5b813567ffffffffffffffff81111561041a57600080fd5b61042684828501610364565b949350505050565b60006020828403121561044057600080fd5b5035919050565b6001600160a01b038116811461045c57600080fd5b50565b6000806000806080858703121561047557600080fd5b843561048081610447565b935060208501359250604085013567ffffffffffffffff808211156104a457600080fd5b6104b088838901610364565b935060608701359150808211156104c657600080fd5b506104d387828801610364565b91505092959194509250565b6000815180845260005b81811015610505576020818501810151868301820152016104e9565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061053860208301846104df565b9392505050565b8181038181111561056057634e487b7160e01b600052601160045260246000fd5b92915050565b60018060a01b038416815282602082015260606040820152600061058d60608301846104df565b95945050505050565b6000602082840312156105a857600080fd5b815161053881610447565b600181811c908216806105c757607f821691505b6020821081036105e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561063757600081815260208120601f850160051c810160208610156106145750805b601f850160051c820191505b8181101561063357828155600101610620565b5050505b505050565b815167ffffffffffffffff8111156106565761065661034e565b61066a8161066484546105b3565b846105ed565b602080601f83116001811461069f57600084156106875750858301515b600019600386901b1c1916600185901b178555610633565b600085815260208120601f198616915b828110156106ce578886015182559484019460019091019084016106af565b50858210156106ec5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220134cc1a7604e0853b12ff521f4791ec8d2aa6a816f9906fdb24bfd02f47d715964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_wrapped1155Factory": "Address of the Wrapped1155Factory implementation."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4544,
        "contract": "src/WrappedERC20Factory.sol:WrappedERC20Factory",
        "label": "tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(IERC20)1871)"
      },
      {
        "astId": 4548,
        "contract": "src/WrappedERC20Factory.sol:WrappedERC20Factory",
        "label": "data",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1871": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_contract(IERC20)1871)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)1871"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}