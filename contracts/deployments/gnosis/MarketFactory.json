{
  "address": "0x2E51BF252FB4c844D82236BA27F28e8b190cea37",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "encodedQuestions",
          "type": "string[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "changeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "name": "changeQuestionTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        }
      ],
      "name": "changeRealityProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb2ba7871567952b32a1b78ae4d4caf027499542144792f4410e77e0f7e2aa8e",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x2E51BF252FB4c844D82236BA27F28e8b190cea37",
    "transactionIndex": 0,
    "gasUsed": "2062291",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x42371899a31d4418158ebb8b273529d36ea5c72315ad374520d67833c84504b5",
    "transactionHash": "0xfb2ba7871567952b32a1b78ae4d4caf027499542144792f4410e77e0f7e2aa8e",
    "logs": [],
    "blockNumber": 35122252,
    "cumulativeGasUsed": "2062291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7EcE7743cc476b4343919B85B2C53AfF50ED3B15",
    "0x29F39dE98D750eb77b5FAfb31B2837f079FcE222",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0x5bc8ddE5D07C6bf24911240AA6F9B0190ae3b557",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0x5BE39c00fB89688E8C38732Fb204B084ca5f8965",
    "0x4edca105188a0783ab3a6f09c50567d1e3f8591d",
    302400
  ],
  "numDeployments": 13,
  "solcInputHash": "16db534416c5d43133e74a2e6460e9b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"changeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"name\":\"changeQuestionTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"}],\"name\":\"changeRealityProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_governor\":\"Address of the governor of this contract.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_questionTimeout\":\"Reality question timeout.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    bytes32 public conditionId; // Conditional Tokens conditionId\\n    bytes32 public questionId; // Conditional Tokens questionId\\n    bytes32[] public questionsIds; // Reality questions ids\\n    uint256 public templateId; // Reality templateId\\n    string[] public encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x306223329a3552dc7809258c9b46aeb09ec6482ccde4966a4014251e1f33c962\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct CreateMarketParams {\\n        string marketName; // The name of the market\\n        string[] outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n        string category; // Reality question category\\n        string lang; // Reality question language\\n        uint256 lowerBound; // Lower bound, only used for scalar markets\\n        uint256 upperBound; // Upper bound, only user for scalar markets\\n        uint256 minBond; // Min bond to use on Reality\\n        uint32 openingTime; // Reality question opening time\\n        string[] tokenNames; // Name of the ERC20 tokens associated to each outcome\\n    }\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct InternalMarketConfig {\\n        bytes32 questionId; // Conditional Tokens questionId\\n        bytes32[] questionsIds; // Reality questions ids\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        uint256 outcomeSlotCount; // Conditional Tokens outcomeSlotCount\\n        uint256 templateId; // Reality templateId\\n    }\\n\\n    uint8 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint8 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint8 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    uint32 public questionTimeout; // Reality question timeout\\n\\n    address public immutable arbitrator; // Arbitrator contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n    WrappedERC20Factory public immutable wrappedERC20Factory; // 1155 to 20 factory contract\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    address public immutable collateralToken; // Conditional Tokens collateral token contract\\n    RealityProxy public realityProxy; // Oracle contract\\n    address public governor; // Governor of the contract\\n    address[] public markets; // Markets created by this factory\\n    address public market; // Market contract\\n\\n    event NewMarket(\\n        address indexed market,\\n        string marketName,\\n        string[] outcomes,\\n        uint256 lowerBound,\\n        uint256 upperBound,\\n        bytes32 conditionId,\\n        bytes32 questionId,\\n        bytes32[] questionsIds,\\n        uint256 templateId,\\n        string[] encodedQuestions\\n    );\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _governor Address of the governor of this contract.\\n     *  @param _questionTimeout Reality question timeout.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        WrappedERC20Factory _wrappedERC20Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        address _governor,\\n        uint32 _questionTimeout\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        governor = _governor;\\n        questionTimeout = _questionTimeout;\\n    }\\n\\n    function changeGovernor(address _governor) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        governor = _governor;\\n    }\\n\\n    function changeMarket(address _market) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        market = _market;\\n    }\\n\\n    function changeRealityProxy(RealityProxy _realityProxy) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        realityProxy = _realityProxy;\\n    }\\n\\n    function changeQuestionTimeout(uint32 _questionTimeout) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        questionTimeout = _questionTimeout;\\n    }\\n\\n    function createCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            encodedQuestions[0],\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            outcomeSlotCount\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createMultiCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            encodedQuestions[0],\\n            REALITY_MULTI_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            outcomeSlotCount\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_MULTI_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.upperBound > params.lowerBound, \\\"Invalid bounds\\\");\\n        // values reserved by Reality for INVALID and UNRESOLVED_ANSWER\\n        require(\\n            params.upperBound < type(uint256).max - 2,\\n            \\\"Invalid high point\\\"\\n        );\\n        require(params.outcomes.length == 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = 3; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithoutOutcomes(\\n            params.marketName,\\n            params.category,\\n            params.lang\\n        );\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            encodedQuestions[0],\\n            REALITY_UINT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            outcomeSlotCount\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createMultiScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\n\\n        string[] memory encodedQuestions = new string[](params.outcomes.length);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            encodedQuestions[i] = encodeRealityQuestionWithoutOutcomes(\\n                string(\\n                    abi.encodePacked(\\n                        'For the market \\\\\\\\\\\"',\\n                        params.marketName,\\n                        '\\\\\\\\\\\", what will be the value for \\\\\\\\\\\"',\\n                        params.outcomes[i],\\n                        '\\\\\\\\\\\"?'\\n                    )\\n                ),\\n                params.category,\\n                params.lang\\n            );\\n\\n            questionsIds[i] = askRealityQuestion(\\n                encodedQuestions[i],\\n                REALITY_UINT_TEMPLATE,\\n                params.openingTime,\\n                params.minBond\\n            );\\n        }\\n        bytes32 questionId = keccak256(abi.encode(questionsIds));\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        address marketId = createMarket(\\n            params,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function setUpQuestionAndCondition(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond,\\n        uint256 outcomeSlotCount\\n    ) internal returns (bytes32 questionId, bytes32 conditionId) {\\n        questionId = askRealityQuestion(\\n            question,\\n            templateId,\\n            openingTime,\\n            minBond\\n        );\\n\\n        conditionId = prepareCondition(questionId, outcomeSlotCount);\\n    }\\n\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        string[] memory encodedQuestions,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        Market instance = Market(market.clone());\\n\\n        deployERC20Positions(\\n            config.conditionId,\\n            config.outcomeSlotCount,\\n            params.tokenNames\\n        );\\n        instance.initialize(\\n            params.marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            encodedQuestions,\\n            realityProxy\\n        );\\n\\n        emit NewMarket(\\n            address(instance),\\n            params.marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            encodedQuestions\\n        );\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    function encodeRealityQuestionWithOutcomes(\\n        string memory question,\\n        string[] calldata outcomes,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        bytes memory encodedOutcomes = abi.encodePacked('\\\"', outcomes[0], '\\\"');\\n\\n        for (uint256 i = 1; i < outcomes.length; i++) {\\n            encodedOutcomes = abi.encodePacked(\\n                encodedOutcomes,\\n                ',\\\"',\\n                outcomes[i],\\n                '\\\"'\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    question,\\n                    separator,\\n                    encodedOutcomes,\\n                    separator,\\n                    category,\\n                    separator,\\n                    lang\\n                )\\n            );\\n    }\\n\\n    function encodeRealityQuestionWithoutOutcomes(\\n        string memory question,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(question, separator, category, separator, lang)\\n            );\\n    }\\n\\n    function askRealityQuestion(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(\\n            abi.encodePacked(templateId, openingTime, question)\\n        );\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash,\\n                arbitrator,\\n                questionTimeout,\\n                minBond,\\n                address(realitio),\\n                address(this),\\n                uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            return question_id;\\n        }\\n\\n        return\\n            realitio.askQuestionWithMinBond(\\n                templateId,\\n                question,\\n                arbitrator,\\n                questionTimeout,\\n                openingTime,\\n                0,\\n                minBond\\n            );\\n    }\\n\\n    function prepareCondition(\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) internal returns (bytes32) {\\n        conditionalTokens.prepareCondition(\\n            address(realityProxy),\\n            questionId,\\n            outcomeSlotCount\\n        );\\n\\n        return\\n            conditionalTokens.getConditionId(\\n                address(realityProxy),\\n                questionId,\\n                outcomeSlotCount\\n            );\\n    }\\n\\n    function deployERC20Positions(\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        string[] memory tokenNames\\n    ) internal {\\n        uint256 invalidResultIndex = outcomeSlotCount - 1;\\n\\n        for (uint j = 0; j < outcomeSlotCount; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\n                bytes32(0),\\n                conditionId,\\n                1 << j\\n            );\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                collateralToken,\\n                collectionId\\n            );\\n\\n            require(\\n                j == invalidResultIndex || bytes(tokenNames[j]).length != 0,\\n                \\\"Missing token name\\\"\\n            );\\n\\n            wrappedERC20Factory.createWrappedToken(\\n                address(conditionalTokens),\\n                tokenId,\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j],\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j]\\n            );\\n        }\\n    }\\n\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x1d412e764d8cfffd218dc9404bb6d9eec751c3cdf4e64da72ffbac6c87e364b5\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    // @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0xba17113731798a0e70233bc5457da6102efe431d8f47175702891bdfe1807e97\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x35a1d4062559f61fc60ba6b713b9853ac74bbb00d135282eb7bf15005cf40419\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806361371325116100ad578063b2016bd411610071578063b2016bd4146102c4578063bc8802a2146102eb578063d216050614610312578063e4c0aaf414610325578063ec9790821461033857600080fd5b8063613713251461023d5780636cc6cde11461026457806376f246311461028b57806380f556051461029e578063b1283e77146102b157600080fd5b8063375a7cba116100f4578063375a7cba146101c857806355fe791c146101dd5780635b137c49146101f05780635bd9e299146102035780635c3ef4271461022a57600080fd5b80630c340a241461013157806310af50ac146101615780631ba18b9b146101765780632ff8d5041461019b57806331ebb671146101b5575b600080fd5b600154610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017461016f3660046118d9565b610349565b005b6000546101869063ffffffff1681565b60405163ffffffff9091168152602001610158565b60005461014490600160201b90046001600160a01b031681565b6101446101c33660046118fd565b6103a9565b6101d06105f2565b6040516101589190611938565b6101446101eb3660046118fd565b610654565b6101446101fe3660046118fd565b6107bb565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b6101746102383660046118d9565b610abd565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b6101446102993660046118fd565b610b09565b600354610144906001600160a01b031681565b6101446102bf366004611985565b610d74565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b6101447f000000000000000000000000000000000000000000000000000000000000000081565b6101746103203660046119bb565b610d9e565b6101746103333660046118d9565b610de4565b600254604051908152602001610158565b6001546001600160a01b0316331461037c5760405162461bcd60e51b8152600401610373906119d8565b60405180910390fd5b600080546001600160a01b03909216600160201b02640100000000600160c01b0319909216919091179055565b600060026103ba6020840184611a00565b905010156103da5760405162461bcd60e51b815260040161037390611a50565b60006103e96020840184611a00565b6103f591506001611a96565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816104105790505090506104ff6104348580611abf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610476925050506020870187611a00565b6104836040890189611abf565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104c59250505060608a018a611abf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e3092505050565b8160008151811061051257610512611b05565b602002602001018190525060008061055f8360008151811061053657610536611b05565b602090810291909101015160026105546101008a0160e08b016119bb565b8960c0013588610f48565b6040805160018082528183019092529294509092506000919060208083019080368337019050509050828160008151811061059c5761059c611b05565b602090810291909101015260006105e66105b589611c75565b866040518060a001604052808881526020018681526020018781526020018a8152602001600260ff16815250610f6f565b98975050505050505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561064a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161062c575b5050505050905090565b600060026106656020840184611a00565b905010156106855760405162461bcd60e51b815260040161037390611a50565b60006106946020840184611a00565b6106a091506001611a96565b60408051600180825281830190925291925060009190816020015b60608152602001906001900390816106bb5790505090506106df6104348580611abf565b816000815181106106f2576106f2611b05565b60200260200101819052506000806107348360008151811061071657610716611b05565b602090810291909101015160036105546101008a0160e08b016119bb565b6040805160018082528183019092529294509092506000919060208083019080368337019050509050828160008151811061077157610771611b05565b602090810291909101015260006105e661078a89611c75565b866040518060a001604052808881526020018681526020018781526020018a8152602001600360ff16815250610f6f565b600060026107cc6020840184611a00565b905010156107ec5760405162461bcd60e51b815260040161037390611a50565b60006107fb6020840184611a00565b61080791506001611a96565b905060006108186020850185611a00565b90506001600160401b0381111561083157610831611aa9565b60405190808252806020026020018201604052801561085a578160200160208202803683370190505b509050600061086c6020860186611a00565b90506001600160401b0381111561088557610885611aa9565b6040519080825280602002602001820160405280156108b857816020015b60608152602001906001900390816108a35790505b50905060005b6108cb6020870187611a00565b9050811015610a44576109bb6108e18780611abf565b6108ee60208a018a611a00565b858181106108fe576108fe611b05565b90506020028101906109109190611abf565b6040516020016109239493929190611d85565b60408051601f1981840301815291815261093f90890189611abf565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109819250505060608a018a611abf565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061110c92505050565b8282815181106109cd576109cd611b05565b6020026020010181905250610a158282815181106109ed576109ed611b05565b60209081029190910101516001610a0b6101008a0160e08b016119bb565b8960c0013561116c565b838281518110610a2757610a27611b05565b602090810291909101015280610a3c81611dfc565b9150506108be565b50600082604051602001610a589190611e50565b6040516020818303038152906040528051906020012090506000610a7c82866113ca565b905060006105e6610a8c89611c75565b856040518060a001604052808781526020018981526020018681526020018a8152602001600160ff16815250610f6f565b6001546001600160a01b03163314610ae75760405162461bcd60e51b8152600401610373906119d8565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600081608001358260a0013511610b535760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b6044820152606401610373565b610b606002600019611e63565b8260a0013510610ba75760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081a1a59da081c1bda5b9d60721b6044820152606401610373565b610bb46020830183611a00565b9050600214610bd55760405162461bcd60e51b815260040161037390611a50565b60408051600180825281830190925260039160009190816020015b6060815260200190600190039081610bf0579050509050610c98610c148580611abf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c56925050506040870187611abf565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610981925050506060880188611abf565b81600081518110610cab57610cab611b05565b6020026020010181905250600080610ced83600081518110610ccf57610ccf611b05565b602090810291909101015160016105546101008a0160e08b016119bb565b60408051600180825281830190925292945090925060009190602080830190803683370190505090508281600081518110610d2a57610d2a611b05565b602090810291909101015260006105e6610d4389611c75565b866040518060a001604052808881526020018681526020018781526020018a8152602001600160ff16815250610f6f565b60028181548110610d8457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b03163314610dc85760405162461bcd60e51b8152600401610373906119d8565b6000805463ffffffff191663ffffffff92909216919091179055565b6001546001600160a01b03163314610e0e5760405162461bcd60e51b8152600401610373906119d8565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60606000604051602001610e4d9062e2909f60e81b815260030190565b6040516020818303038152906040529050600086866000818110610e7357610e73611b05565b9050602002810190610e859190611abf565b604051602001610e96929190611e76565b60408051601f19818403018152919052905060015b86811015610f0e5781888883818110610ec657610ec6611b05565b9050602002810190610ed89190611abf565b604051602001610eea93929190611ec1565b60405160208183030381529060405291508080610f0690611dfc565b915050610eab565b5087828284888689604051602001610f2c9796959493929190611f00565b6040516020818303038152906040529250505095945050505050565b600080610f578787878761116c565b9150610f6382846113ca565b90509550959350505050565b6003546000908190610f89906001600160a01b0316611500565b9050610fa383604001518460600151876101000151611572565b806001600160a01b03166312e24aa48660000151876020015188608001518960a00151886040015189600001518a602001518b608001518d600060049054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016110169a99989796959493929190612013565b600060405180830381600087803b15801561103057600080fd5b505af1158015611044573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928660000151876020015188608001518960a00151886040015189600001518a602001518b608001518d6040516110b1999897969594939291906120a3565b60405180910390a2600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b038316179055949350505050565b606060006040516020016111299062e2909f60e81b815260030190565b60405160208183030381529060405290508481858386604051602001611153959493929190612122565b6040516020818303038152906040529150509392505050565b6000808484876040516020016111849392919061218d565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e591906121c6565b63ffffffff16156112f95791506113c29050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c49261137a928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d906004016121e3565b6020604051808303816000875af1158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd9190612233565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee7549261142992600160201b909204909116908790879060040161224c565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae293506114b692600160201b900416908790879060040161224c565b602060405180830381865afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f79190612233565b90505b92915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b03811661156d576040516330be1a3d60e21b815260040160405180910390fd5b919050565b600061157f600184611e63565b905060005b838110156118ba5760405163856296f760e01b8152600060048201819052602482018790526001831b6044830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190612233565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612233565b90508383148061170a57508483815181106116fc576116fc611b05565b602002602001015151600014155b61174b5760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b6044820152606401610373565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f0000000000000000000000000000000000000000000000000000000000000000838787146117c2578887815181106117b5576117b5611b05565b60200260200101516117ef565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b8888146118155789888151811061180857611808611b05565b6020026020010151611842565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b8152600401611861949392919061226d565b6020604051808303816000875af1158015611880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a491906122b1565b50505080806118b290611dfc565b915050611584565b5050505050565b6001600160a01b03811681146118d657600080fd5b50565b6000602082840312156118eb57600080fd5b81356118f6816118c1565b9392505050565b60006020828403121561190f57600080fd5b81356001600160401b0381111561192557600080fd5b820161012081850312156118f657600080fd5b6020808252825182820181905260009190848201906040850190845b818110156119795783516001600160a01b031683529284019291840191600101611954565b50909695505050505050565b60006020828403121561199757600080fd5b5035919050565b63ffffffff811681146118d657600080fd5b803561156d8161199e565b6000602082840312156119cd57600080fd5b81356118f68161199e565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b6000808335601e19843603018112611a1757600080fd5b8301803591506001600160401b03821115611a3157600080fd5b6020019150600581901b3603821315611a4957600080fd5b9250929050565b602080825260169082015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156114fa576114fa611a80565b634e487b7160e01b600052604160045260246000fd5b6000808335601e19843603018112611ad657600080fd5b8301803591506001600160401b03821115611af057600080fd5b602001915036819003821315611a4957600080fd5b634e487b7160e01b600052603260045260246000fd5b60405161012081016001600160401b0381118282101715611b3e57611b3e611aa9565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611b6c57611b6c611aa9565b604052919050565b600082601f830112611b8557600080fd5b81356001600160401b03811115611b9e57611b9e611aa9565b611bb1601f8201601f1916602001611b44565b818152846020838601011115611bc657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611bf457600080fd5b813560206001600160401b0380831115611c1057611c10611aa9565b8260051b611c1f838201611b44565b9384528581018301938381019088861115611c3957600080fd5b84880192505b858310156105e657823584811115611c575760008081fd5b611c658a87838c0101611b74565b8352509184019190840190611c3f565b60006101208236031215611c8857600080fd5b611c90611b1b565b82356001600160401b0380821115611ca757600080fd5b611cb336838701611b74565b83526020850135915080821115611cc957600080fd5b611cd536838701611be3565b60208401526040850135915080821115611cee57600080fd5b611cfa36838701611b74565b60408401526060850135915080821115611d1357600080fd5b611d1f36838701611b74565b60608401526080850135608084015260a085013560a084015260c085013560c0840152611d4e60e086016119b0565b60e084015261010091508185013581811115611d6957600080fd5b611d7536828801611be3565b8385015250505080915050919050565b702337b9103a34329036b0b935b2ba102e1160791b81528385601183013760008482017f5c222c20776861742077696c6c206265207468652076616c756520666f72205c6011820152601160f91b603182015283856032830137625c223f60e81b9301603281019390935250506035019392505050565b600060018201611e0e57611e0e611a80565b5060010190565b600081518084526020808501945080840160005b83811015611e4557815187529582019590820190600101611e29565b509495945050505050565b6020815260006114f76020830184611e15565b818103818111156114fa576114fa611a80565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b60005b83811015611eb8578181015183820152602001611ea0565b50506000910152565b60008451611ed3818460208901611e9d565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b600088516020611f138285838e01611e9d565b895191840191611f268184848e01611e9d565b8951920191611f388184848d01611e9d565b8851920191611f4a8184848c01611e9d565b8751920191611f5c8184848b01611e9d565b8651920191611f6e8184848a01611e9d565b8551920191611f808184848901611e9d565b919091019a9950505050505050505050565b60008151808452611faa816020860160208601611e9d565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612006578284038952611ff4848351611f92565b98850198935090840190600101611fdc565b5091979650505050505050565b60006101408083526120278184018e611f92565b9050828103602084015261203b818d611fbe565b90508a60408401528960608401528860808401528760a084015282810360c08401526120678188611e15565b90508560e08401528281036101008401526120828186611fbe565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526120b78184018d611f92565b905082810360208401526120cb818c611fbe565b90508960408401528860608401528760808401528660a084015282810360c08401526120f78187611e15565b90508460e08401528281036101008401526121128185611fbe565b9c9b505050505050505050505050565b60008651612134818460208b01611e9d565b865190830190612148818360208b01611e9d565b865191019061215b818360208a01611e9d565b855191019061216e818360208901611e9d565b8451910190612181818360208801611e9d565b01979650505050505050565b83815263ffffffff60e01b8360e01b166020820152600082516121b7816024850160208701611e9d565b91909101602401949350505050565b6000602082840312156121d857600080fd5b81516118f68161199e565b87815260e0602082015260006121fc60e0830189611f92565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b60006020828403121561224557600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b60018060a01b03851681528360208201526080604082015260006122946080830185611f92565b82810360608401526122a68185611f92565b979650505050505050565b6000602082840312156122c357600080fd5b81516118f6816118c156fea26469706673582212201e8585597e3c2b4b6ced3ab050abaf4d6f57bca44f97a03807fb2857d4b6eb7964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_governor": "Address of the governor of this contract.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_questionTimeout": "Reality question timeout.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 516,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "questionTimeout",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 532,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "realityProxy",
        "offset": 4,
        "slot": "0",
        "type": "t_contract(RealityProxy)2111"
      },
      {
        "astId": 534,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 537,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 539,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)2111": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}