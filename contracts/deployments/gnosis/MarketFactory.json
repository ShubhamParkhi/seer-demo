{
  "address": "0xcBBbABD15895ae7b2e28BE6f250729098F1c69FA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "encodedQuestions",
          "type": "string[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "QUESTION_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "changeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6559b00e5b15b20029c71babf1cfb21cdd132b9a3516b60f5eead8b638ba95fd",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xcBBbABD15895ae7b2e28BE6f250729098F1c69FA",
    "transactionIndex": 26,
    "gasUsed": "1450878",
    "logsBloom": "0x
    "blockHash": "0xe44fe81f27fc5d851591f4dde2cffde7f1c8200a6d0e2181cf9aec33d750cdc4",
    "transactionHash": "0x6559b00e5b15b20029c71babf1cfb21cdd132b9a3516b60f5eead8b638ba95fd",
    "logs": [],
    "blockNumber": 32986755,
    "cumulativeGasUsed": "8521899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03d03464BF9Eb20059Ca6eF6391E9C5d79d5E012",
    "0xe40DD83a262da3f56976038F1554Fe541Fa75ecd",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0xFb4c45a988F70D0f8eFb5Ab3A7feB00D463c16B7",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
    "0x4edca105188a0783ab3a6f09c50567d1e3f8591d"
  ],
  "numDeployments": 4,
  "solcInputHash": "11eb862ec6512cd49d79509f516a41bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"QUESTION_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"changeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_governor\":\"Address of the governor of this contract.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    struct CreateMarketParams {\\n        string marketName;\\n        string[] encodedQuestions;\\n        string[] outcomes;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        uint256 minBond;\\n        uint32 openingTime;\\n        string[] tokenNames;\\n    }\\n\\n    struct InternalMarketConfig {\\n        bytes32 questionId;\\n        bytes32[] questionsIds;\\n        bytes32 conditionId;\\n        uint256 outcomeSlotCount;\\n        uint256 templateId;\\n    }\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n\\n    uint32 public constant QUESTION_TIMEOUT = 1.5 days;\\n\\n    address public immutable arbitrator;\\n    IRealityETH_v3_0 public immutable realitio;\\n    WrappedERC20Factory public immutable wrappedERC20Factory;\\n    IConditionalTokens public immutable conditionalTokens;\\n    address public immutable collateralToken;\\n    RealityProxy public immutable realityProxy;\\n    address public governor;\\n    address[] public markets;\\n    address public market;\\n\\n    event NewMarket(\\n        address indexed market,\\n        string marketName,\\n        string[] outcomes,\\n        uint256 lowerBound,\\n        uint256 upperBound,\\n        bytes32 conditionId,\\n        bytes32 questionId,\\n        bytes32[] questionsIds,\\n        uint256 templateId,\\n        string[] encodedQuestions\\n    );\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _governor Address of the governor of this contract.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        WrappedERC20Factory _wrappedERC20Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        address _governor\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        governor = _governor;\\n    }\\n\\n    function changeGovernor(address _governor) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        governor = _governor;\\n    }\\n\\n    function changeMarket(address _market) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        market = _market;\\n    }\\n\\n    function createCategoricalMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            params.encodedQuestions[0],\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            params.outcomes.length,\\n            address(realityProxy)\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: params.outcomes.length,\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createScalarMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(params.upperBound > params.lowerBound, \\\"Invalid bounds\\\");\\n        require(params.outcomes.length == 2, \\\"Invalid outcomes\\\");\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            params.encodedQuestions[0],\\n            REALITY_UINT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            params.outcomes.length,\\n            address(realityProxy)\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: 2,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createMultiScalarMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(\\n            params.outcomes.length == params.encodedQuestions.length,\\n            \\\"Lenght mismatch\\\"\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\n\\n        bytes32 questionId = bytes32(0);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            questionsIds[i] = askRealityQuestion(\\n                params.encodedQuestions[i],\\n                REALITY_UINT_TEMPLATE,\\n                params.openingTime,\\n                params.minBond\\n            );\\n\\n            questionId = keccak256(\\n                abi.encodePacked(questionId, questionsIds[i])\\n            );\\n        }\\n\\n        bytes32 conditionId = prepareCondition(\\n            questionId,\\n            params.outcomes.length,\\n            address(realityProxy)\\n        );\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: params.outcomes.length,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function setUpQuestionAndCondition(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond,\\n        uint256 outcomeSlotCount,\\n        address oracle\\n    ) internal returns (bytes32 questionId, bytes32 conditionId) {\\n        questionId = askRealityQuestion(\\n            question,\\n            templateId,\\n            openingTime,\\n            minBond\\n        );\\n\\n        conditionId = prepareCondition(questionId, outcomeSlotCount, oracle);\\n    }\\n\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        Market instance = Market(market.clone());\\n\\n        deployERC20Positions(\\n            config.conditionId,\\n            config.outcomeSlotCount,\\n            params.tokenNames\\n        );\\n        instance.initialize(\\n            params.marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            params.encodedQuestions,\\n            realityProxy\\n        );\\n\\n        emit NewMarket(\\n            address(instance),\\n            params.marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            params.encodedQuestions\\n        );\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    function askRealityQuestion(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(\\n            abi.encodePacked(templateId, openingTime, question)\\n        );\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash,\\n                arbitrator,\\n                QUESTION_TIMEOUT,\\n                minBond,\\n                address(realitio),\\n                address(this),\\n                uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            return question_id;\\n        }\\n\\n        return\\n            realitio.askQuestionWithMinBond(\\n                templateId,\\n                question,\\n                arbitrator,\\n                QUESTION_TIMEOUT,\\n                openingTime,\\n                0,\\n                minBond\\n            );\\n    }\\n\\n    function prepareCondition(\\n        bytes32 questionId,\\n        uint outcomeSlotCount,\\n        address oracle\\n    ) internal returns (bytes32) {\\n        conditionalTokens.prepareCondition(\\n            oracle,\\n            questionId,\\n            outcomeSlotCount\\n        );\\n\\n        return\\n            conditionalTokens.getConditionId(\\n                oracle,\\n                questionId,\\n                outcomeSlotCount\\n            );\\n    }\\n\\n    function deployERC20Positions(\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        string[] memory tokenNames\\n    ) internal {\\n        uint[] memory partition = generateBasicPartition(outcomeSlotCount);\\n        for (uint j = 0; j < partition.length; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\n                bytes32(0),\\n                conditionId,\\n                partition[j]\\n            );\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                collateralToken,\\n                collectionId\\n            );\\n\\n            require(bytes(tokenNames[j]).length != 0);\\n\\n            wrappedERC20Factory.createWrappedToken(\\n                address(conditionalTokens),\\n                tokenId,\\n                tokenNames[j],\\n                tokenNames[j]\\n            );\\n        }\\n    }\\n\\n    function generateBasicPartition(\\n        uint outcomeSlotCount\\n    ) private pure returns (uint[] memory partition) {\\n        partition = new uint[](outcomeSlotCount);\\n        for (uint i = 0; i < outcomeSlotCount; i++) {\\n            partition[i] = 1 << i;\\n        }\\n    }\\n\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x7c5965a995844329e846824fe732e2cab939efdc1e6064a5b19224d5e0be6a4e\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x5c929c278735afd1215c8205fab1c6ecdd341b1474629f85c8ce7de13806be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001a8d38038062001a8d8339810160408190526200003591620000a4565b600280546001600160a01b03998a166001600160a01b03199182161790915596881660805294871660a05292861660c05290851660e0528416610100528316610120526000805491909316911617905562000165565b6001600160a01b0381168114620000a157600080fd5b50565b600080600080600080600080610100898b031215620000c257600080fd5b8851620000cf816200008b565b60208a0151909850620000e2816200008b565b60408a0151909750620000f5816200008b565b60608a015190965062000108816200008b565b60808a01519095506200011b816200008b565b60a08a01519094506200012e816200008b565b60c08a015190935062000141816200008b565b60e08a015190925062000154816200008b565b809150509295985092959890939650565b60805160a05160c05160e05161010051610120516118686200022560003960008181610138015281816103a60152818161058901528181610796015261091b0152600081816102690152610eff01526000818161019301528181610ca101528181610d2101528181610e2c01528181610f340152610ff90152600081816101cf0152610fca01526000818161029001528181610ac201528181610b340152610bd201526000818161020901528181610a810152610c0301526118686000f3fe608060405234801561001057600080fd5b50600436106100eb5760003560e01c806362322c5d1161009257806362322c5d146101f15780636cc6cde114610204578063807bb32d1461022b57806380f556051461023e578063b1283e7714610251578063b2016bd414610264578063bc8802a21461028b578063e4c0aaf4146102b2578063ec979082146102c557600080fd5b80630c340a24146100f05780632b6ada67146101205780632ff8d50414610133578063375a7cba1461015a5780634a3382e51461016f5780635bd9e2991461018e5780635c3ef427146101b557806361371325146101ca575b600080fd5b600054610103906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010361012e3660046112f3565b6102d6565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b610162610451565b60405161011791906113fb565b6101796201fa4081565b60405163ffffffff9091168152602001610117565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101c86101c336600461145d565b6104b3565b005b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101036101ff3660046112f3565b6104ff565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101036102393660046112f3565b61062e565b600254610103906001600160a01b031681565b61010361025f366004611481565b6107f4565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101c86102c036600461145d565b61081e565b600154604051908152602001610117565b600081606001518260800151116103255760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b60448201526064015b60405180910390fd5b81604001515160021461036d5760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206f7574636f6d657360801b604482015260640161031c565b6000806103ca846020015160008151811061038a5761038a61149a565b602002602001015160018660c001518760a001518860400151517f000000000000000000000000000000000000000000000000000000000000000061086a565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106104075761040761149a565b6020026020010181815250506000610447866040518060a00160405280878152602001858152602001868152602001600281526020016001815250610893565b9695505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156104a957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161048b575b5050505050905090565b6000546001600160a01b031633146104dd5760405162461bcd60e51b815260040161031c906114b0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000600282604001515110156105505760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b604482015260640161031c565b6000806105ad846020015160008151811061056d5761056d61149a565b602002602001015160028660c001518760a001518860400151517f000000000000000000000000000000000000000000000000000000000000000061086a565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106105ea576105ea61149a565b6020026020010181815250506000610447866040518060a0016040528087815260200185815260200186815260200189604001515181526020016002815250610893565b60008160200151518260400151511461067b5760405162461bcd60e51b815260206004820152600f60248201526e098cadcced0e840dad2e6dac2e8c6d608b1b604482015260640161031c565b60008260400151516001600160401b0381111561069a5761069a611157565b6040519080825280602002602001820160405280156106c3578160200160208202803683370190505b5090506000805b84604001515181101561078757610709856020015182815181106106f0576106f061149a565b602002602001015160018760c001518860a00151610a3b565b83828151811061071b5761071b61149a565b6020026020010181815250508183828151811061073a5761073a61149a565b602002602001015160405160200161075c929190918252602082015260400190565b604051602081830303815290604052805190602001209150808061077f906114d8565b9150506106ca565b5060006107ba828660400151517f0000000000000000000000000000000000000000000000000000000000000000610c87565b90506000610447866040518060a0016040528086815260200187815260200185815260200189604001515181526020016001815250610893565b6001818154811061080457600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146108485760405162461bcd60e51b815260040161031c906114b0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061087988888888610a3b565b9150610886828585610c87565b9050965096945050505050565b60025460009081906108ad906001600160a01b0316610d9d565b90506108c6836040015184606001518660e00151610e0f565b835160408086015160608701516080808901518885015189516020808c0151948c0151908d015197516304b892a960e21b81526001600160a01b038b16996312e24aa4996109439991989197919695949391927f0000000000000000000000000000000000000000000000000000000000000000906004016115e2565b600060405180830381600087803b15801561095d57600080fd5b505af1158015610971573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928560000151866040015187606001518860800151886040015189600001518a602001518b608001518d602001516040516109e299989796959493929190611672565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383161790559392505050565b600080848487604051602001610a53939291906116f1565b60408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b8216938501939093526107e960e61b6054850152605884018790527f0000000000000000000000000000000000000000000000000000000000000000831b811660788501523090921b909116608c830152600060a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba7919061172a565b63ffffffff1615610bbb579150610c7f9050565b604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063484b93c490610c379089908b907f0000000000000000000000000000000000000000000000000000000000000000906201fa40908c906000908d90600401611747565b6020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190611797565b925050505b949350505050565b60405163365bb9d560e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d96ee75490610cda908590889088906004016117b0565b600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b5050604051634296357160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063852c6ae29150610d5c908590889088906004016117b0565b602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190611797565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116610e0a576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000610e1a836110cc565b905060005b81518110156110c55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f76000801b88868681518110610e7057610e7061149a565b60200260200101516040518463ffffffff1660e01b8152600401610ea7939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611797565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190611797565b9050848381518110610fb357610fb361149a565b602002602001015151600003610fc857600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f00000000000000000000000000000000000000000000000000000000000000008388878151811061102b5761102b61149a565b60200260200101518988815181106110455761104561149a565b60200260200101516040518563ffffffff1660e01b815260040161106c94939291906117d1565b6020604051808303816000875af115801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611815565b50505080806110bd906114d8565b915050610e1f565b5050505050565b6060816001600160401b038111156110e6576110e6611157565b60405190808252806020026020018201604052801561110f578160200160208202803683370190505b50905060005b8281101561115157806001901b8282815181106111345761113461149a565b602090810291909101015280611149816114d8565b915050611115565b50919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171561119057611190611157565b60405290565b604051601f8201601f191681016001600160401b03811182821017156111be576111be611157565b604052919050565b600082601f8301126111d757600080fd5b81356001600160401b038111156111f0576111f0611157565b611203601f8201601f1916602001611196565b81815284602083860101111561121857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261124657600080fd5b813560206001600160401b038083111561126257611262611157565b8260051b611271838201611196565b938452858101830193838101908886111561128b57600080fd5b84880192505b858310156112c7578235848111156112a95760008081fd5b6112b78a87838c01016111c6565b8352509184019190840190611291565b98975050505050505050565b63ffffffff811681146112e557600080fd5b50565b8035610e0a816112d3565b60006020828403121561130557600080fd5b81356001600160401b038082111561131c57600080fd5b90830190610100828603121561133157600080fd5b61133961116d565b82358281111561134857600080fd5b611354878286016111c6565b82525060208301358281111561136957600080fd5b61137587828601611235565b60208301525060408301358281111561138d57600080fd5b61139987828601611235565b604083015250606083013560608201526080830135608082015260a083013560a08201526113c960c084016112e8565b60c082015260e0830135828111156113e057600080fd5b6113ec87828601611235565b60e08301525095945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561143c5783516001600160a01b031683529284019291840191600101611417565b50909695505050505050565b6001600160a01b03811681146112e557600080fd5b60006020828403121561146f57600080fd5b813561147a81611448565b9392505050565b60006020828403121561149357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b6000600182016114f857634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561151a578181015183820152602001611502565b50506000910152565b6000815180845261153b8160208601602086016114ff565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561159a57601f19868403018952611588838351611523565b9884019892509083019060010161156c565b5090979650505050505050565b600081518084526020808501945080840160005b838110156115d7578151875295820195908201906001016115bb565b509495945050505050565b60006101408083526115f68184018e611523565b9050828103602084015261160a818d61154f565b90508a60408401528960608401528860808401528760a084015282810360c084015261163681886115a7565b90508560e0840152828103610100840152611651818661154f565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526116868184018d611523565b9050828103602084015261169a818c61154f565b90508960408401528860608401528760808401528660a084015282810360c08401526116c681876115a7565b90508460e08401528281036101008401526116e1818561154f565b9c9b505050505050505050505050565b83815263ffffffff60e01b8360e01b1660208201526000825161171b8160248501602087016114ff565b91909101602401949350505050565b60006020828403121561173c57600080fd5b815161147a816112d3565b87815260e06020820152600061176060e0830189611523565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156117a957600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b60018060a01b03851681528360208201526080604082015260006117f86080830185611523565b828103606084015261180a8185611523565b979650505050505050565b60006020828403121561182757600080fd5b815161147a8161144856fea2646970667358221220a79abaf17fe7539f09cbd3850410920532075012c5a09af90bf03f43179e72b264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100eb5760003560e01c806362322c5d1161009257806362322c5d146101f15780636cc6cde114610204578063807bb32d1461022b57806380f556051461023e578063b1283e7714610251578063b2016bd414610264578063bc8802a21461028b578063e4c0aaf4146102b2578063ec979082146102c557600080fd5b80630c340a24146100f05780632b6ada67146101205780632ff8d50414610133578063375a7cba1461015a5780634a3382e51461016f5780635bd9e2991461018e5780635c3ef427146101b557806361371325146101ca575b600080fd5b600054610103906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010361012e3660046112f3565b6102d6565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b610162610451565b60405161011791906113fb565b6101796201fa4081565b60405163ffffffff9091168152602001610117565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101c86101c336600461145d565b6104b3565b005b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101036101ff3660046112f3565b6104ff565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101036102393660046112f3565b61062e565b600254610103906001600160a01b031681565b61010361025f366004611481565b6107f4565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101c86102c036600461145d565b61081e565b600154604051908152602001610117565b600081606001518260800151116103255760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b60448201526064015b60405180910390fd5b81604001515160021461036d5760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964206f7574636f6d657360801b604482015260640161031c565b6000806103ca846020015160008151811061038a5761038a61149a565b602002602001015160018660c001518760a001518860400151517f000000000000000000000000000000000000000000000000000000000000000061086a565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106104075761040761149a565b6020026020010181815250506000610447866040518060a00160405280878152602001858152602001868152602001600281526020016001815250610893565b9695505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156104a957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161048b575b5050505050905090565b6000546001600160a01b031633146104dd5760405162461bcd60e51b815260040161031c906114b0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000600282604001515110156105505760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b604482015260640161031c565b6000806105ad846020015160008151811061056d5761056d61149a565b602002602001015160028660c001518760a001518860400151517f000000000000000000000000000000000000000000000000000000000000000061086a565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106105ea576105ea61149a565b6020026020010181815250506000610447866040518060a0016040528087815260200185815260200186815260200189604001515181526020016002815250610893565b60008160200151518260400151511461067b5760405162461bcd60e51b815260206004820152600f60248201526e098cadcced0e840dad2e6dac2e8c6d608b1b604482015260640161031c565b60008260400151516001600160401b0381111561069a5761069a611157565b6040519080825280602002602001820160405280156106c3578160200160208202803683370190505b5090506000805b84604001515181101561078757610709856020015182815181106106f0576106f061149a565b602002602001015160018760c001518860a00151610a3b565b83828151811061071b5761071b61149a565b6020026020010181815250508183828151811061073a5761073a61149a565b602002602001015160405160200161075c929190918252602082015260400190565b604051602081830303815290604052805190602001209150808061077f906114d8565b9150506106ca565b5060006107ba828660400151517f0000000000000000000000000000000000000000000000000000000000000000610c87565b90506000610447866040518060a0016040528086815260200187815260200185815260200189604001515181526020016001815250610893565b6001818154811061080457600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146108485760405162461bcd60e51b815260040161031c906114b0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061087988888888610a3b565b9150610886828585610c87565b9050965096945050505050565b60025460009081906108ad906001600160a01b0316610d9d565b90506108c6836040015184606001518660e00151610e0f565b835160408086015160608701516080808901518885015189516020808c0151948c0151908d015197516304b892a960e21b81526001600160a01b038b16996312e24aa4996109439991989197919695949391927f0000000000000000000000000000000000000000000000000000000000000000906004016115e2565b600060405180830381600087803b15801561095d57600080fd5b505af1158015610971573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928560000151866040015187606001518860800151886040015189600001518a602001518b608001518d602001516040516109e299989796959493929190611672565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383161790559392505050565b600080848487604051602001610a53939291906116f1565b60408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b8216938501939093526107e960e61b6054850152605884018790527f0000000000000000000000000000000000000000000000000000000000000000831b811660788501523090921b909116608c830152600060a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba7919061172a565b63ffffffff1615610bbb579150610c7f9050565b604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063484b93c490610c379089908b907f0000000000000000000000000000000000000000000000000000000000000000906201fa40908c906000908d90600401611747565b6020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190611797565b925050505b949350505050565b60405163365bb9d560e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d96ee75490610cda908590889088906004016117b0565b600060405180830381600087803b158015610cf457600080fd5b505af1158015610d08573d6000803e3d6000fd5b5050604051634296357160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063852c6ae29150610d5c908590889088906004016117b0565b602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190611797565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116610e0a576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000610e1a836110cc565b905060005b81518110156110c55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f76000801b88868681518110610e7057610e7061149a565b60200260200101516040518463ffffffff1660e01b8152600401610ea7939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611797565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190611797565b9050848381518110610fb357610fb361149a565b602002602001015151600003610fc857600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f00000000000000000000000000000000000000000000000000000000000000008388878151811061102b5761102b61149a565b60200260200101518988815181106110455761104561149a565b60200260200101516040518563ffffffff1660e01b815260040161106c94939291906117d1565b6020604051808303816000875af115801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611815565b50505080806110bd906114d8565b915050610e1f565b5050505050565b6060816001600160401b038111156110e6576110e6611157565b60405190808252806020026020018201604052801561110f578160200160208202803683370190505b50905060005b8281101561115157806001901b8282815181106111345761113461149a565b602090810291909101015280611149816114d8565b915050611115565b50919050565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171561119057611190611157565b60405290565b604051601f8201601f191681016001600160401b03811182821017156111be576111be611157565b604052919050565b600082601f8301126111d757600080fd5b81356001600160401b038111156111f0576111f0611157565b611203601f8201601f1916602001611196565b81815284602083860101111561121857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261124657600080fd5b813560206001600160401b038083111561126257611262611157565b8260051b611271838201611196565b938452858101830193838101908886111561128b57600080fd5b84880192505b858310156112c7578235848111156112a95760008081fd5b6112b78a87838c01016111c6565b8352509184019190840190611291565b98975050505050505050565b63ffffffff811681146112e557600080fd5b50565b8035610e0a816112d3565b60006020828403121561130557600080fd5b81356001600160401b038082111561131c57600080fd5b90830190610100828603121561133157600080fd5b61133961116d565b82358281111561134857600080fd5b611354878286016111c6565b82525060208301358281111561136957600080fd5b61137587828601611235565b60208301525060408301358281111561138d57600080fd5b61139987828601611235565b604083015250606083013560608201526080830135608082015260a083013560a08201526113c960c084016112e8565b60c082015260e0830135828111156113e057600080fd5b6113ec87828601611235565b60e08301525095945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561143c5783516001600160a01b031683529284019291840191600101611417565b50909695505050505050565b6001600160a01b03811681146112e557600080fd5b60006020828403121561146f57600080fd5b813561147a81611448565b9392505050565b60006020828403121561149357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b6000600182016114f857634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561151a578181015183820152602001611502565b50506000910152565b6000815180845261153b8160208601602086016114ff565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561159a57601f19868403018952611588838351611523565b9884019892509083019060010161156c565b5090979650505050505050565b600081518084526020808501945080840160005b838110156115d7578151875295820195908201906001016115bb565b509495945050505050565b60006101408083526115f68184018e611523565b9050828103602084015261160a818d61154f565b90508a60408401528960608401528860808401528760a084015282810360c084015261163681886115a7565b90508560e0840152828103610100840152611651818661154f565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526116868184018d611523565b9050828103602084015261169a818c61154f565b90508960408401528860608401528760808401528660a084015282810360c08401526116c681876115a7565b90508460e08401528281036101008401526116e1818561154f565b9c9b505050505050505050505050565b83815263ffffffff60e01b8360e01b1660208201526000825161171b8160248501602087016114ff565b91909101602401949350505050565b60006020828403121561173c57600080fd5b815161147a816112d3565b87815260e06020820152600061176060e0830189611523565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156117a957600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b60018060a01b03851681528360208201526080604082015260006117f86080830185611523565b828103606084015261180a8185611523565b979650505050505050565b60006020828403121561182757600080fd5b815161147a8161144856fea2646970667358221220a79abaf17fe7539f09cbd3850410920532075012c5a09af90bf03f43179e72b264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_governor": "Address of the governor of this contract.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1966,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1969,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1971,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}