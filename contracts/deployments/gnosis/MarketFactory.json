{
  "address": "0xa9912171C79200F9572fe0ABd209532a0712Ce33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperBound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "encodedQuestions",
          "type": "string[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4945183d65d9377c1a6035f6e80b86483f9d464bbc8b6e263b2e46d0967d74d2",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xa9912171C79200F9572fe0ABd209532a0712Ce33",
    "transactionIndex": 2,
    "gasUsed": "1982509",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x75f6adb235162f60f5d8826392ca50ca53a1623be54612de77f7cc207a21152d",
    "transactionHash": "0x4945183d65d9377c1a6035f6e80b86483f9d464bbc8b6e263b2e46d0967d74d2",
    "logs": [],
    "blockNumber": 35273404,
    "cumulativeGasUsed": "2304131",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaB903CdAf1068E86018F098c369B0A645c3F98Ac",
    "0x29F39dE98D750eb77b5FAfb31B2837f079FcE222",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0x5bc8ddE5D07C6bf24911240AA6F9B0190ae3b557",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xee30cb9D605E04B4068fc09b30e182CF03503490",
    302400
  ],
  "numDeployments": 15,
  "solcInputHash": "a7b6681d59548aa215c1486481ab56ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"events\":{\"NewMarket(address,string,string[],uint256,uint256,bytes32,bytes32,bytes32[],uint256,string[])\":{\"details\":\"To be emitted when a new market is created\"}},\"kind\":\"dev\",\"methods\":{\"allMarkets()\":{\"details\":\"Returns all the markets created by this factory\",\"returns\":{\"_0\":\"The addresses of the markets\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_questionTimeout\":\"Reality question timeout.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}},\"createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Categorical market. Reverts if a market with the same question already exists.\"},\"createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Scalar market\"},\"createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Scalar market. Reverts if a market with the same question already exists.\"},\"marketCount()\":{\"returns\":{\"_0\":\"The amount of markets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Categorical markets are associated with a Reality question that has only one answer\"},\"createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Categorical markets are associated with a Reality question that has one or more answers\"},\"createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\"},\"createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Scalar markets are associated with a Reality question that resolves to a numeric value\"},\"marketCount()\":{\"notice\":\"Returns the amount of markets created by this factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interaction/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"src/interaction/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/interaction/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    bytes32 public conditionId; // Conditional Tokens conditionId\\n    bytes32 public questionId; // Conditional Tokens questionId\\n    bytes32[] public questionsIds; // Reality questions ids\\n    uint256 public templateId; // Reality templateId\\n    string[] public encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionId Conditional Tokens conditionId\\n    /// @param _questionId Conditional Tokens questionId\\n    /// @param _questionsIds Reality questions ids\\n    /// @param _templateId Reality templateId\\n    /// @param _encodedQuestions Encoded questions parameters, needed to create and reopen a question\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return questionsCount The number of Reality questions of this market\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xaf9ef35b91e3559c4dafafc04a8d31927735e2768ad9823ad3a3a465a14f4971\",\"license\":\"MIT\"},\"src/interaction/MarketFactory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct CreateMarketParams {\\n        string marketName; // The name of the market\\n        string[] outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n        string questionStart; // Used to build the Reality question on multi scalar markets\\n        string questionEnd; // Used to build the Reality question on multi scalar markets\\n        string outcomeType; // Used to build the Reality question on multi scalar markets\\n        string category; // Reality question category\\n        string lang; // Reality question language\\n        uint256 lowerBound; // Lower bound, only used for scalar markets\\n        uint256 upperBound; // Upper bound, only user for scalar markets\\n        uint256 minBond; // Min bond to use on Reality\\n        uint32 openingTime; // Reality question opening time\\n        string[] tokenNames; // Name of the ERC20 tokens associated to each outcome\\n    }\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct InternalMarketConfig {\\n        bytes32 questionId; // Conditional Tokens questionId\\n        bytes32[] questionsIds; // Reality questions ids\\n        bytes32 conditionId; // Conditional Tokens conditionId\\n        uint256 outcomeSlotCount; // Conditional Tokens outcomeSlotCount\\n        uint256 templateId; // Reality templateId\\n    }\\n\\n    uint8 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint8 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint8 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    uint32 public questionTimeout; // Reality question timeout\\n\\n    address public immutable arbitrator; // Arbitrator contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n    WrappedERC20Factory public immutable wrappedERC20Factory; // WrappedERC20Factory contract\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    address public immutable collateralToken; // Conditional Tokens collateral token contract\\n    RealityProxy public realityProxy; // Oracle contract\\n    address[] public markets; // Markets created by this factory\\n    address public market; // Market contract\\n\\n    /// @dev To be emitted when a new market is created\\n    event NewMarket(\\n        address indexed market,\\n        string marketName,\\n        string[] outcomes,\\n        uint256 lowerBound,\\n        uint256 upperBound,\\n        bytes32 conditionId,\\n        bytes32 questionId,\\n        bytes32[] questionsIds,\\n        uint256 templateId,\\n        string[] encodedQuestions\\n    );\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _questionTimeout Reality question timeout.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        WrappedERC20Factory _wrappedERC20Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        uint32 _questionTimeout\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        questionTimeout = _questionTimeout;\\n    }\\n\\n    /// @dev Creates a Categorical market. Reverts if a market with the same question already exists.\\n    /// @notice Categorical markets are associated with a Reality question that has only one answer\\n    function createCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Multi Categorical market. Reverts if a market with the same question already exists.\\n    /// @notice Multi Categorical markets are associated with a Reality question that has one or more answers\\n    function createMultiCategoricalMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithOutcomes(\\n            params.marketName,\\n            params.outcomes,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_MULTI_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_MULTI_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Scalar market. Reverts if a market with the same question already exists.\\n    /// @notice Scalar markets are associated with a Reality question that resolves to a numeric value\\n    function createScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.upperBound > params.lowerBound, \\\"Invalid bounds\\\");\\n        // values reserved by Reality for INVALID and UNRESOLVED_ANSWER\\n        require(\\n            params.upperBound < type(uint256).max - 2,\\n            \\\"Invalid high point\\\"\\n        );\\n        require(params.outcomes.length == 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = 3; // additional outcome for Invalid Result\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithoutOutcomes(\\n            params.marketName,\\n            params.category,\\n            params.lang\\n        );\\n\\n        bytes32 questionId = askRealityQuestion(\\n            encodedQuestions[0],\\n            REALITY_UINT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond\\n        );\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            params.marketName,\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates a Multi Scalar market\\n    /// @notice Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value\\n    function createMultiScalarMarket(\\n        CreateMarketParams calldata params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        uint256 outcomeSlotCount = params.outcomes.length + 1; // additional outcome for Invalid Result\\n\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\n\\n        string[] memory encodedQuestions = new string[](params.outcomes.length);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            encodedQuestions[i] = encodeRealityQuestionWithoutOutcomes(\\n                string(\\n                    abi.encodePacked(\\n                        params.questionStart,\\n                        params.outcomes[i],\\n                        params.questionEnd\\n                    )\\n                ),\\n                params.category,\\n                params.lang\\n            );\\n\\n            questionsIds[i] = askRealityQuestion(\\n                encodedQuestions[i],\\n                REALITY_UINT_TEMPLATE,\\n                params.openingTime,\\n                params.minBond\\n            );\\n        }\\n        bytes32 questionId = keccak256(abi.encode(questionsIds));\\n\\n        bytes32 conditionId = prepareCondition(questionId, outcomeSlotCount);\\n\\n        address marketId = createMarket(\\n            params,\\n            string(\\n                abi.encodePacked(\\n                    params.questionStart,\\n                    params.outcomeType,\\n                    params.questionEnd\\n                )\\n            ),\\n            encodedQuestions,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: outcomeSlotCount,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    /// @dev Creates the Market and deploys the wrapped ERC20 tokens\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        string memory marketName,\\n        string[] memory encodedQuestions,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        Market instance = Market(market.clone());\\n\\n        deployERC20Positions(\\n            config.conditionId,\\n            config.outcomeSlotCount,\\n            params.tokenNames\\n        );\\n        instance.initialize(\\n            marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            encodedQuestions,\\n            realityProxy\\n        );\\n\\n        emit NewMarket(\\n            address(instance),\\n            marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            encodedQuestions\\n        );\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    /// @dev Encodes the question, outcomes, category and language following the Reality structure\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\n    /// @param question The question text\\n    /// @param outcomes[] The question outcomes\\n    /// @param category The question category\\n    /// @param lang The question language\\n    /// @return The encoded question\\n    function encodeRealityQuestionWithOutcomes(\\n        string memory question,\\n        string[] calldata outcomes,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        bytes memory encodedOutcomes = abi.encodePacked('\\\"', outcomes[0], '\\\"');\\n\\n        for (uint256 i = 1; i < outcomes.length; i++) {\\n            encodedOutcomes = abi.encodePacked(\\n                encodedOutcomes,\\n                ',\\\"',\\n                outcomes[i],\\n                '\\\"'\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    question,\\n                    separator,\\n                    encodedOutcomes,\\n                    separator,\\n                    category,\\n                    separator,\\n                    lang\\n                )\\n            );\\n    }\\n\\n    /// @dev Encodes the question, category and language following the Reality structure\\n    /// If any parameter has a special character like quotes, it must be properly escaped\\n    /// @param question The question text\\n    /// @param category The question category\\n    /// @param lang The question language\\n    /// @return The encoded question\\n    function encodeRealityQuestionWithoutOutcomes(\\n        string memory question,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(question, separator, category, separator, lang)\\n            );\\n    }\\n\\n    /// @dev Asks a question on reality.\\n    /// Duplicated markets are not allowed, so for Categorical, Multi Categorical, and Scalar markets the same question can be asked only once.\\n    /// If the same question is asked again, it will not revert here but on ConditionalTokens.prepareCondition().\\n    /// We allow here to share a question between a Scalar and a Multi Scalar market or between Multi Scalar markets with different number of questions.\\n    /// @param encodedQuestion The encoded question containing the Reality parameters\\n    /// @param templateId The Reality template id\\n    /// @param openingTime The question opening time\\n    /// @param minBond The question min bond\\n    /// @return The question id\\n    function askRealityQuestion(\\n        string memory encodedQuestion,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(\\n            abi.encodePacked(templateId, openingTime, encodedQuestion)\\n        );\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash,\\n                arbitrator,\\n                questionTimeout,\\n                minBond,\\n                address(realitio),\\n                address(this),\\n                uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            /* This allows to share a question between a scalar and a multi scalar market, or between multi scalar markets.\\n             *\\n             * Example 1:\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\n             * Scalar market with the question: \\\"How many votes will Alice receive?\\\"\\n             *\\n             * Both markets will use the same question for Alice.\\n             *\\n             * Example 2:\\n             * Multi scalar market with two questions: \\\"How many votes will Alice receive?\\\" and \\\"How many votes will Bob receive?\\\"\\n             * Multi Scalar market with three questions: \\\"How many votes will Alice receive?\\\", \\\"How many votes will Bob receive?\\\" and \\\"How many votes will David receive?\\\"\\n             *\\n             * Both markets will use the same question for Alice and Bob.\\n             */\\n            return question_id;\\n        }\\n\\n        return\\n            realitio.askQuestionWithMinBond(\\n                templateId,\\n                encodedQuestion,\\n                arbitrator,\\n                questionTimeout,\\n                openingTime,\\n                0,\\n                minBond\\n            );\\n    }\\n\\n    /// @dev Prepares the CTF condition and returns the conditionId\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function prepareCondition(\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) internal returns (bytes32) {\\n        conditionalTokens.prepareCondition(\\n            address(realityProxy),\\n            questionId,\\n            outcomeSlotCount\\n        );\\n\\n        return\\n            conditionalTokens.getConditionId(\\n                address(realityProxy),\\n                questionId,\\n                outcomeSlotCount\\n            );\\n    }\\n\\n    /// @dev Wraps the ERC1155 outcome tokens to ERC20. The INVALID_RESULT outcome is always called SEER_INVALID_RESULT.\\n    /// @param conditionId The conditionId\\n    /// @param outcomeSlotCount The amount of outcomes\\n    /// @param tokenNames The name of each outcome token\\n    function deployERC20Positions(\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        string[] memory tokenNames\\n    ) internal {\\n        uint256 invalidResultIndex = outcomeSlotCount - 1;\\n\\n        for (uint j = 0; j < outcomeSlotCount; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\n                bytes32(0),\\n                conditionId,\\n                1 << j\\n            );\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                collateralToken,\\n                collectionId\\n            );\\n\\n            require(\\n                j == invalidResultIndex || bytes(tokenNames[j]).length != 0,\\n                \\\"Missing token name\\\"\\n            );\\n\\n            wrappedERC20Factory.createWrappedToken(\\n                address(conditionalTokens),\\n                tokenId,\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j],\\n                j == invalidResultIndex ? \\\"SEER_INVALID_RESULT\\\" : tokenNames[j]\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns all the markets created by this factory\\n    /// @return The addresses of the markets\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    /// @notice Returns the amount of markets created by this factory\\n    /// @return The amount of markets\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x71dcb4354dba8daf62f32173f4d681a7d63fcfe5fc1edf91fec0c5ad7d1b49d0\",\"license\":\"MIT\"},\"src/interaction/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param market Market to resolve\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param market Market to resolve\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param market Market to resolve\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param market Market to resolve\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x81c7fbb55c51d1b2a7084064a62456cb708d551e6f19b313b807e733d490cde3\",\"license\":\"MIT\"},\"src/interaction/WrappedERC20Factory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x0795f2033a2f1d50a75c39961b5130c907b9ad534e9e031d98450243994dfd3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c8063b1283e7711610087578063b1283e77146101d4578063b2016bd4146101e7578063b3a297521461020e578063bc8802a214610221578063e0f6683614610248578063ec9790821461025b578063ff5744ac1461026c578063ff8ff7a31461027f57600080fd5b80631ba18b9b146100da5780632ff8d50414610104578063375a7cba146101375780635bd9e2991461014c57806361371325146101735780636cc6cde11461019a57806380f55605146101c1575b600080fd5b6000546100ea9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b60005461011f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100fb565b61013f610292565b6040516100fb91906117dd565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b60025461011f906001600160a01b031681565b61011f6101e236600461182a565b6102f4565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f61021c366004611843565b61031e565b61011f7f000000000000000000000000000000000000000000000000000000000000000081565b61011f610256366004611843565b6105b8565b6001546040519081526020016100fb565b61011f61027a366004611843565b6108a7565b61011f61028d366004611843565b610a56565b606060018054806020026020016040519081016040528092919081815260200182805480156102ea57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cc575b5050505050905090565b6001818154811061030457600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600261032f6020840184611885565b905010156103585760405162461bcd60e51b815260040161034f906118d5565b60405180910390fd5b60006103676020840184611885565b6103739150600161191b565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161038e57905050905061047d6103b28580611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103f4925050506020870187611885565b61040160a0890189611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104439250505060c08a018a611944565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d7792505050565b816000815181106104905761049061198a565b602002602001018190525060006104dd826000815181106104b3576104b361198a565b602090810291909101015160026104d261016089016101408a016119c0565b886101200135610e8f565b905060006104eb82856110ed565b604080516001808252818301909252919250600091906020808301908036833701905050905082816000815181106105255761052561198a565b602090810291909101015260006105ac61053e89611b37565b6105488a80611944565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600260808201528a92509050611225565b98975050505050505050565b60008160e00135826101000135116106035760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b604482015260640161034f565b6106106002600019611cbb565b826101000135106106585760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081a1a59da081c1bda5b9d60721b604482015260640161034f565b6106656020830183611885565b90506002146106865760405162461bcd60e51b815260040161034f906118d5565b60408051600180825281830190925260039160009190816020015b60608152602001906001900390816106a15790505090506107836106c58580611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107079250505060a0870187611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107499250505060c0880188611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113bc92505050565b816000815181106107965761079661198a565b602002602001018190525060006107d8826000815181106107b9576107b961198a565b602090810291909101015160016104d261016089016101408a016119c0565b905060006107e682856110ed565b604080516001808252818301909252919250600091906020808301908036833701905050905082816000815181106108205761082061198a565b602090810291909101015260006105ac61083989611b37565b6108438a80611944565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600160808201528a92509050611225565b600060026108b86020840184611885565b905010156108d85760405162461bcd60e51b815260040161034f906118d5565b60006108e76020840184611885565b6108f39150600161191b565b60408051600180825281830190925291925060009190816020015b606081526020019060019003908161090e5790505090506109326103b28580611944565b816000815181106109455761094561198a565b60200260200101819052506000610987826000815181106109685761096861198a565b602090810291909101015160036104d261016089016101408a016119c0565b9050600061099582856110ed565b604080516001808252818301909252919250600091906020808301908036833701905050905082816000815181106109cf576109cf61198a565b602090810291909101015260006105ac6109e889611b37565b6109f28a80611944565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160a0810182528a815260208101899052908101899052606081018c9052600360808201528a92509050611225565b60006002610a676020840184611885565b90501015610a875760405162461bcd60e51b815260040161034f906118d5565b6000610a966020840184611885565b610aa29150600161191b565b90506000610ab36020850185611885565b90506001600160401b03811115610acc57610acc61192e565b604051908082528060200260200182016040528015610af5578160200160208202803683370190505b5090506000610b076020860186611885565b90506001600160401b03811115610b2057610b2061192e565b604051908082528060200260200182016040528015610b5357816020015b6060815260200190600190039081610b3e5790505b50905060005b610b666020870187611885565b9050811015610cba57610c2f610b7f6040880188611944565b610b8c60208a018a611885565b85818110610b9c57610b9c61198a565b9050602002810190610bae9190611944565b610bbb60608c018c611944565b604051602001610bd096959493929190611cce565b60408051601f19818403018152919052610bed60a0890189611944565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107499250505060c08a018a611944565b828281518110610c4157610c4161198a565b6020026020010181905250610c8b828281518110610c6157610c6161198a565b60209081029190910101516001610c806101608a016101408b016119c0565b896101200135610e8f565b838281518110610c9d57610c9d61198a565b602090810291909101015280610cb281611cfe565b915050610b59565b50600082604051602001610cce9190611d52565b6040516020818303038152906040528051906020012090506000610cf282866110ed565b905060006105ac610d0289611b37565b610d0f60408b018b611944565b610d1c60808d018d611944565b610d2960608f018f611944565b604051602001610d3e96959493929190611cce565b60408051601f1981840301815260a083018252878352602083018a9052908201869052606082018a905260016080830152908790611225565b60606000604051602001610d949062e2909f60e81b815260030190565b6040516020818303038152906040529050600086866000818110610dba57610dba61198a565b9050602002810190610dcc9190611944565b604051602001610ddd929190611d65565b60408051601f19818403018152919052905060015b86811015610e555781888883818110610e0d57610e0d61198a565b9050602002810190610e1f9190611944565b604051602001610e3193929190611db0565b60405160208183030381529060405291508080610e4d90611cfe565b915050610df2565b5087828284888689604051602001610e739796959493929190611def565b6040516020818303038152906040529250505095945050505050565b600080848487604051602001610ea793929190611e81565b60408051601f198184030181528282528051602091820120600080549285018290527f0000000000000000000000000000000000000000000000000000000000000000606090811b6bffffffffffffffffffffffff199081169587019590955260e09390931b6001600160e01b0319166054860152605885018890527f0000000000000000000000000000000000000000000000000000000000000000831b841660788601523090921b909216608c84015260a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190611eba565b63ffffffff161561101c5791506110e59050565b60008054604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263484b93c49261109d928b928d927f00000000000000000000000000000000000000000000000000000000000000009263ffffffff909116918d918d90600401611f03565b6020604051808303816000875af11580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e09190611f53565b925050505b949350505050565b6000805460405163365bb9d560e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263d96ee7549261114d926401000000009092049091169087908790600401611f6c565b600060405180830381600087803b15801561116757600080fd5b505af115801561117b573d6000803e3d6000fd5b5050600054604051634296357160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063852c6ae293506111db926401000000009004169087908790600401611f6c565b602060405180830381865afa1580156111f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121c9190611f53565b90505b92915050565b600254600090819061123f906001600160a01b031661141c565b90506112598360400151846060015188610160015161148e565b806001600160a01b03166312e24aa48688602001518960e001518a6101000151886040015189600001518a602001518b608001518d600060049054906101000a90046001600160a01b03166040518b63ffffffff1660e01b81526004016112c99a99989796959493929190611fe2565b600060405180830381600087803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b50505050806001600160a01b03167faadcf1e7d57b927db65a77362bc2db82150d8fa843662b079edb722342b086928688602001518960e001518a6101000151886040015189600001518a602001518b608001518d60405161136199989796959493929190612072565b60405180910390a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905595945050505050565b606060006040516020016113d99062e2909f60e81b815260030190565b604051602081830303815290604052905084818583866040516020016114039594939291906120f1565b6040516020818303038152906040529150509392505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611489576040516330be1a3d60e21b815260040160405180910390fd5b919050565b600061149b600184611cbb565b905060005b838110156117d65760405163856296f760e01b8152600060048201819052602482018790526001831b6044830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115449190611f53565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa1580156115d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fb9190611f53565b90508383148061162657508483815181106116185761161861198a565b602002602001015151600014155b6116675760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b604482015260640161034f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb13cd107f0000000000000000000000000000000000000000000000000000000000000000838787146116de578887815181106116d1576116d161198a565b602002602001015161170b565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b888814611731578988815181106117245761172461198a565b602002602001015161175e565b6040518060400160405280601381526020017214d1515497d253959053125117d49154d55315606a1b8152505b6040518563ffffffff1660e01b815260040161177d949392919061215c565b6020604051808303816000875af115801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c091906121a0565b50505080806117ce90611cfe565b9150506114a0565b5050505050565b6020808252825182820181905260009190848201906040850190845b8181101561181e5783516001600160a01b0316835292840192918401916001016117f9565b50909695505050505050565b60006020828403121561183c57600080fd5b5035919050565b60006020828403121561185557600080fd5b81356001600160401b0381111561186b57600080fd5b8201610180818503121561187e57600080fd5b9392505050565b6000808335601e1984360301811261189c57600080fd5b8301803591506001600160401b038211156118b657600080fd5b6020019150600581901b36038213156118ce57600080fd5b9250929050565b602080825260169082015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561121f5761121f611905565b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261195b57600080fd5b8301803591506001600160401b0382111561197557600080fd5b6020019150368190038213156118ce57600080fd5b634e487b7160e01b600052603260045260246000fd5b63ffffffff811681146119b257600080fd5b50565b8035611489816119a0565b6000602082840312156119d257600080fd5b813561187e816119a0565b60405161018081016001600160401b0381118282101715611a0057611a0061192e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611a2e57611a2e61192e565b604052919050565b600082601f830112611a4757600080fd5b81356001600160401b03811115611a6057611a6061192e565b611a73601f8201601f1916602001611a06565b818152846020838601011115611a8857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611ab657600080fd5b813560206001600160401b0380831115611ad257611ad261192e565b8260051b611ae1838201611a06565b9384528581018301938381019088861115611afb57600080fd5b84880192505b858310156105ac57823584811115611b195760008081fd5b611b278a87838c0101611a36565b8352509184019190840190611b01565b60006101808236031215611b4a57600080fd5b611b526119dd565b82356001600160401b0380821115611b6957600080fd5b611b7536838701611a36565b83526020850135915080821115611b8b57600080fd5b611b9736838701611aa5565b60208401526040850135915080821115611bb057600080fd5b611bbc36838701611a36565b60408401526060850135915080821115611bd557600080fd5b611be136838701611a36565b60608401526080850135915080821115611bfa57600080fd5b611c0636838701611a36565b608084015260a0850135915080821115611c1f57600080fd5b611c2b36838701611a36565b60a084015260c0850135915080821115611c4457600080fd5b611c5036838701611a36565b60c084015260e08581013590840152610100808601359084015261012080860135908401526101409150611c858286016119b5565b8284015261016091508185013581811115611c9f57600080fd5b611cab36828801611aa5565b8385015250505080915050919050565b8181038181111561121f5761121f611905565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b600060018201611d1057611d10611905565b5060010190565b600081518084526020808501945080840160005b83811015611d4757815187529582019590820190600101611d2b565b509495945050505050565b60208152600061121c6020830184611d17565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b60005b83811015611da7578181015183820152602001611d8f565b50506000910152565b60008451611dc2818460208901611d8c565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b600088516020611e028285838e01611d8c565b895191840191611e158184848e01611d8c565b8951920191611e278184848d01611d8c565b8851920191611e398184848c01611d8c565b8751920191611e4b8184848b01611d8c565b8651920191611e5d8184848a01611d8c565b8551920191611e6f8184848901611d8c565b919091019a9950505050505050505050565b83815263ffffffff60e01b8360e01b16602082015260008251611eab816024850160208701611d8c565b91909101602401949350505050565b600060208284031215611ecc57600080fd5b815161187e816119a0565b60008151808452611eef816020860160208601611d8c565b601f01601f19169290920160200192915050565b87815260e060208201526000611f1c60e0830189611ed7565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b600060208284031215611f6557600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600081518084526020808501808196508360051b8101915082860160005b85811015611fd5578284038952611fc3848351611ed7565b98850198935090840190600101611fab565b5091979650505050505050565b6000610140808352611ff68184018e611ed7565b9050828103602084015261200a818d611f8d565b90508a60408401528960608401528860808401528760a084015282810360c08401526120368188611d17565b90508560e08401528281036101008401526120518186611f8d565b91505060018060a01b0383166101208301529b9a5050505050505050505050565b60006101208083526120868184018d611ed7565b9050828103602084015261209a818c611f8d565b90508960408401528860608401528760808401528660a084015282810360c08401526120c68187611d17565b90508460e08401528281036101008401526120e18185611f8d565b9c9b505050505050505050505050565b60008651612103818460208b01611d8c565b865190830190612117818360208b01611d8c565b865191019061212a818360208a01611d8c565b855191019061213d818360208901611d8c565b8451910190612150818360208801611d8c565b01979650505050505050565b60018060a01b03851681528360208201526080604082015260006121836080830185611ed7565b82810360608401526121958185611ed7565b979650505050505050565b6000602082840312156121b257600080fd5b81516001600160a01b038116811461187e57600080fdfea264697066735822122092d4b97832108429c0131585dcc663128d9ce3771b23d4943e439c31c530a7c264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "events": {
      "NewMarket(address,string,string[],uint256,uint256,bytes32,bytes32,bytes32[],uint256,string[])": {
        "details": "To be emitted when a new market is created"
      }
    },
    "kind": "dev",
    "methods": {
      "allMarkets()": {
        "details": "Returns all the markets created by this factory",
        "returns": {
          "_0": "The addresses of the markets"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_questionTimeout": "Reality question timeout.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      },
      "createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Categorical market. Reverts if a market with the same question already exists."
      },
      "createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Scalar market"
      },
      "createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Scalar market. Reverts if a market with the same question already exists."
      },
      "marketCount()": {
        "returns": {
          "_0": "The amount of markets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Categorical markets are associated with a Reality question that has only one answer"
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Categorical markets are associated with a Reality question that has one or more answers"
      },
      "createMultiScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value"
      },
      "createScalarMarket((string,string[],string,string,string,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Scalar markets are associated with a Reality question that resolves to a numeric value"
      },
      "marketCount()": {
        "notice": "Returns the amount of markets created by this factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1089,
        "contract": "src/interaction/MarketFactory.sol:MarketFactory",
        "label": "questionTimeout",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1105,
        "contract": "src/interaction/MarketFactory.sol:MarketFactory",
        "label": "realityProxy",
        "offset": 4,
        "slot": "0",
        "type": "t_contract(RealityProxy)3155"
      },
      {
        "astId": 1108,
        "contract": "src/interaction/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1110,
        "contract": "src/interaction/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3155": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}