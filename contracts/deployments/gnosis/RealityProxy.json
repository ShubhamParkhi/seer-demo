{
  "address": "0x132BcFB0003234a791dEB118F8271BCFDa4037dd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        }
      ],
      "name": "isBitSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34f8579d6730618b79979de66502f1d976a05d73b8884f0038c4e5f3dbcc9198",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x132BcFB0003234a791dEB118F8271BCFDa4037dd",
    "transactionIndex": 0,
    "gasUsed": "943444",
    "logsBloom": "0x
    "blockHash": "0x3026839e7eadcdce2da4c2c3ac153d309e4da071dde7d6d75bddf7f77fba6ee8",
    "transactionHash": "0x34f8579d6730618b79979de66502f1d976a05d73b8884f0038c4e5f3dbcc9198",
    "logs": [],
    "blockNumber": 34270585,
    "cumulativeGasUsed": "943444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xE78996A233895bE74a66F451f1019cA9734205cc"
  ],
  "numDeployments": 4,
  "solcInputHash": "9f269a95e3f87f7d8b1b9c294afb862c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"isBitSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealityProxy.sol\":\"RealityProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x99cb1d5fb57bcde34b2894f2d346170128571203972692b176f1605c9f28abbd\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint256 internal constant REALITY_BINARY_TEMPLATE = 0;\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (\\n            templateId == REALITY_BINARY_TEMPLATE ||\\n            templateId == REALITY_SINGLE_SELECT_TEMPLATE\\n        ) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = isBitSet(answer, i) ? 1 : 0;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        uint256 den = 0;\\n        uint256 maxPayout = 1e10;\\n\\n        uint256 invalidResultIndex = numOutcomes;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n\\n            unchecked {\\n                if (den + payouts[i] < den) {\\n                    // the payouts denominator will overflow, it's not possible to execute reportPayouts() so the market is invalid\\n                    allZeroesOrInvalid = true;\\n                    break;\\n                }\\n            }\\n\\n            den += payouts[i];\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            for (uint i = 0; i < payouts.length; i++) {\\n                payouts[i] = i == invalidResultIndex ? 1 : 0;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function isBitSet(uint256 b, uint256 pos) public pure returns (bool) {\\n        return ((b >> pos) & 1) == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x8e12c0674f8c007c99ce2809d9507588d258d3d62bd234c8b713b058e22cadf9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806355ea6c47146100515780635bd9e29914610066578063bc8802a214610096578063f871dc62146100a9575b600080fd5b61006461005f366004610dcd565b6100cc565b005b600054610079906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600154610079906001600160a01b031681565b6100bc6100b7366004610dfd565b6101de565b604051901515815260200161008d565b6000816001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610e1f565b905080158061013f5750600281145b156101515761014d826101ed565b5050565b600381036101625761014d82610446565b6001826001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c69190610e1f565b11156101d55761014d826106d0565b61014d82610adf565b600182821c8116145b92915050565b6000816001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102519190610e1f565b60015460405163ab5a4e3560e01b8152600481018390529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610e1f565b60001c90506000836001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610e1f565b9050600061033c826001610e4e565b67ffffffffffffffff81111561035457610354610e61565b60405190808252806020026020018201604052801561037d578160200160208202803683370190505b5090506000198314806103905750818310155b156103ba5760018183815181106103a9576103a9610e77565b6020026020010181815250506103db565b60018184815181106103ce576103ce610e77565b6020026020010181815250505b600054604051633124a62b60e21b81526001600160a01b039091169063c49298ac9061040d9087908590600401610e8d565b600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b505050505050505050565b6000816001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190610e1f565b60015460405163ab5a4e3560e01b8152600481018390529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610e1f565b60001c90506000836001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190610e1f565b90506000610595826001610e4e565b67ffffffffffffffff8111156105ad576105ad610e61565b6040519080825280602002602001820160405280156105d6578160200160208202803683370190505b509050600183016105f55760018183815181106103a9576103a9610e77565b600160005b838110156106755761060c85826101de565b61061757600061061a565b60015b60ff1683828151811061062f5761062f610e77565b602002602001018181525050818015610661575082818151811061065557610655610e77565b60200260200101516000145b91508061066d81610edb565b9150506105fa565b50801561069d57600182848151811061069057610690610e77565b6020026020010181815250505b50600054604051633124a62b60e21b81526001600160a01b039091169063c49298ac9061040d9087908590600401610e8d565b6000816001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610e1f565b90506000610743826001610e4e565b67ffffffffffffffff81111561075b5761075b610e61565b604051908082528060200260200182016040528015610784578160200160208202803683370190505b509050600160006402540be40084825b868110156109aa5760015460405163255d109d60e21b8152600481018390526001600160a01b039182169163ab5a4e3591908b1690639574427490602401602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190610e1f565b6040518263ffffffff1660e01b815260040161083191815260200190565b602060405180830381865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610e1f565b60001c86828151811061088757610887610e77565b60209081029190910101528551600019908790839081106108aa576108aa610e77565b6020026020010151036108dc5760008682815181106108cb576108cb610e77565b60200260200101818152505061091d565b828682815181106108ef576108ef610e77565b6020026020010151111561091d578286828151811061091057610910610e77565b6020026020010181815250505b848015610943575085818151811061093757610937610e77565b60200260200101516000145b94508386828151811061095857610958610e77565b60200260200101518501101561097157600194506109aa565b85818151811061098357610983610e77565b6020026020010151846109969190610e4e565b9350806109a281610edb565b915050610794565b508315610a025760005b8551811015610a00578181146109cb5760006109ce565b60015b60ff168682815181106109e3576109e3610e77565b6020908102919091010152806109f881610edb565b9150506109b4565b505b60008054906101000a90046001600160a01b03166001600160a01b031663c49298ac886001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190610e1f565b876040518363ffffffff1660e01b8152600401610aa4929190610e8d565b600060405180830381600087803b158015610abe57600080fd5b505af1158015610ad2573d6000803e3d6000fd5b5050505050505050505050565b6000816001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b439190610e1f565b60015460405163ab5a4e3560e01b8152600481018390529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190610e1f565b6040805160038082526080820190925291925060009190602082016060803683370190505090506000846001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c419190610e1f565b90506000856001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190610e1f565b905060018401610cd757600183600281518110610cc657610cc6610e77565b602002602001018181525050610d61565b818411610cf357600183600081518110610cc657610cc6610e77565b808410610d0f57600183600181518110610cc657610cc6610e77565b610d198482610ef4565b83600081518110610d2c57610d2c610e77565b6020908102919091010152610d418285610ef4565b83600181518110610d5457610d54610e77565b6020026020010181815250505b600054604051633124a62b60e21b81526001600160a01b039091169063c49298ac90610d939088908790600401610e8d565b600060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b50505050505050505050565b600060208284031215610ddf57600080fd5b81356001600160a01b0381168114610df657600080fd5b9392505050565b60008060408385031215610e1057600080fd5b50508035926020909101359150565b600060208284031215610e3157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156101e7576101e7610e38565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610ece57845183529383019391830191600101610eb2565b5090979650505050505050565b600060018201610eed57610eed610e38565b5060010190565b818103818111156101e7576101e7610e3856fea26469706673582212209335eb92074f62f93c95233d69d3d8c0f354ead27bac83b0dee2977d7a7f11f564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3370,
        "contract": "src/RealityProxy.sol:RealityProxy",
        "label": "conditionalTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConditionalTokens)1712"
      },
      {
        "astId": 3373,
        "contract": "src/RealityProxy.sol:RealityProxy",
        "label": "realitio",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRealityETH_v3_0)1587"
      }
    ],
    "types": {
      "t_contract(IConditionalTokens)1712": {
        "encoding": "inplace",
        "label": "contract IConditionalTokens",
        "numberOfBytes": "20"
      },
      "t_contract(IRealityETH_v3_0)1587": {
        "encoding": "inplace",
        "label": "contract IRealityETH_v3_0",
        "numberOfBytes": "20"
      }
    }
  }
}