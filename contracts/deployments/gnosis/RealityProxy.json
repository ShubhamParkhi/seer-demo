{
  "address": "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "resolveCategoricalMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "resolveMultiScalarMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "resolveScalarMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ff8b73e394f76d6ee0f2acc3d2bf7791f7996a0f1a9766462c67cafa1033fc2",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
    "transactionIndex": 2,
    "gasUsed": "770253",
    "logsBloom": "0x
    "blockHash": "0x7f6862d0f2cc0cb9fb08686f875c68cdca681d279407e3daf95b54a50f338045",
    "transactionHash": "0x1ff8b73e394f76d6ee0f2acc3d2bf7791f7996a0f1a9766462c67cafa1033fc2",
    "logs": [],
    "blockNumber": 32719075,
    "cumulativeGasUsed": "812253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xE78996A233895bE74a66F451f1019cA9734205cc"
  ],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"resolveCategoricalMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"resolveMultiScalarMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"resolveScalarMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealityProxy.sol\":\"RealityProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610cdc380380610cdc83398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610c1b806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806334b0cee11461005c5780635bd9e29914610071578063bc8802a2146100a0578063bf7f6e5b146100b3578063da4c3b73146100c6575b600080fd5b61006f61006a366004610ae0565b6100d9565b005b600054610084906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610084906001600160a01b031681565b61006f6100c1366004610ae0565b6104bc565b61006f6100d4366004610ae0565b6106b5565b6000816001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190610b10565b90506000826001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610b10565b90508082106101e95760405162461bcd60e51b815260206004820152600d60248201526c14985b99d9481a5b9d985b1a59609a1b60448201526064015b60405180910390fd5b600019810361022f5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081a1a59da081c1bda5b9d60721b60448201526064016101e0565b6040805160028082526060820183526000926020830190803683370190505090506000846001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610b10565b60015460405163ab5a4e3560e01b8152600481018390529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa158015610303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103279190610b10565b9050600181016103785760018360008151811061034657610346610b3f565b60200260200101818152505060018360018151811061036757610367610b3f565b602002602001018181525050610423565b8481116103b55760018360008151811061039457610394610b3f565b60200260200101818152505060008360018151811061036757610367610b3f565b8381106103d15760008360008151811061034657610346610b3f565b6103db8185610b6b565b836000815181106103ee576103ee610b3f565b60209081029190910101526104038582610b6b565b8360018151811061041657610416610b3f565b6020026020010181815250505b60005460408051602080820186905281830189905260608083018990528351808403909101815260808301938490528051910120633124a62b60e21b9092526001600160a01b039092169163c49298ac91610482918790608401610b7e565b600060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b50505050505050505050565b60606000826001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610b10565b90506000836001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610b10565b90508015806105975750806002145b1561060e5761060782856001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190610b10565b61094f565b925061064b565b60405162461bcd60e51b8152602060048201526012602482015271155b9adb9bdddb881d195b5c1b185d19525960721b60448201526064016101e0565b600054604051633124a62b60e21b81526001600160a01b039091169063c49298ac9061067d9085908790600401610b7e565b600060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b5050505050505050565b6000816001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190610b10565b905060008167ffffffffffffffff81111561073657610736610b29565b60405190808252806020026020018201604052801561075f578160200160208202803683370190505b50905060005b828110156108755760015460405163255d109d60e21b8152600481018390526001600160a01b039182169163ab5a4e359190871690639574427490602401602060405180830381865afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190610b10565b6040518263ffffffff1660e01b815260040161080291815260200190565b602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190610b10565b60001c82828151811061085857610858610b3f565b60209081029190910101528061086d81610bcc565b915050610765565b5060008054906101000a90046001600160a01b03166001600160a01b031663c49298ac846001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190610b10565b836040518363ffffffff1660e01b8152600401610918929190610b7e565b600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50505050505050565b606060008267ffffffffffffffff81111561096c5761096c610b29565b604051908082528060200260200182016040528015610995578160200160208202803683370190505b5060015460405163ab5a4e3560e01b8152600481018790529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190610b10565b905060018101610a555760005b84811015610a4f576001838281518110610a3257610a32610b3f565b602090810291909101015280610a4781610bcc565b915050610a16565b50610ad6565b838110610ab55760405162461bcd60e51b815260206004820152602860248201527f416e73776572206d757374206265206265747765656e203020616e64206e756d6044820152674f7574636f6d657360c01b60648201526084016101e0565b6001828281518110610ac957610ac9610b3f565b6020026020010181815250505b5090505b92915050565b600060208284031215610af257600080fd5b81356001600160a01b0381168114610b0957600080fd5b9392505050565b600060208284031215610b2257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ada57610ada610b55565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610bbf57845183529383019391830191600101610ba3565b5090979650505050505050565b600060018201610bde57610bde610b55565b506001019056fea264697066735822122012b9d60c6cf20ed2d587ad67c08e86f5e1fcc3bddbb2c49383ea07d98dfeb76864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806334b0cee11461005c5780635bd9e29914610071578063bc8802a2146100a0578063bf7f6e5b146100b3578063da4c3b73146100c6575b600080fd5b61006f61006a366004610ae0565b6100d9565b005b600054610084906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610084906001600160a01b031681565b61006f6100c1366004610ae0565b6104bc565b61006f6100d4366004610ae0565b6106b5565b6000816001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190610b10565b90506000826001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a39190610b10565b90508082106101e95760405162461bcd60e51b815260206004820152600d60248201526c14985b99d9481a5b9d985b1a59609a1b60448201526064015b60405180910390fd5b600019810361022f5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081a1a59da081c1bda5b9d60721b60448201526064016101e0565b6040805160028082526060820183526000926020830190803683370190505090506000846001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610b10565b60015460405163ab5a4e3560e01b8152600481018390529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa158015610303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103279190610b10565b9050600181016103785760018360008151811061034657610346610b3f565b60200260200101818152505060018360018151811061036757610367610b3f565b602002602001018181525050610423565b8481116103b55760018360008151811061039457610394610b3f565b60200260200101818152505060008360018151811061036757610367610b3f565b8381106103d15760008360008151811061034657610346610b3f565b6103db8185610b6b565b836000815181106103ee576103ee610b3f565b60209081029190910101526104038582610b6b565b8360018151811061041657610416610b3f565b6020026020010181815250505b60005460408051602080820186905281830189905260608083018990528351808403909101815260808301938490528051910120633124a62b60e21b9092526001600160a01b039092169163c49298ac91610482918790608401610b7e565b600060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b50505050505050505050565b60606000826001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610b10565b90506000836001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610b10565b90508015806105975750806002145b1561060e5761060782856001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190610b10565b61094f565b925061064b565b60405162461bcd60e51b8152602060048201526012602482015271155b9adb9bdddb881d195b5c1b185d19525960721b60448201526064016101e0565b600054604051633124a62b60e21b81526001600160a01b039091169063c49298ac9061067d9085908790600401610b7e565b600060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b5050505050505050565b6000816001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190610b10565b905060008167ffffffffffffffff81111561073657610736610b29565b60405190808252806020026020018201604052801561075f578160200160208202803683370190505b50905060005b828110156108755760015460405163255d109d60e21b8152600481018390526001600160a01b039182169163ab5a4e359190871690639574427490602401602060405180830381865afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190610b10565b6040518263ffffffff1660e01b815260040161080291815260200190565b602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190610b10565b60001c82828151811061085857610858610b3f565b60209081029190910101528061086d81610bcc565b915050610765565b5060008054906101000a90046001600160a01b03166001600160a01b031663c49298ac846001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190610b10565b836040518363ffffffff1660e01b8152600401610918929190610b7e565b600060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b50505050505050565b606060008267ffffffffffffffff81111561096c5761096c610b29565b604051908082528060200260200182016040528015610995578160200160208202803683370190505b5060015460405163ab5a4e3560e01b8152600481018790529192506000916001600160a01b039091169063ab5a4e3590602401602060405180830381865afa1580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190610b10565b905060018101610a555760005b84811015610a4f576001838281518110610a3257610a32610b3f565b602090810291909101015280610a4781610bcc565b915050610a16565b50610ad6565b838110610ab55760405162461bcd60e51b815260206004820152602860248201527f416e73776572206d757374206265206265747765656e203020616e64206e756d6044820152674f7574636f6d657360c01b60648201526084016101e0565b6001828281518110610ac957610ac9610b3f565b6020026020010181815250505b5090505b92915050565b600060208284031215610af257600080fd5b81356001600160a01b0381168114610b0957600080fd5b9392505050565b600060208284031215610b2257600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610ada57610ada610b55565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610bbf57845183529383019391830191600101610ba3565b5090979650505050505050565b600060018201610bde57610bde610b55565b506001019056fea264697066735822122012b9d60c6cf20ed2d587ad67c08e86f5e1fcc3bddbb2c49383ea07d98dfeb76864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3576,
        "contract": "src/RealityProxy.sol:RealityProxy",
        "label": "conditionalTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConditionalTokens)2037"
      },
      {
        "astId": 3579,
        "contract": "src/RealityProxy.sol:RealityProxy",
        "label": "realitio",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRealityETH_v3_0)1912"
      }
    ],
    "types": {
      "t_contract(IConditionalTokens)2037": {
        "encoding": "inplace",
        "label": "contract IConditionalTokens",
        "numberOfBytes": "20"
      },
      "t_contract(IRealityETH_v3_0)1912": {
        "encoding": "inplace",
        "label": "contract IRealityETH_v3_0",
        "numberOfBytes": "20"
      }
    }
  }
}