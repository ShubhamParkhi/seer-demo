{
  "address": "0x99dd9B5c52ad59247B8EdE089f17Eb9c004b4474",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketId",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50fa8be686570f4baaa93638c2f273dd272da60917a6cc226a4e000203de2548",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x99dd9B5c52ad59247B8EdE089f17Eb9c004b4474",
    "transactionIndex": 9,
    "gasUsed": "1103674",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xce054fd34287beed2bf964cd6f78a9ff48ac967ffa3aaab89debc2910fb7cfad",
    "transactionHash": "0x50fa8be686570f4baaa93638c2f273dd272da60917a6cc226a4e000203de2548",
    "logs": [],
    "blockNumber": 33031733,
    "cumulativeGasUsed": "3563739",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "de2d0413fa63aa2449a2100e98b07eaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketId\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n}\\n\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        address marketId\\n    ) public view returns (MarketInfo memory) {\\n        Market market = Market(marketId);\\n\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        string[] memory outcomes = new string[](outcomeSlotCount);\\n\\n        uint256 outcomesSupply = marketFactory\\n            .wrappedERC20Factory()\\n            .tokens(\\n                conditionalTokens.getPositionId(\\n                    marketFactory.collateralToken(),\\n                    conditionalTokens.getCollectionId(\\n                        bytes32(0),\\n                        conditionId,\\n                        1\\n                    )\\n                )\\n            )\\n            .totalSupply();\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = market.outcomes(i);\\n        }\\n\\n        IRealityETH_v3_0.Question[]\\n            memory questions = new IRealityETH_v3_0.Question[](\\n                market.getQuestionsCount()\\n            );\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questions[i] = realitio.questions(market.questionsIds(i));\\n            }\\n        }\\n\\n        return\\n            MarketInfo({\\n                id: marketId,\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                outcomesSupply: outcomesSupply,\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                allMarkets[j]\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n}\\n\",\"keccak256\":\"0x148a83db69e8bd6578a5b74ea357f1407e86f95b9e9abbed915ca2d1ce79a5be\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611300806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063118cdf611461003b578063714af34b14610064575b600080fd5b61004e610049366004610c8c565b610084565b60405161005b9190610ee2565b60405180910390f35b610077610072366004610f44565b610207565b60405161005b9190610f72565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100ee919081019061100b565b90506000846001600160401b0381111561010a5761010a610f8c565b60405190808252806020026020018201604052801561014357816020015b610130610c09565b8152602001906001900390816101285790505b50905081516000036101585791506102019050565b60006001835161016891906110d2565b905060008684511161017b576000610188565b86845161018891906110d2565b90506000825b8281106101f8576101b8888783815181106101ab576101ab6110e5565b6020026020010151610207565b85836101c3816110fb565b9450815181106101d5576101d56110e5565b602090810291909101015280156101f857806101f081611114565b91505061018e565b50929450505050505b92915050565b61020f610c09565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610254573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610278919061112b565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de9190611144565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa158015610329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034d919061112b565b90506000816001600160401b0381111561036957610369610f8c565b60405190808252806020026020018201604052801561039c57816020015b60608152602001906001900390816103875790505b5090506000886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611144565b6001600160a01b0316634f64b2be856001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190611144565b60405163856296f760e01b815260006004820152602481018b9052600160448201526001600160a01b038a169063856296f790606401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f9919061112b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610566919061112b565b6040518263ffffffff1660e01b815260040161058491815260200190565b602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190611144565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061112b565b905060005b838110156106d05760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a09190810190611161565b8382815181106106b2576106b26110e5565b602002602001018190525080806106c8906110fb565b91505061062b565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610735919061112b565b6001600160401b0381111561074c5761074c610f8c565b6040519080825280602002602001820160405280156107d357816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152825260001990920191018161076a5790505b50905060008a6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611144565b905060005b825181101561094b5760405163255d109d60e21b8152600481018290526001600160a01b03808416916395addb90918c1690639574427490602401602060405180830381865afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061112b565b6040518263ffffffff1660e01b81526004016108d991815260200190565b61016060405180830381865afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190611218565b83828151811061092d5761092d6110e5565b60200260200101819052508080610943906110fb565b91505061083f565b50506040518061016001604052808a6001600160a01b03168152602001886001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ce9190810190611161565b8152602001848152602001838152602001886001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a41919061112b565b8152602001886001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa8919061112b565b8152602001878152602001886001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b15919061112b565b8152602001886001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c919061112b565b81526020018281526020016000876001600160a01b031663dd34de678a6040518263ffffffff1660e01b8152600401610bb791815260200190565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061112b565b1190529a9950505050505050505050565b60405180610160016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160008152602001606081526020016000151581525090565b6001600160a01b0381168114610c8957600080fd5b50565b60008060408385031215610c9f57600080fd5b823591506020830135610cb181610c74565b809150509250929050565b60005b83811015610cd7578181015183820152602001610cbf565b50506000910152565b60008151808452610cf8816020860160208601610cbc565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610d5757601f19868403018952610d45838351610ce0565b98840198925090830190600101610d29565b5090979650505050505050565b600081518084526020808501945080840160005b83811015610e1957815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101610d78565b509495945050505050565b80516001600160a01b0316825260006101606020830151816020860152610e4d82860182610ce0565b91505060408301518482036040860152610e678282610d0c565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015185830382870152610ec08382610d64565b9250505061014080840151610ed88287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3757603f19888603018452610f25858351610e24565b94509285019290850190600101610f09565b5092979650505050505050565b60008060408385031215610f5757600080fd5b8235610f6281610c74565b91506020830135610cb181610c74565b602081526000610f856020830184610e24565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610fc557610fc5610f8c565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ff357610ff3610f8c565b604052919050565b805161100681610c74565b919050565b6000602080838503121561101e57600080fd5b82516001600160401b038082111561103557600080fd5b818501915085601f83011261104957600080fd5b81518181111561105b5761105b610f8c565b8060051b915061106c848301610fcb565b818152918301840191848101908884111561108657600080fd5b938501935b838510156110b057845192506110a083610c74565b828252938501939085019061108b565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610201576102016110bc565b634e487b7160e01b600052603260045260246000fd5b60006001820161110d5761110d6110bc565b5060010190565b600081611123576111236110bc565b506000190190565b60006020828403121561113d57600080fd5b5051919050565b60006020828403121561115657600080fd5b8151610f8581610c74565b60006020828403121561117357600080fd5b81516001600160401b038082111561118a57600080fd5b818401915084601f83011261119e57600080fd5b8151818111156111b0576111b0610f8c565b6111c3601f8201601f1916602001610fcb565b91508082528560208285010111156111da57600080fd5b6111eb816020840160208601610cbc565b50949350505050565b805163ffffffff8116811461100657600080fd5b8051801515811461100657600080fd5b6000610160828403121561122b57600080fd5b611233610fa2565b8251815261124360208401610ffb565b6020820152611254604084016111f4565b6040820152611265606084016111f4565b6060820152611276608084016111f4565b608082015261128760a08401611208565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea2646970667358221220899599bd2cffeda62db198b572e4c97ece8c5dd128955fcbe6d785d19bcfdc6864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063118cdf611461003b578063714af34b14610064575b600080fd5b61004e610049366004610c8c565b610084565b60405161005b9190610ee2565b60405180910390f35b610077610072366004610f44565b610207565b60405161005b9190610f72565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100ee919081019061100b565b90506000846001600160401b0381111561010a5761010a610f8c565b60405190808252806020026020018201604052801561014357816020015b610130610c09565b8152602001906001900390816101285790505b50905081516000036101585791506102019050565b60006001835161016891906110d2565b905060008684511161017b576000610188565b86845161018891906110d2565b90506000825b8281106101f8576101b8888783815181106101ab576101ab6110e5565b6020026020010151610207565b85836101c3816110fb565b9450815181106101d5576101d56110e5565b602090810291909101015280156101f857806101f081611114565b91505061018e565b50929450505050505b92915050565b61020f610c09565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610254573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610278919061112b565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de9190611144565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa158015610329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034d919061112b565b90506000816001600160401b0381111561036957610369610f8c565b60405190808252806020026020018201604052801561039c57816020015b60608152602001906001900390816103875790505b5090506000886001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611144565b6001600160a01b0316634f64b2be856001600160a01b03166339dd75308c6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190611144565b60405163856296f760e01b815260006004820152602481018b9052600160448201526001600160a01b038a169063856296f790606401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f9919061112b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610566919061112b565b6040518263ffffffff1660e01b815260040161058491815260200190565b602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190611144565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610626919061112b565b905060005b838110156106d05760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610678573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a09190810190611161565b8382815181106106b2576106b26110e5565b602002602001018190525080806106c8906110fb565b91505061062b565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610735919061112b565b6001600160401b0381111561074c5761074c610f8c565b6040519080825280602002602001820160405280156107d357816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152825260001990920191018161076a5790505b50905060008a6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611144565b905060005b825181101561094b5760405163255d109d60e21b8152600481018290526001600160a01b03808416916395addb90918c1690639574427490602401602060405180830381865afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb919061112b565b6040518263ffffffff1660e01b81526004016108d991815260200190565b61016060405180830381865afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190611218565b83828151811061092d5761092d6110e5565b60200260200101819052508080610943906110fb565b91505061083f565b50506040518061016001604052808a6001600160a01b03168152602001886001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ce9190810190611161565b8152602001848152602001838152602001886001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a41919061112b565b8152602001886001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa8919061112b565b8152602001878152602001886001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b15919061112b565b8152602001886001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c919061112b565b81526020018281526020016000876001600160a01b031663dd34de678a6040518263ffffffff1660e01b8152600401610bb791815260200190565b602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf8919061112b565b1190529a9950505050505050505050565b60405180610160016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600080191681526020016000801916815260200160008152602001606081526020016000151581525090565b6001600160a01b0381168114610c8957600080fd5b50565b60008060408385031215610c9f57600080fd5b823591506020830135610cb181610c74565b809150509250929050565b60005b83811015610cd7578181015183820152602001610cbf565b50506000910152565b60008151808452610cf8816020860160208601610cbc565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610d5757601f19868403018952610d45838351610ce0565b98840198925090830190600101610d29565b5090979650505050505050565b600081518084526020808501945080840160005b83811015610e1957815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101610d78565b509495945050505050565b80516001600160a01b0316825260006101606020830151816020860152610e4d82860182610ce0565b91505060408301518482036040860152610e678282610d0c565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015185830382870152610ec08382610d64565b9250505061014080840151610ed88287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f3757603f19888603018452610f25858351610e24565b94509285019290850190600101610f09565b5092979650505050505050565b60008060408385031215610f5757600080fd5b8235610f6281610c74565b91506020830135610cb181610c74565b602081526000610f856020830184610e24565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610fc557610fc5610f8c565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610ff357610ff3610f8c565b604052919050565b805161100681610c74565b919050565b6000602080838503121561101e57600080fd5b82516001600160401b038082111561103557600080fd5b818501915085601f83011261104957600080fd5b81518181111561105b5761105b610f8c565b8060051b915061106c848301610fcb565b818152918301840191848101908884111561108657600080fd5b938501935b838510156110b057845192506110a083610c74565b828252938501939085019061108b565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610201576102016110bc565b634e487b7160e01b600052603260045260246000fd5b60006001820161110d5761110d6110bc565b5060010190565b600081611123576111236110bc565b506000190190565b60006020828403121561113d57600080fd5b5051919050565b60006020828403121561115657600080fd5b8151610f8581610c74565b60006020828403121561117357600080fd5b81516001600160401b038082111561118a57600080fd5b818401915084601f83011261119e57600080fd5b8151818111156111b0576111b0610f8c565b6111c3601f8201601f1916602001610fcb565b91508082528560208285010111156111da57600080fd5b6111eb816020840160208601610cbc565b50949350505050565b805163ffffffff8116811461100657600080fd5b8051801515811461100657600080fd5b6000610160828403121561122b57600080fd5b611233610fa2565b8251815261124360208401610ffb565b6020820152611254604084016111f4565b6040820152611265606084016111f4565b6060820152611276608084016111f4565b608082015261128760a08401611208565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea2646970667358221220899599bd2cffeda62db198b572e4c97ece8c5dd128955fcbe6d785d19bcfdc6864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}