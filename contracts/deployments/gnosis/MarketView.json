{
  "address": "0x4BA0c4cF195695BFfce0f349953b6bC8dFDD4CC4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketId",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bafcf906f48d426f7a61b5b6f336e04df4cbb98233e351a2bba6852eef20069",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x4BA0c4cF195695BFfce0f349953b6bC8dFDD4CC4",
    "transactionIndex": 1,
    "gasUsed": "1370268",
    "logsBloom": "0x
    "blockHash": "0xeec39241bbc8a8e80a92121df041e81066abd45c0375510ae5b3d830d64c1f16",
    "transactionHash": "0x6bafcf906f48d426f7a61b5b6f336e04df4cbb98233e351a2bba6852eef20069",
    "logs": [],
    "blockNumber": 35371041,
    "cumulativeGasUsed": "1489728",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "c2db9543cffbc4682fc73c876429bbe2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketId\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized; // Flag to initialize the market only once\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    bytes32 public conditionId; // Conditional Tokens conditionId\\n    bytes32 public questionId; // Conditional Tokens questionId\\n    bytes32[] public questionsIds; // Reality questions ids\\n    uint256 public templateId; // Reality templateId\\n    string[] public encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    /// @dev Initializer\\n    /// @param _marketName The name of the market\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome\\n    /// @param _lowerBound Lower bound, only used for scalar markets\\n    /// @param _upperBound Upper bound, only user for scalar markets\\n    /// @param _conditionId Conditional Tokens conditionId\\n    /// @param _questionId Conditional Tokens questionId\\n    /// @param _questionsIds Reality questions ids\\n    /// @param _templateId Reality templateId\\n    /// @param _encodedQuestions Encoded questions parameters, needed to create and reopen a question\\n    /// @param _realityProxy Oracle contract\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return questionsCount The number of Reality questions of this market\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xaf9ef35b91e3559c4dafafc04a8d31927735e2768ad9823ad3a3a465a14f4971\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IWrappedERC20Factory {\\n    function tokens(uint256 tokenId) external view returns (IERC20 token);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function wrappedERC20Factory() external view returns (IWrappedERC20Factory);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(\\n        bytes32 question_id\\n    ) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n}\\n\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        address[] wrappedTokens;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n    }\\n\\n    function getMarket(\\n        IMarketFactory marketFactory,\\n        address marketId\\n    ) public view returns (MarketInfo memory) {\\n        Market market = Market(marketId);\\n\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory\\n            .conditionalTokens();\\n\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        string[] memory outcomes = new string[](outcomeSlotCount);\\n        address[] memory wrappedTokens = new address[](outcomeSlotCount);\\n        uint256 outcomesSupply = 0;\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = i == (outcomeSlotCount - 1)\\n                ? \\\"Invalid result\\\"\\n                : market.outcomes(i);\\n            wrappedTokens[i] = address(\\n                marketFactory.wrappedERC20Factory().tokens(\\n                    conditionalTokens.getPositionId(\\n                        marketFactory.collateralToken(),\\n                        conditionalTokens.getCollectionId(\\n                            bytes32(0),\\n                            conditionId,\\n                            1 << i\\n                        )\\n                    )\\n                )\\n            );\\n\\n            if (i == 0) {\\n                outcomesSupply = IERC20(wrappedTokens[i]).totalSupply();\\n            }\\n        }\\n\\n        IRealityETH_v3_0.Question[]\\n            memory questions = new IRealityETH_v3_0.Question[](\\n                market.getQuestionsCount()\\n            );\\n        string[] memory encodedQuestions = new string[](questions.length);\\n        bytes32[] memory questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(\\n                    market.questionsIds(i),\\n                    realitio\\n                );\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = market.encodedQuestions(i);\\n            }\\n        }\\n\\n        return\\n            MarketInfo({\\n                id: marketId,\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                wrappedTokens: wrappedTokens,\\n                outcomesSupply: outcomesSupply,\\n                lowerBound: market.lowerBound(),\\n                upperBound: market.upperBound(),\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions,\\n                questionsIds: questionsIds,\\n                encodedQuestions: encodedQuestions,\\n                payoutReported: conditionalTokens.payoutDenominator(\\n                    conditionId\\n                ) > 0\\n            });\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory,\\n                allMarkets[j]\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(\\n        bytes32 questionId,\\n        IRealityETH_v3_0 realitio\\n    ) public view returns (bytes32) {\\n        if (\\n            realitio.isFinalized(questionId) &&\\n            realitio.isSettledTooSoon(questionId)\\n        ) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n}\\n\",\"keccak256\":\"0x48695e685887a75167e783817b5c9be47be23c53b9aba32c6dc96041ab581f52\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    /// @dev Constructor\\n    /// @param _conditionalTokens Conditional Tokens contract address\\n    /// @param _realitio Reality.eth contract address\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market\\n    /// @param market Market to resolve\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    /// @param market Market to resolve\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    /// @param market Market to resolve\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid\\n    /// @param market Market to resolve\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    /// @param market Market to resolve\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x81c7fbb55c51d1b2a7084064a62456cb708d551e6f19b313b807e733d490cde3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004611086565b6100b0565b6040516100669190611399565b60405180910390f35b61008261007d366004611086565b610233565b604051908152602001610066565b6100a361009e3660046113fb565b610395565b6040516100669190611429565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a91908101906114c2565b90506000846001600160401b0381111561013657610136611443565b60405190808252806020026020018201604052801561016f57816020015b61015c610fee565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190611589565b90506000868451116101a75760006101b4565b8684516101b49190611589565b90506000825b828110610224576101e4888783815181106101d7576101d761159c565b6020026020010151610395565b85836101ef816115b2565b9450815181106102015761020161159c565b60209081029190910101528015610224578061021c816115cb565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906115f2565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906115f2565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610380919061160d565b9050801561038c578093505b505b5090919050565b61039d610fee565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610406919061160d565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c9190611626565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db919061160d565b90506000816001600160401b038111156104f7576104f7611443565b60405190808252806020026020018201604052801561052a57816020015b60608152602001906001900390816105155790505b5090506000826001600160401b0381111561054757610547611443565b604051908082528060200260200182016040528015610570578160200160208202803683370190505b5090506000805b848110156109375761058a600186611589565b81146106025760405163eed2a14760e01b8152600481018290526001600160a01b0389169063eed2a14790602401600060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105fd9190810190611643565b61062a565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b84828151811061063c5761063c61159c565b60200260200101819052508a6001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190611626565b6001600160a01b0316634f64b2be876001600160a01b03166339dd75308e6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611626565b60405163856296f760e01b815260006004820152602481018d90526001871b60448201526001600160a01b038c169063856296f790606401602060405180830381865afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a1919061160d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061160d565b6040518263ffffffff1660e01b815260040161082c91815260200190565b602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190611626565b83828151811061087f5761087f61159c565b60200260200101906001600160a01b031690816001600160a01b03168152505080600003610925578281815181106108b9576108b961159c565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610922919061160d565b91505b8061092f816115b2565b915050610577565b506000876001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c919061160d565b6001600160401b038111156109b3576109b3611443565b604051908082528060200260200182016040528015610a3a57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816109d15790505b509050600081516001600160401b03811115610a5857610a58611443565b604051908082528060200260200182016040528015610a8b57816020015b6060815260200190600190039081610a765790505b509050600082516001600160401b03811115610aa957610aa9611443565b604051908082528060200260200182016040528015610ad2578160200160208202803683370190505b50905060008d6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190611626565b905060005b8451811015610d1b5760405163255d109d60e21b815260048101829052610bba906001600160a01b038e1690639574427490602401602060405180830381865afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb4919061160d565b83610233565b838281518110610bcc57610bcc61159c565b602002602001018181525050816001600160a01b03166395addb90848381518110610bf957610bf961159c565b60200260200101516040518263ffffffff1660e01b8152600401610c1f91815260200190565b61016060405180830381865afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6191906116ea565b858281518110610c7357610c7361159c565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b038d169063292503ba90602401600060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190611643565b848281518110610cfd57610cfd61159c565b60200260200101819052508080610d13906115b2565b915050610b3e565b5050604051806101c001604052808d6001600160a01b031681526020018b6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9e9190810190611643565b81526020018781526020018681526020018581526020018b6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e17919061160d565b81526020018b6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e919061160d565b81526020018a81526020018b6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb919061160d565b81526020018b6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f52919061160d565b815260200184815260200182815260200183815260200160008a6001600160a01b031663dd34de678d6040518263ffffffff1660e01b8152600401610f9991815260200190565b602060405180830381865afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda919061160d565b1190529d9c50505050505050505050505050565b604051806101c0016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b038116811461108357600080fd5b50565b6000806040838503121561109957600080fd5b8235915060208301356110ab8161106e565b809150509250929050565b60005b838110156110d15781810151838201526020016110b9565b50506000910152565b600081518084526110f28160208601602086016110b6565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561115157601f1986840301895261113f8383516110da565b98840198925090830190600101611123565b5090979650505050505050565b600081518084526020808501945080840160005b838110156111975781516001600160a01b031687529582019590820190600101611172565b509495945050505050565b600081518084526020808501945080840160005b8381101561119757815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e0808201519089015261010080820151908901526101208082015190890152610140908101519088015261016090960195908201906001016111b6565b600081518084526020808501945080840160005b838110156111975781518752958201959082019060010161126b565b80516001600160a01b0316825260006101c060208301518160208601526112b0828601826110da565b915050604083015184820360408601526112ca8282611106565b915050606083015184820360608601526112e4828261115e565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518583038287015261133f83826111a2565b92505050610160808401518583038287015261135b8382611257565b9250505061018080840151858303828701526113778382611106565b925050506101a08084015161138f8287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156113ee57603f198886030184526113dc858351611287565b945092850192908501906001016113c0565b5092979650505050505050565b6000806040838503121561140e57600080fd5b82356114198161106e565b915060208301356110ab8161106e565b60208152600061143c6020830184611287565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561147c5761147c611443565b60405290565b604051601f8201601f191681016001600160401b03811182821017156114aa576114aa611443565b604052919050565b80516114bd8161106e565b919050565b600060208083850312156114d557600080fd5b82516001600160401b03808211156114ec57600080fd5b818501915085601f83011261150057600080fd5b81518181111561151257611512611443565b8060051b9150611523848301611482565b818152918301840191848101908884111561153d57600080fd5b938501935b8385101561156757845192506115578361106e565b8282529385019390850190611542565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611573565b634e487b7160e01b600052603260045260246000fd5b6000600182016115c4576115c4611573565b5060010190565b6000816115da576115da611573565b506000190190565b805180151581146114bd57600080fd5b60006020828403121561160457600080fd5b61143c826115e2565b60006020828403121561161f57600080fd5b5051919050565b60006020828403121561163857600080fd5b815161143c8161106e565b60006020828403121561165557600080fd5b81516001600160401b038082111561166c57600080fd5b818401915084601f83011261168057600080fd5b81518181111561169257611692611443565b6116a5601f8201601f1916602001611482565b91508082528560208285010111156116bc57600080fd5b6116cd8160208401602086016110b6565b50949350505050565b805163ffffffff811681146114bd57600080fd5b600061016082840312156116fd57600080fd5b611705611459565b82518152611715602084016114b2565b6020820152611726604084016116d6565b6040820152611737606084016116d6565b6060820152611748608084016116d6565b608082015261175960a084016115e2565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea26469706673582212204cb5709121eee42b8bcffd5655551d0f441db3ebc422291a8f4e2bef50b3855f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004611086565b6100b0565b6040516100669190611399565b60405180910390f35b61008261007d366004611086565b610233565b604051908152602001610066565b6100a361009e3660046113fb565b610395565b6040516100669190611429565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a91908101906114c2565b90506000846001600160401b0381111561013657610136611443565b60405190808252806020026020018201604052801561016f57816020015b61015c610fee565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190611589565b90506000868451116101a75760006101b4565b8684516101b49190611589565b90506000825b828110610224576101e4888783815181106101d7576101d761159c565b6020026020010151610395565b85836101ef816115b2565b9450815181106102015761020161159c565b60209081029190910101528015610224578061021c816115cb565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906115f2565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906115f2565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610380919061160d565b9050801561038c578093505b505b5090919050565b61039d610fee565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610406919061160d565b90506000856001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c9190611626565b604051636a16e06160e11b8152600481018490529091506000906001600160a01b0383169063d42dc0c290602401602060405180830381865afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db919061160d565b90506000816001600160401b038111156104f7576104f7611443565b60405190808252806020026020018201604052801561052a57816020015b60608152602001906001900390816105155790505b5090506000826001600160401b0381111561054757610547611443565b604051908082528060200260200182016040528015610570578160200160208202803683370190505b5090506000805b848110156109375761058a600186611589565b81146106025760405163eed2a14760e01b8152600481018290526001600160a01b0389169063eed2a14790602401600060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105fd9190810190611643565b61062a565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b84828151811061063c5761063c61159c565b60200260200101819052508a6001600160a01b031663613713256040518163ffffffff1660e01b8152600401602060405180830381865afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190611626565b6001600160a01b0316634f64b2be876001600160a01b03166339dd75308e6001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190611626565b60405163856296f760e01b815260006004820152602481018d90526001871b60448201526001600160a01b038c169063856296f790606401602060405180830381865afa15801561077d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a1919061160d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061160d565b6040518263ffffffff1660e01b815260040161082c91815260200190565b602060405180830381865afa158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190611626565b83828151811061087f5761087f61159c565b60200260200101906001600160a01b031690816001600160a01b03168152505080600003610925578281815181106108b9576108b961159c565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610922919061160d565b91505b8061092f816115b2565b915050610577565b506000876001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c919061160d565b6001600160401b038111156109b3576109b3611443565b604051908082528060200260200182016040528015610a3a57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816109d15790505b509050600081516001600160401b03811115610a5857610a58611443565b604051908082528060200260200182016040528015610a8b57816020015b6060815260200190600190039081610a765790505b509050600082516001600160401b03811115610aa957610aa9611443565b604051908082528060200260200182016040528015610ad2578160200160208202803683370190505b50905060008d6001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190611626565b905060005b8451811015610d1b5760405163255d109d60e21b815260048101829052610bba906001600160a01b038e1690639574427490602401602060405180830381865afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb4919061160d565b83610233565b838281518110610bcc57610bcc61159c565b602002602001018181525050816001600160a01b03166395addb90848381518110610bf957610bf961159c565b60200260200101516040518263ffffffff1660e01b8152600401610c1f91815260200190565b61016060405180830381865afa158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6191906116ea565b858281518110610c7357610c7361159c565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b038d169063292503ba90602401600060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190611643565b848281518110610cfd57610cfd61159c565b60200260200101819052508080610d13906115b2565b915050610b3e565b5050604051806101c001604052808d6001600160a01b031681526020018b6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9e9190810190611643565b81526020018781526020018681526020018581526020018b6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e17919061160d565b81526020018b6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e919061160d565b81526020018a81526020018b6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eeb919061160d565b81526020018b6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f52919061160d565b815260200184815260200182815260200183815260200160008a6001600160a01b031663dd34de678d6040518263ffffffff1660e01b8152600401610f9991815260200190565b602060405180830381865afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda919061160d565b1190529d9c50505050505050505050505050565b604051806101c0016040528060006001600160a01b031681526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000801916815260200160008019168152602001600081526020016060815260200160608152602001606081526020016000151581525090565b6001600160a01b038116811461108357600080fd5b50565b6000806040838503121561109957600080fd5b8235915060208301356110ab8161106e565b809150509250929050565b60005b838110156110d15781810151838201526020016110b9565b50506000910152565b600081518084526110f28160208601602086016110b6565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561115157601f1986840301895261113f8383516110da565b98840198925090830190600101611123565b5090979650505050505050565b600081518084526020808501945080840160005b838110156111975781516001600160a01b031687529582019590820190600101611172565b509495945050505050565b600081518084526020808501945080840160005b8381101561119757815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e0808201519089015261010080820151908901526101208082015190890152610140908101519088015261016090960195908201906001016111b6565b600081518084526020808501945080840160005b838110156111975781518752958201959082019060010161126b565b80516001600160a01b0316825260006101c060208301518160208601526112b0828601826110da565b915050604083015184820360408601526112ca8282611106565b915050606083015184820360608601526112e4828261115e565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518186015250610120808401518186015250610140808401518583038287015261133f83826111a2565b92505050610160808401518583038287015261135b8382611257565b9250505061018080840151858303828701526113778382611106565b925050506101a08084015161138f8287018215159052565b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156113ee57603f198886030184526113dc858351611287565b945092850192908501906001016113c0565b5092979650505050505050565b6000806040838503121561140e57600080fd5b82356114198161106e565b915060208301356110ab8161106e565b60208152600061143c6020830184611287565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561147c5761147c611443565b60405290565b604051601f8201601f191681016001600160401b03811182821017156114aa576114aa611443565b604052919050565b80516114bd8161106e565b919050565b600060208083850312156114d557600080fd5b82516001600160401b03808211156114ec57600080fd5b818501915085601f83011261150057600080fd5b81518181111561151257611512611443565b8060051b9150611523848301611482565b818152918301840191848101908884111561153d57600080fd5b938501935b8385101561156757845192506115578361106e565b8282529385019390850190611542565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611573565b634e487b7160e01b600052603260045260246000fd5b6000600182016115c4576115c4611573565b5060010190565b6000816115da576115da611573565b506000190190565b805180151581146114bd57600080fd5b60006020828403121561160457600080fd5b61143c826115e2565b60006020828403121561161f57600080fd5b5051919050565b60006020828403121561163857600080fd5b815161143c8161106e565b60006020828403121561165557600080fd5b81516001600160401b038082111561166c57600080fd5b818401915084601f83011261168057600080fd5b81518181111561169257611692611443565b6116a5601f8201601f1916602001611482565b91508082528560208285010111156116bc57600080fd5b6116cd8160208401602086016110b6565b50949350505050565b805163ffffffff811681146114bd57600080fd5b600061016082840312156116fd57600080fd5b611705611459565b82518152611715602084016114b2565b6020820152611726604084016116d6565b6040820152611737606084016116d6565b6060820152611748608084016116d6565b608082015261175960a084016115e2565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea26469706673582212204cb5709121eee42b8bcffd5655551d0f441db3ebc422291a8f4e2bef50b3855f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}