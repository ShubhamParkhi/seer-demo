{
  "address": "0x0000000000000000000000000000000000000000",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketId",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa57aad5daa633286f31b0989eeaa3d731188489042c5c19400c67302af21b836",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xae300296486a63621f7f31E1B94aD22d32347deA",
    "transactionIndex": 0,
    "gasUsed": "958114",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfeec7e1916ea1a9d31ccec86ecf7d21c8c36852422dfa9f6a20b2716cfbd5379",
    "transactionHash": "0xa57aad5daa633286f31b0989eeaa3d731188489042c5c19400c67302af21b836",
    "logs": [],
    "blockNumber": 32719081,
    "cumulativeGasUsed": "958114",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketId\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {Market} from \\\"./Market.sol\\\";\\nimport {IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(bytes32 question_id) external view returns (Question memory);\\n}\\n\\ncontract MarketView {\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n    }\\n\\n    function getMarket(\\n        IConditionalTokens conditionalTokens,\\n        IRealityETH_v3_0 realitio,\\n        address marketId\\n    ) public view returns (MarketInfo memory) {\\n        Market market = Market(marketId);\\n\\n        bytes32 conditionId = market.conditionId();\\n\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\n            conditionId\\n        );\\n\\n        string[] memory outcomes = new string[](outcomeSlotCount);\\n\\n        uint256 lowerBound = market.lowerBound();\\n        uint256 upperBound = market.upperBound();\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            if (lowerBound == 0 && upperBound == 0) {\\n                // categorical market\\n                outcomes[i] = market.outcomes(i);\\n            } else {\\n                // scalar market\\n                outcomes[i] = i == 0 ? 'Low' : 'High';\\n            }\\n        }\\n\\n        uint256 questionsCount = market.getQuestionsCount();\\n        IRealityETH_v3_0.Question[] memory questions = new IRealityETH_v3_0.Question[](questionsCount);\\n        for (uint256 i = 0; i < questionsCount; i++) {\\n            questions[i] = realitio.questions(market.questionsIds(i));\\n        }\\n\\n        return\\n            MarketInfo({\\n                id: marketId,\\n                marketName: market.marketName(),\\n                outcomes: outcomes,\\n                lowerBound: lowerBound,\\n                upperBound: upperBound,\\n                conditionId: conditionId,\\n                questionId: market.questionId(),\\n                templateId: market.templateId(),\\n                questions: questions\\n            });\\n    }\\n\\n    function getMarkets(\\n        uint256 count,\\n        IMarketFactory marketFactory\\n    ) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count\\n            ? allMarkets.length - count\\n            : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(\\n                marketFactory.conditionalTokens(),\\n                marketFactory.realitio(),\\n                allMarkets[j]\\n            );\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n}\\n\",\"keccak256\":\"0xd00eaedcb31330c46bb733800c0770f361d8dddc49cc52fe56209f51a582236f\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061105e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063118cdf611461003b57806372b6125214610064575b600080fd5b61004e6100493660046109f4565b610084565b60405161005b9190610c23565b60405180910390f35b610077610072366004610c85565b6102ca565b60405161005b9190610cd0565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100ee9190810190610d69565b90506000846001600160401b0381111561010a5761010a610cea565b60405190808252806020026020018201604052801561014357816020015b610130610981565b8152602001906001900390816101285790505b50905081516000036101585791506102c49050565b6000600183516101689190610e30565b905060008684511161017b576000610188565b8684516101889190610e30565b90506000825b8281106102bb5761027b886001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa9190610e43565b896001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025c9190610e43565b88848151811061026e5761026e610e60565b60200260200101516102ca565b858361028681610e76565b94508151811061029857610298610e60565b602090810291909101015280156102bb57806102b381610e8f565b91505061018e565b50929450505050505b92915050565b6102d2610981565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610ea6565b604051636a16e06160e11b8152600481018290529091506000906001600160a01b0388169063d42dc0c290602401602060405180830381865afa158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa9190610ea6565b90506000816001600160401b038111156103c6576103c6610cea565b6040519080825280602002602001820160405280156103f957816020015b60608152602001906001900390816103e45790505b5090506000846001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610ea6565b90506000856001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610ea6565b905060005b848110156105e857821580156104df575081155b156105735760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105519190810190610ebf565b84828151811061056357610563610e60565b60200260200101819052506105d6565b801561059b5760405180604001604052806004815260200163090d2ced60e31b8152506105b8565b604051806040016040528060038152602001624c6f7760e81b8152505b8482815181106105ca576105ca610e60565b60200260200101819052505b806105e081610e76565b9150506104cb565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610ea6565b90506000816001600160401b0381111561066957610669610cea565b6040519080825280602002602001820160405280156106f057816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816106875790505b50905060005b828110156108015760405163255d109d60e21b8152600481018290526001600160a01b03808e16916395addb90918c1690639574427490602401602060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190610ea6565b6040518263ffffffff1660e01b815260040161078f91815260200190565b61016060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610f76565b8282815181106107e3576107e3610e60565b602002602001018190525080806107f990610e76565b9150506106f6565b506040518061012001604052808b6001600160a01b03168152602001896001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108839190810190610ebf565b8152602001868152602001858152602001848152602001888152602001896001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190610ea6565b8152602001896001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190610ea6565b8152602001919091529b9a5050505050505050505050565b60405180610120016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600080191681526020016000801916815260200160008152602001606081525090565b6001600160a01b03811681146109f157600080fd5b50565b60008060408385031215610a0757600080fd5b823591506020830135610a19816109dc565b809150509250929050565b60005b83811015610a3f578181015183820152602001610a27565b50506000910152565b60008151808452610a60816020860160208601610a24565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610abc578284038952610aaa848351610a48565b98850198935090840190600101610a92565b5091979650505050505050565b600081518084526020808501945080840160005b83811015610b7e57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101610add565b509495945050505050565b80516001600160a01b0316825260006101206020830151816020860152610bb282860182610a48565b91505060408301518482036040860152610bcc8282610a74565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610c198382610ac9565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c7857603f19888603018452610c66858351610b89565b94509285019290850190600101610c4a565b5092979650505050505050565b600080600060608486031215610c9a57600080fd5b8335610ca5816109dc565b92506020840135610cb5816109dc565b91506040840135610cc5816109dc565b809150509250925092565b602081526000610ce36020830184610b89565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610d2357610d23610cea565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d5157610d51610cea565b604052919050565b8051610d64816109dc565b919050565b60006020808385031215610d7c57600080fd5b82516001600160401b0380821115610d9357600080fd5b818501915085601f830112610da757600080fd5b815181811115610db957610db9610cea565b8060051b9150610dca848301610d29565b8181529183018401918481019088841115610de457600080fd5b938501935b83851015610e0e5784519250610dfe836109dc565b8282529385019390850190610de9565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102c4576102c4610e1a565b600060208284031215610e5557600080fd5b8151610ce3816109dc565b634e487b7160e01b600052603260045260246000fd5b600060018201610e8857610e88610e1a565b5060010190565b600081610e9e57610e9e610e1a565b506000190190565b600060208284031215610eb857600080fd5b5051919050565b600060208284031215610ed157600080fd5b81516001600160401b0380821115610ee857600080fd5b818401915084601f830112610efc57600080fd5b815181811115610f0e57610f0e610cea565b610f21601f8201601f1916602001610d29565b9150808252856020828501011115610f3857600080fd5b610f49816020840160208601610a24565b50949350505050565b805163ffffffff81168114610d6457600080fd5b80518015158114610d6457600080fd5b60006101608284031215610f8957600080fd5b610f91610d00565b82518152610fa160208401610d59565b6020820152610fb260408401610f52565b6040820152610fc360608401610f52565b6060820152610fd460808401610f52565b6080820152610fe560a08401610f66565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea264697066735822122083eb02e1d8efea5a15d079a3e24f8073a4eeec3850b4c3eed29244ab877644c264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063118cdf611461003b57806372b6125214610064575b600080fd5b61004e6100493660046109f4565b610084565b60405161005b9190610c23565b60405180910390f35b610077610072366004610c85565b6102ca565b60405161005b9190610cd0565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100ee9190810190610d69565b90506000846001600160401b0381111561010a5761010a610cea565b60405190808252806020026020018201604052801561014357816020015b610130610981565b8152602001906001900390816101285790505b50905081516000036101585791506102c49050565b6000600183516101689190610e30565b905060008684511161017b576000610188565b8684516101889190610e30565b90506000825b8281106102bb5761027b886001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa9190610e43565b896001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025c9190610e43565b88848151811061026e5761026e610e60565b60200260200101516102ca565b858361028681610e76565b94508151811061029857610298610e60565b602090810291909101015280156102bb57806102b381610e8f565b91505061018e565b50929450505050505b92915050565b6102d2610981565b60008290506000816001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b9190610ea6565b604051636a16e06160e11b8152600481018290529091506000906001600160a01b0388169063d42dc0c290602401602060405180830381865afa158015610386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103aa9190610ea6565b90506000816001600160401b038111156103c6576103c6610cea565b6040519080825280602002602001820160405280156103f957816020015b60608152602001906001900390816103e45790505b5090506000846001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104609190610ea6565b90506000856001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610ea6565b905060005b848110156105e857821580156104df575081155b156105735760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105519190810190610ebf565b84828151811061056357610563610e60565b60200260200101819052506105d6565b801561059b5760405180604001604052806004815260200163090d2ced60e31b8152506105b8565b604051806040016040528060038152602001624c6f7760e81b8152505b8482815181106105ca576105ca610e60565b60200260200101819052505b806105e081610e76565b9150506104cb565b506000866001600160a01b031663c2e112d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610ea6565b90506000816001600160401b0381111561066957610669610cea565b6040519080825280602002602001820160405280156106f057816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820181905261014082015282526000199092019101816106875790505b50905060005b828110156108015760405163255d109d60e21b8152600481018290526001600160a01b03808e16916395addb90918c1690639574427490602401602060405180830381865afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190610ea6565b6040518263ffffffff1660e01b815260040161078f91815260200190565b61016060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610f76565b8282815181106107e3576107e3610e60565b602002602001018190525080806107f990610e76565b9150506106f6565b506040518061012001604052808b6001600160a01b03168152602001896001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108839190810190610ebf565b8152602001868152602001858152602001848152602001888152602001896001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190610ea6565b8152602001896001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190610ea6565b8152602001919091529b9a5050505050505050505050565b60405180610120016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600080191681526020016000801916815260200160008152602001606081525090565b6001600160a01b03811681146109f157600080fd5b50565b60008060408385031215610a0757600080fd5b823591506020830135610a19816109dc565b809150509250929050565b60005b83811015610a3f578181015183820152602001610a27565b50506000910152565b60008151808452610a60816020860160208601610a24565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610abc578284038952610aaa848351610a48565b98850198935090840190600101610a92565b5091979650505050505050565b600081518084526020808501945080840160005b83811015610b7e57815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101610add565b509495945050505050565b80516001600160a01b0316825260006101206020830151816020860152610bb282860182610a48565b91505060408301518482036040860152610bcc8282610a74565b915050606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610c198382610ac9565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c7857603f19888603018452610c66858351610b89565b94509285019290850190600101610c4a565b5092979650505050505050565b600080600060608486031215610c9a57600080fd5b8335610ca5816109dc565b92506020840135610cb5816109dc565b91506040840135610cc5816109dc565b809150509250925092565b602081526000610ce36020830184610b89565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715610d2357610d23610cea565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d5157610d51610cea565b604052919050565b8051610d64816109dc565b919050565b60006020808385031215610d7c57600080fd5b82516001600160401b0380821115610d9357600080fd5b818501915085601f830112610da757600080fd5b815181811115610db957610db9610cea565b8060051b9150610dca848301610d29565b8181529183018401918481019088841115610de457600080fd5b938501935b83851015610e0e5784519250610dfe836109dc565b8282529385019390850190610de9565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102c4576102c4610e1a565b600060208284031215610e5557600080fd5b8151610ce3816109dc565b634e487b7160e01b600052603260045260246000fd5b600060018201610e8857610e88610e1a565b5060010190565b600081610e9e57610e9e610e1a565b506000190190565b600060208284031215610eb857600080fd5b5051919050565b600060208284031215610ed157600080fd5b81516001600160401b0380821115610ee857600080fd5b818401915084601f830112610efc57600080fd5b815181811115610f0e57610f0e610cea565b610f21601f8201601f1916602001610d29565b9150808252856020828501011115610f3857600080fd5b610f49816020840160208601610a24565b50949350505050565b805163ffffffff81168114610d6457600080fd5b80518015158114610d6457600080fd5b60006101608284031215610f8957600080fd5b610f91610d00565b82518152610fa160208401610d59565b6020820152610fb260408401610f52565b6040820152610fc360608401610f52565b6060820152610fd460808401610f52565b6080820152610fe560a08401610f66565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea264697066735822122083eb02e1d8efea5a15d079a3e24f8073a4eeec3850b4c3eed29244ab877644c264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}