{
  "address": "0x0000000000000000000000000000000000000000",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "_wrappedERC20Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "QUESTION_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "changeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedERC20Factory",
      "outputs": [
        {
          "internalType": "contract WrappedERC20Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54559ab0e47b3db49b22f7bb70ca2375def50b52fdbfea7b1894652415c10bb9",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xefa6CB3804303DECFa8677A373Cf9c944af0F485",
    "transactionIndex": 0,
    "gasUsed": "1480157",
    "logsBloom": "0x
    "blockHash": "0x6d999f2a16fbd90cf1f640e87fa5537d1779f036f5260d7846ff2b8c8769aeb7",
    "transactionHash": "0x54559ab0e47b3db49b22f7bb70ca2375def50b52fdbfea7b1894652415c10bb9",
    "logs": [],
    "blockNumber": 32719079,
    "cumulativeGasUsed": "1480157",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03d03464BF9Eb20059Ca6eF6391E9C5d79d5E012",
    "0xe40DD83a262da3f56976038F1554Fe541Fa75ecd",
    "0xE78996A233895bE74a66F451f1019cA9734205cc",
    "0xFb4c45a988F70D0f8eFb5Ab3A7feB00D463c16B7",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
    "0x4edca105188a0783ab3a6f09c50567d1e3f8591d"
  ],
  "numDeployments": 2,
  "solcInputHash": "15f9634b15fc59ed27943a3fced3d1f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"_wrappedERC20Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"QUESTION_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"changeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedERC20Factory\",\"outputs\":[{\"internalType\":\"contract WrappedERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_governor\":\"Address of the governor of this contract.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrappedERC20Factory\":\"Address of the WrappedERC20Factory implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cf2b62890ccf4700cad25c804dfd92be8d4cde5996702426313aa8dd914c1eb\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName;\\n    string[] public outcomes;\\n    uint256 public lowerBound;\\n    uint256 public upperBound;\\n    bytes32 public conditionId;\\n    bytes32 public questionId; // conditional tokens questionId\\n    bytes32[] public questionsIds; // reality questionId's\\n    uint256 public templateId;\\n    string[] public encodedQuestions;\\n    RealityProxy public realityProxy;\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        if (questionsIds.length > 1) {\\n            realityProxy.resolveMultiScalarMarket(this);\\n\\n            return;\\n        }\\n\\n        if (lowerBound == 0 && upperBound == 0) {\\n            realityProxy.resolveCategoricalMarket(this);\\n\\n            return;\\n        }\\n\\n        realityProxy.resolveScalarMarket(this);\\n    }\\n}\\n\",\"keccak256\":\"0x71b03e2f382a214d1c362ecf60da46bf8d283e49390dcf8f626e09881cdd90a0\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"./WrappedERC20Factory.sol\\\";\\nimport {IRealityETH_v3_0, IConditionalTokens} from \\\"./Interfaces.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    struct CreateMarketParams {\\n        string marketName;\\n        string[] encodedQuestions;\\n        string[] outcomes;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        uint256 minBond;\\n        uint32 openingTime;\\n    }\\n\\n    struct InternalMarketConfig {\\n        bytes32 questionId;\\n        bytes32[] questionsIds;\\n        bytes32 conditionId;\\n        uint256 outcomeSlotCount;\\n        uint256 templateId;\\n    }\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n\\n    uint32 public constant QUESTION_TIMEOUT = 1.5 days;\\n\\n    address public immutable arbitrator;\\n    IRealityETH_v3_0 public immutable realitio;\\n    WrappedERC20Factory public immutable wrappedERC20Factory;\\n    IConditionalTokens public immutable conditionalTokens;\\n    address public immutable collateralToken;\\n    RealityProxy public immutable realityProxy;\\n    address public governor;\\n    address[] public markets;\\n    address public market;\\n\\n    event NewMarket(address indexed market);\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrappedERC20Factory Address of the WrappedERC20Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _governor Address of the governor of this contract.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        WrappedERC20Factory _wrappedERC20Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        address _governor\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrappedERC20Factory = _wrappedERC20Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        governor = _governor;\\n    }\\n\\n    function changeGovernor(address _governor) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        governor = _governor;\\n    }\\n\\n    function changeMarket(address _market) external {\\n        require(msg.sender == governor, \\\"Not authorized\\\");\\n        market = _market;\\n    }\\n\\n    function createCategoricalMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Invalid outcomes count\\\");\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            params.encodedQuestions[0],\\n            REALITY_SINGLE_SELECT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            params.outcomes.length,\\n            address(realityProxy)\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: params.outcomes.length,\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createScalarMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(params.upperBound > params.lowerBound, \\\"Invalid bounds\\\");\\n\\n        (bytes32 questionId, bytes32 conditionId) = setUpQuestionAndCondition(\\n            params.encodedQuestions[0],\\n            REALITY_UINT_TEMPLATE,\\n            params.openingTime,\\n            params.minBond,\\n            2,\\n            address(realityProxy)\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](1);\\n        questionsIds[0] = questionId;\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: 2,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function createMultiScalarMarket(\\n        CreateMarketParams memory params\\n    ) external returns (address) {\\n        require(\\n            params.outcomes.length == params.encodedQuestions.length,\\n            \\\"Lenght mismatch\\\"\\n        );\\n\\n        bytes32[] memory questionsIds = new bytes32[](params.outcomes.length);\\n\\n        bytes32 questionId = bytes32(0);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            questionsIds[i] = askRealityQuestion(\\n                params.encodedQuestions[i],\\n                REALITY_UINT_TEMPLATE,\\n                params.openingTime,\\n                params.minBond\\n            );\\n\\n            questionId = keccak256(\\n                abi.encodePacked(questionId, questionsIds[i])\\n            );\\n        }\\n\\n        bytes32 conditionId = prepareCondition(\\n            questionId,\\n            params.outcomes.length,\\n            address(realityProxy)\\n        );\\n\\n        address marketId = createMarket(\\n            params,\\n            InternalMarketConfig({\\n                questionId: questionId,\\n                questionsIds: questionsIds,\\n                conditionId: conditionId,\\n                outcomeSlotCount: params.outcomes.length,\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n\\n        return marketId;\\n    }\\n\\n    function setUpQuestionAndCondition(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond,\\n        uint256 outcomeSlotCount,\\n        address oracle\\n    ) internal returns (bytes32 questionId, bytes32 conditionId) {\\n        questionId = askRealityQuestion(\\n            question,\\n            templateId,\\n            openingTime,\\n            minBond\\n        );\\n\\n        conditionId = prepareCondition(questionId, outcomeSlotCount, oracle);\\n    }\\n\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        Market instance = Market(market.clone());\\n\\n        deployERC20Positions(\\n            config.conditionId,\\n            config.outcomeSlotCount,\\n            markets.length + 1\\n        );\\n        instance.initialize(\\n            params.marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            config.conditionId,\\n            config.questionId,\\n            config.questionsIds,\\n            config.templateId,\\n            params.encodedQuestions,\\n            realityProxy\\n        );\\n\\n        emit NewMarket(address(instance));\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    function askRealityQuestion(\\n        string memory question,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(\\n            abi.encodePacked(templateId, openingTime, question)\\n        );\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash,\\n                arbitrator,\\n                QUESTION_TIMEOUT,\\n                minBond,\\n                address(realitio),\\n                address(this),\\n                uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            return question_id;\\n        }\\n\\n        return\\n            realitio.askQuestionWithMinBond(\\n                templateId,\\n                question,\\n                arbitrator,\\n                QUESTION_TIMEOUT,\\n                openingTime,\\n                0,\\n                minBond\\n            );\\n    }\\n\\n    function prepareCondition(\\n        bytes32 questionId,\\n        uint outcomeSlotCount,\\n        address oracle\\n    ) internal returns (bytes32) {\\n        conditionalTokens.prepareCondition(\\n            oracle,\\n            questionId,\\n            outcomeSlotCount\\n        );\\n\\n        return\\n            conditionalTokens.getConditionId(\\n                oracle,\\n                questionId,\\n                outcomeSlotCount\\n            );\\n    }\\n\\n    function deployERC20Positions(\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        uint256 marketIndex\\n    ) internal {\\n        uint[] memory partition = generateBasicPartition(outcomeSlotCount);\\n        for (uint j = 0; j < partition.length; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(\\n                bytes32(0),\\n                conditionId,\\n                partition[j]\\n            );\\n            uint256 tokenId = conditionalTokens.getPositionId(\\n                collateralToken,\\n                collectionId\\n            );\\n\\n            string memory tokenName = string(\\n                abi.encodePacked(\\n                    \\\"SEER_\\\",\\n                    Strings.toString(marketIndex),\\n                    \\\"_\\\",\\n                    Strings.toString(j + 1)\\n                )\\n            );\\n\\n            wrappedERC20Factory.createWrappedToken(\\n                address(conditionalTokens),\\n                tokenId,\\n                tokenName,\\n                tokenName\\n            );\\n        }\\n    }\\n\\n    function generateBasicPartition(\\n        uint outcomeSlotCount\\n    ) private pure returns (uint[] memory partition) {\\n        partition = new uint[](outcomeSlotCount);\\n        for (uint i = 0; i < outcomeSlotCount; i++) {\\n            partition[i] = 1 << i;\\n        }\\n    }\\n\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x729cf9e2f639c870f56fae53b4cb26dfc4ae095c447dadcd94c21f424300d176\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public conditionalTokens;\\n    IRealityETH_v3_0 public realitio;\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolveCategoricalMarket(Market market) external {\\n        uint256[] memory payouts;\\n\\n        bytes32 questionId = market.questionId();\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == 0 || templateId == 2) {\\n            // binary or single-select\\n            payouts = getSingleSelectPayouts(questionId, market.numOutcomes());\\n        } else {\\n            revert(\\\"Unknown templateId\\\");\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    function resolveScalarMarket(Market market) external {\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        require(low < high, \\\"Range invalid\\\");\\n        require(high != type(uint256).max, \\\"Invalid high point\\\");\\n\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        bytes32 questionId = market.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            payouts[0] = 1;\\n            payouts[1] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        } else if (answer >= high) {\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(\\n            keccak256(abi.encode(questionId, low, high)),\\n            payouts\\n        );\\n    }\\n\\n    function resolveMultiScalarMarket(Market market) external {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n\\n    function getSingleSelectPayouts(\\n        bytes32 questionId,\\n        uint256 numOutcomes\\n    ) internal view returns (uint256[] memory) {\\n        uint256[] memory payouts = new uint256[](numOutcomes);\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n\\n        if (answer == type(uint256).max) {\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = 1;\\n            }\\n        } else {\\n            require(\\n                answer < numOutcomes,\\n                \\\"Answer must be between 0 and numOutcomes\\\"\\n            );\\n            payouts[answer] = 1;\\n        }\\n\\n        return payouts;\\n    }\\n}\\n\",\"keccak256\":\"0xbe516dbe15bf198629a956527932f5db6558408459431d884d3c1b37cc74ccd4\",\"license\":\"MIT\"},\"src/WrappedERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\nimport {Wrapped1155Factory, IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract WrappedERC20Factory {\\n    Wrapped1155Factory public immutable wrapped1155Factory;\\n\\n    mapping(uint256 => IERC20) public tokens;\\n    mapping(uint256 => bytes) public data;\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     */\\n    constructor(Wrapped1155Factory _wrapped1155Factory) {\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    // @dev see https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    function toString31(\\n        string memory value\\n    ) public pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single\\n        // word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length\\n        // are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded\\n        // string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    function createWrappedToken(\\n        address multiToken,\\n        uint256 tokenId,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external returns (IERC20) {\\n        bytes memory tokenData = abi.encodePacked(\\n            toString31(tokenName),\\n            toString31(tokenSymbol),\\n            uint8(18)\\n        );\\n\\n        IERC20 erc20 = wrapped1155Factory.requireWrapped1155(\\n            multiToken,\\n            tokenId,\\n            tokenData\\n        );\\n\\n        tokens[tokenId] = erc20;\\n        data[tokenId] = tokenData;\\n\\n        return erc20;\\n    }\\n}\\n\",\"keccak256\":\"0x5c929c278735afd1215c8205fab1c6ecdd341b1474629f85c8ce7de13806be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001b1538038062001b158339810160408190526200003591620000a4565b600280546001600160a01b03998a166001600160a01b03199182161790915596881660805294871660a05292861660c05290851660e0528416610100528316610120526000805491909316911617905562000165565b6001600160a01b0381168114620000a157600080fd5b50565b600080600080600080600080610100898b031215620000c257600080fd5b8851620000cf816200008b565b60208a0151909850620000e2816200008b565b60408a0151909750620000f5816200008b565b60608a015190965062000108816200008b565b60808a01519095506200011b816200008b565b60a08a01519094506200012e816200008b565b60c08a015190935062000141816200008b565b60e08a015190925062000154816200008b565b809150509295985092959890939650565b60805160a05160c05160e05161010051610120516118f06200022560003960008181610125015281816104f5015281816106060152818161077d0152610c160152600081816102430152610e8201526000818161018001528181610a8801528181610b0801528181610daf01528181610eb70152610fa70152600081816101bc0152610f7a01526000818161027d015281816108a90152818161091b01526109b90152600081816101e30152818161086801526109ea01526118f06000f3fe608060405234801561001057600080fd5b50600436106100eb5760003560e01c8063738cc3f011610092578063738cc3f01461020557806380f5560514610218578063b1283e771461022b578063b2016bd41461023e578063b7083ac514610265578063bc8802a214610278578063e4c0aaf41461029f578063ec979082146102b2578063fdf13b04146102c357600080fd5b80630c340a24146100f05780632ff8d50414610120578063375a7cba146101475780634a3382e51461015c5780635bd9e2991461017b5780635c3ef427146101a257806361371325146101b75780636cc6cde1146101de575b600080fd5b600054610103906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61014f6102d6565b604051610117919061122b565b6101666201fa4081565b60405163ffffffff9091168152602001610117565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101b56101b0366004611290565b610338565b005b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61010361021336600461144c565b61038d565b600254610103906001600160a01b031681565b61010361023936600461152f565b61055d565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61010361027336600461144c565b610587565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101b56102ad366004611290565b6106a7565b600154604051908152602001610117565b6101036102d136600461144c565b6106f3565b6060600180548060200260200160405190810160405280929190818152602001828054801561032e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610310575b5050505050905090565b6000546001600160a01b0316331461036b5760405162461bcd60e51b815260040161036290611548565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000816020015151826040015151146103da5760405162461bcd60e51b815260206004820152600f60248201526e098cadcced0e840dad2e6dac2e8c6d608b1b6044820152606401610362565b60008260400151516001600160401b038111156103f9576103f96112b4565b604051908082528060200260200182016040528015610422578160200160208202803683370190505b5090506000805b8460400151518110156104e6576104688560200151828151811061044f5761044f611570565b602002602001015160018760c001518860a00151610822565b83828151811061047a5761047a611570565b6020026020010181815250508183828151811061049957610499611570565b60200260200101516040516020016104bb929190918252602082015260400190565b60405160208183030381529060405280519060200120915080806104de9061159c565b915050610429565b506000610519828660400151517f0000000000000000000000000000000000000000000000000000000000000000610a6e565b90506000610553866040518060a0016040528086815260200187815260200185815260200189604001515181526020016001815250610b84565b9695505050505050565b6001818154811061056d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600081606001518260800151116105d15760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b6044820152606401610362565b60008061062a84602001516000815181106105ee576105ee611570565b602002602001015160018660c001518760a0015160027f0000000000000000000000000000000000000000000000000000000000000000610cf7565b6040805160018082528183019092529294509092506000919060208083019080368337019050509050828160008151811061066757610667611570565b6020026020010181815250506000610553866040518060a00160405280878152602001858152602001868152602001600281526020016001815250610b84565b6000546001600160a01b031633146106d15760405162461bcd60e51b815260040161036290611548565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000600282604001515110156107445760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b6044820152606401610362565b6000806107a1846020015160008151811061076157610761611570565b602002602001015160028660c001518760a001518860400151517f0000000000000000000000000000000000000000000000000000000000000000610cf7565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106107de576107de611570565b6020026020010181815250506000610553866040518060a0016040528087815260200185815260200186815260200189604001515181526020016002815250610b84565b60008084848760405160200161083a939291906115d9565b60408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b8216938501939093526107e960e61b6054850152605884018790527f0000000000000000000000000000000000000000000000000000000000000000831b811660788501523090921b909116608c830152600060a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611612565b63ffffffff16156109a2579150610a669050565b604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063484b93c490610a1e9089908b907f0000000000000000000000000000000000000000000000000000000000000000906201fa40908c906000908d9060040161165b565b6020604051808303816000875af1158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6191906116ab565b925050505b949350505050565b60405163365bb9d560e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d96ee75490610ac1908590889088906004016116c4565b600060405180830381600087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b5050604051634296357160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063852c6ae29150610b43908590889088906004016116c4565b602060405180830381865afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906116ab565b6002546000908190610b9e906001600160a01b0316610d20565b6040840151606085015160018054939450610bc193610bbc916116e5565b610d92565b835160408086015160608701516080808901518885015189516020808c0151948c0151908d015197516304b892a960e21b81526001600160a01b038b16996312e24aa499610c3e9991989197919695949391927f00000000000000000000000000000000000000000000000000000000000000009060040161174d565b600060405180830381600087803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b50506040516001600160a01b03841692507f6cbab6250b188d6d9b0b6c7b0246bd61d23de28520080c27e417bf27e4c47b3d9150600090a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905590505b92915050565b600080610d0688888888610822565b9150610d13828585610a6e565b9050965096945050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116610d8d576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000610d9d83611036565b905060005b815181101561102f5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f76000801b88868681518110610df357610df3611570565b60200260200101516040518463ffffffff1660e01b8152600401610e2a939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906116ab565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2291906116ab565b90506000610f2f866110c1565b610f42610f3d8660016116e5565b6110c1565b604051602001610f5392919061180c565b60408051601f1981840301815290829052630bb13cd160e41b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb13cd1090610fd5907f000000000000000000000000000000000000000000000000000000000000000090869086908190600401611859565b6020604051808303816000875af1158015610ff4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611018919061189d565b5050505080806110279061159c565b915050610da2565b5050505050565b6060816001600160401b03811115611050576110506112b4565b604051908082528060200260200182016040528015611079578160200160208202803683370190505b50905060005b828110156110bb57806001901b82828151811061109e5761109e611570565b6020908102919091010152806110b38161159c565b91505061107f565b50919050565b606060006110ce83611153565b60010190506000816001600160401b038111156110ed576110ed6112b4565b6040519080825280601f01601f191660200182016040528015611117576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461112157509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106111925772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111be576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111dc57662386f26fc10000830492506010015b6305f5e10083106111f4576305f5e100830492506008015b612710831061120857612710830492506004015b6064831061121a576064830492506002015b600a8310610cf15760010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561126c5783516001600160a01b031683529284019291840191600101611247565b50909695505050505050565b6001600160a01b038116811461128d57600080fd5b50565b6000602082840312156112a257600080fd5b81356112ad81611278565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156112ec576112ec6112b4565b60405290565b604051601f8201601f191681016001600160401b038111828210171561131a5761131a6112b4565b604052919050565b600082601f83011261133357600080fd5b81356001600160401b0381111561134c5761134c6112b4565b61135f601f8201601f19166020016112f2565b81815284602083860101111561137457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126113a257600080fd5b813560206001600160401b03808311156113be576113be6112b4565b8260051b6113cd8382016112f2565b93845285810183019383810190888611156113e757600080fd5b84880192505b85831015611423578235848111156114055760008081fd5b6114138a87838c0101611322565b83525091840191908401906113ed565b98975050505050505050565b63ffffffff8116811461128d57600080fd5b8035610d8d8161142f565b60006020828403121561145e57600080fd5b81356001600160401b038082111561147557600080fd5b9083019060e0828603121561148957600080fd5b6114916112ca565b8235828111156114a057600080fd5b6114ac87828601611322565b8252506020830135828111156114c157600080fd5b6114cd87828601611391565b6020830152506040830135828111156114e557600080fd5b6114f187828601611391565b604083015250606083013560608201526080830135608082015260a083013560a082015261152160c08401611441565b60c082015295945050505050565b60006020828403121561154157600080fd5b5035919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115ae576115ae611586565b5060010190565b60005b838110156115d05781810151838201526020016115b8565b50506000910152565b83815263ffffffff60e01b8360e01b166020820152600082516116038160248501602087016115b5565b91909101602401949350505050565b60006020828403121561162457600080fd5b81516112ad8161142f565b600081518084526116478160208601602086016115b5565b601f01601f19169290920160200192915050565b87815260e06020820152600061167460e083018961162f565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156116bd57600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b80820180821115610cf157610cf1611586565b600081518084526020808501808196508360051b8101915082860160005b8581101561174057828403895261172e84835161162f565b98850198935090840190600101611716565b5091979650505050505050565b60006101408083526117618184018e61162f565b9050602083820381850152611776828e6116f8565b91508b60408501528a60608501528960808501528860a085015283820360c08501528188518084528284019150828a01935060005b818110156117c7578451835293830193918301916001016117ab565b50508760e08601528481036101008601526117e281886116f8565b93505050506117fd6101208301846001600160a01b03169052565b9b9a5050505050505050505050565b64534545525f60d81b81526000835161182c8160058501602088016115b5565b605f60f81b600591840191820152835161184d8160068401602088016115b5565b01600601949350505050565b60018060a01b0385168152836020820152608060408201526000611880608083018561162f565b8281036060840152611892818561162f565b979650505050505050565b6000602082840312156118af57600080fd5b81516112ad8161127856fea2646970667358221220ada27f0dc3cd17ca8749c1756d21866caf1bcc3fc94db4a0ad510f6d96113e8764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100eb5760003560e01c8063738cc3f011610092578063738cc3f01461020557806380f5560514610218578063b1283e771461022b578063b2016bd41461023e578063b7083ac514610265578063bc8802a214610278578063e4c0aaf41461029f578063ec979082146102b2578063fdf13b04146102c357600080fd5b80630c340a24146100f05780632ff8d50414610120578063375a7cba146101475780634a3382e51461015c5780635bd9e2991461017b5780635c3ef427146101a257806361371325146101b75780636cc6cde1146101de575b600080fd5b600054610103906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61014f6102d6565b604051610117919061122b565b6101666201fa4081565b60405163ffffffff9091168152602001610117565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101b56101b0366004611290565b610338565b005b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61010361021336600461144c565b61038d565b600254610103906001600160a01b031681565b61010361023936600461152f565b61055d565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b61010361027336600461144c565b610587565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6101b56102ad366004611290565b6106a7565b600154604051908152602001610117565b6101036102d136600461144c565b6106f3565b6060600180548060200260200160405190810160405280929190818152602001828054801561032e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610310575b5050505050905090565b6000546001600160a01b0316331461036b5760405162461bcd60e51b815260040161036290611548565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000816020015151826040015151146103da5760405162461bcd60e51b815260206004820152600f60248201526e098cadcced0e840dad2e6dac2e8c6d608b1b6044820152606401610362565b60008260400151516001600160401b038111156103f9576103f96112b4565b604051908082528060200260200182016040528015610422578160200160208202803683370190505b5090506000805b8460400151518110156104e6576104688560200151828151811061044f5761044f611570565b602002602001015160018760c001518860a00151610822565b83828151811061047a5761047a611570565b6020026020010181815250508183828151811061049957610499611570565b60200260200101516040516020016104bb929190918252602082015260400190565b60405160208183030381529060405280519060200120915080806104de9061159c565b915050610429565b506000610519828660400151517f0000000000000000000000000000000000000000000000000000000000000000610a6e565b90506000610553866040518060a0016040528086815260200187815260200185815260200189604001515181526020016001815250610b84565b9695505050505050565b6001818154811061056d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600081606001518260800151116105d15760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420626f756e647360901b6044820152606401610362565b60008061062a84602001516000815181106105ee576105ee611570565b602002602001015160018660c001518760a0015160027f0000000000000000000000000000000000000000000000000000000000000000610cf7565b6040805160018082528183019092529294509092506000919060208083019080368337019050509050828160008151811061066757610667611570565b6020026020010181815250506000610553866040518060a00160405280878152602001858152602001868152602001600281526020016001815250610b84565b6000546001600160a01b031633146106d15760405162461bcd60e51b815260040161036290611548565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000600282604001515110156107445760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081bdd5d18dbdb595cc818dbdd5b9d60521b6044820152606401610362565b6000806107a1846020015160008151811061076157610761611570565b602002602001015160028660c001518760a001518860400151517f0000000000000000000000000000000000000000000000000000000000000000610cf7565b604080516001808252818301909252929450909250600091906020808301908036833701905050905082816000815181106107de576107de611570565b6020026020010181815250506000610553866040518060a0016040528087815260200185815260200186815260200189604001515181526020016002815250610b84565b60008084848760405160200161083a939291906115d9565b60408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b8216938501939093526107e960e61b6054850152605884018790527f0000000000000000000000000000000000000000000000000000000000000000831b811660788501523090921b909116608c830152600060a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190611612565b63ffffffff16156109a2579150610a669050565b604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063484b93c490610a1e9089908b907f0000000000000000000000000000000000000000000000000000000000000000906201fa40908c906000908d9060040161165b565b6020604051808303816000875af1158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6191906116ab565b925050505b949350505050565b60405163365bb9d560e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d96ee75490610ac1908590889088906004016116c4565b600060405180830381600087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b5050604051634296357160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063852c6ae29150610b43908590889088906004016116c4565b602060405180830381865afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906116ab565b6002546000908190610b9e906001600160a01b0316610d20565b6040840151606085015160018054939450610bc193610bbc916116e5565b610d92565b835160408086015160608701516080808901518885015189516020808c0151948c0151908d015197516304b892a960e21b81526001600160a01b038b16996312e24aa499610c3e9991989197919695949391927f00000000000000000000000000000000000000000000000000000000000000009060040161174d565b600060405180830381600087803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b50506040516001600160a01b03841692507f6cbab6250b188d6d9b0b6c7b0246bd61d23de28520080c27e417bf27e4c47b3d9150600090a26001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03831617905590505b92915050565b600080610d0688888888610822565b9150610d13828585610a6e565b9050965096945050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116610d8d576040516330be1a3d60e21b815260040160405180910390fd5b919050565b6000610d9d83611036565b905060005b815181101561102f5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f76000801b88868681518110610df357610df3611570565b60200260200101516040518463ffffffff1660e01b8152600401610e2a939291909283526020830191909152604082015260600190565b602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906116ab565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2291906116ab565b90506000610f2f866110c1565b610f42610f3d8660016116e5565b6110c1565b604051602001610f5392919061180c565b60408051601f1981840301815290829052630bb13cd160e41b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb13cd1090610fd5907f000000000000000000000000000000000000000000000000000000000000000090869086908190600401611859565b6020604051808303816000875af1158015610ff4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611018919061189d565b5050505080806110279061159c565b915050610da2565b5050505050565b6060816001600160401b03811115611050576110506112b4565b604051908082528060200260200182016040528015611079578160200160208202803683370190505b50905060005b828110156110bb57806001901b82828151811061109e5761109e611570565b6020908102919091010152806110b38161159c565b91505061107f565b50919050565b606060006110ce83611153565b60010190506000816001600160401b038111156110ed576110ed6112b4565b6040519080825280601f01601f191660200182016040528015611117576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461112157509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106111925772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111be576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111dc57662386f26fc10000830492506010015b6305f5e10083106111f4576305f5e100830492506008015b612710831061120857612710830492506004015b6064831061121a576064830492506002015b600a8310610cf15760010192915050565b6020808252825182820181905260009190848201906040850190845b8181101561126c5783516001600160a01b031683529284019291840191600101611247565b50909695505050505050565b6001600160a01b038116811461128d57600080fd5b50565b6000602082840312156112a257600080fd5b81356112ad81611278565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156112ec576112ec6112b4565b60405290565b604051601f8201601f191681016001600160401b038111828210171561131a5761131a6112b4565b604052919050565b600082601f83011261133357600080fd5b81356001600160401b0381111561134c5761134c6112b4565b61135f601f8201601f19166020016112f2565b81815284602083860101111561137457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126113a257600080fd5b813560206001600160401b03808311156113be576113be6112b4565b8260051b6113cd8382016112f2565b93845285810183019383810190888611156113e757600080fd5b84880192505b85831015611423578235848111156114055760008081fd5b6114138a87838c0101611322565b83525091840191908401906113ed565b98975050505050505050565b63ffffffff8116811461128d57600080fd5b8035610d8d8161142f565b60006020828403121561145e57600080fd5b81356001600160401b038082111561147557600080fd5b9083019060e0828603121561148957600080fd5b6114916112ca565b8235828111156114a057600080fd5b6114ac87828601611322565b8252506020830135828111156114c157600080fd5b6114cd87828601611391565b6020830152506040830135828111156114e557600080fd5b6114f187828601611391565b604083015250606083013560608201526080830135608082015260a083013560a082015261152160c08401611441565b60c082015295945050505050565b60006020828403121561154157600080fd5b5035919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115ae576115ae611586565b5060010190565b60005b838110156115d05781810151838201526020016115b8565b50506000910152565b83815263ffffffff60e01b8360e01b166020820152600082516116038160248501602087016115b5565b91909101602401949350505050565b60006020828403121561162457600080fd5b81516112ad8161142f565b600081518084526116478160208601602086016115b5565b601f01601f19169290920160200192915050565b87815260e06020820152600061167460e083018961162f565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6000602082840312156116bd57600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b80820180821115610cf157610cf1611586565b600081518084526020808501808196508360051b8101915082860160005b8581101561174057828403895261172e84835161162f565b98850198935090840190600101611716565b5091979650505050505050565b60006101408083526117618184018e61162f565b9050602083820381850152611776828e6116f8565b91508b60408501528a60608501528960808501528860a085015283820360c08501528188518084528284019150828a01935060005b818110156117c7578451835293830193918301916001016117ab565b50508760e08601528481036101008601526117e281886116f8565b93505050506117fd6101208301846001600160a01b03169052565b9b9a5050505050505050505050565b64534545525f60d81b81526000835161182c8160058501602088016115b5565b605f60f81b600591840191820152835161184d8160068401602088016115b5565b01600601949350505050565b60018060a01b0385168152836020820152608060408201526000611880608083018561162f565b8281036060840152611892818561162f565b979650505050505050565b6000602082840312156118af57600080fd5b81516112ad8161127856fea2646970667358221220ada27f0dc3cd17ca8749c1756d21866caf1bcc3fc94db4a0ad510f6d96113e8764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_governor": "Address of the governor of this contract.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrappedERC20Factory": "Address of the WrappedERC20Factory implementation."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2509,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2512,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2514,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "market",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}