type Market @entity {
  id: ID!
  marketName: String!
  outcomes: [String!]!
  outcomesSupply: BigInt!
  lowerBound: BigInt!
  upperBound: BigInt!
  conditionId: Bytes!
  questionId: Bytes!
  questionsIds: [Bytes!]!
  templateId: BigInt!
  encodedQuestions: [String!]!
  payoutReported: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  questions: [MarketQuestion!]! @derivedFrom(field: "market")
  openingTs: BigInt!
  hasAnswers: Boolean!
  " finalizeTs is equal to 33260976000 (random big number) if there is any unanswered question, otherwise it contains the finalizeTs value of the lattest question. This allows us to filter multi scalar markets using `finalizeTs > now` for markets with pending answers, and `finalizeTs < now` for markets with pending execution "
  finalizeTs: BigInt!
  questionsInArbitration: BigInt!
  index: BigInt!
}

type MarketsCount @entity {
  id: ID!
  count: BigInt!
}

type Question @entity {
  id: ID!
  index: Int!
  arbitrator: Bytes!
  opening_ts: BigInt!
  timeout: BigInt!
  finalize_ts: BigInt!
  is_pending_arbitration: Boolean!
  best_answer: Bytes!
  bond: BigInt!
  min_bond: BigInt!
  arbitration_occurred: Boolean!
  markets: [MarketQuestion!]! @derivedFrom(field: "question")
}

type MarketQuestion @entity {
  id: ID!
  market: Market!
  question: Question!
}

type Condition @entity {
  " Conditional token conditionId "
  id: ID!
  market: Market!
}